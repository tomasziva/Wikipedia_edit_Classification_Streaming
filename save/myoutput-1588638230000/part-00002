{"title_page": "WebAssembly", "text_new": "{{Use dmy dates|date=February 2020}}\n{{Short description|binary format for executables used by web pages}}\n\n{{Infobox programming language\n| title = WebAssembly\n| logo = WebAssembly Logo.svg\n| logo caption = \n| screenshot = <!-- (filename) -->\n| screenshot caption = \n| paradigm = [[Imperative programming|Imperative]], [[Structured programming|structured]], [[Expression-oriented programming language|expression-oriented]]\n| family = \n| released = {{Start date and age|df=yes|2017|3}}\n| designer = [[World Wide Web Consortium|W3C]]\n| developer = {{Unbulleted list|[[World Wide Web Consortium|W3C]]|[[Mozilla]]|[[Microsoft]]|[[Google]]|[[Apple Inc.|Apple]]}}\n| latest release version = \n| latest release date = \n| typing = [[Type system|Static]]\n| scope = \n| implementations = \n| dialects = \n| influenced by = {{Hlist|[[asm.js]]|[[Google Native Client|PNaCl]]}}\n| influenced = \n| programming language = \n| license = [[Apache License 2.0]]\n| file extensions = {{Unbulleted list|.wat|.wasm}}\n| file format = <!-- or: | file formats = -->\n}}\n'''WebAssembly''' (often shortened to '''Wasm''') is an [[open standard]] that defines a [[software portability|portable]] [[binary code|binary-code]] format for [[executable|executable programs]], and a corresponding textual [[assembly language]], as well as interfaces for facilitating interactions between such programs and their host environment.<ref>{{Cite web|url=https://webassembly.github.io/spec/core/intro/introduction.html|title=Introduction \u2014 WebAssembly 1.0|website=webassembly.github.io|access-date=18 June 2019|quote=WebAssembly is an open standard...}}</ref><ref>{{Cite web|url=https://webassembly.github.io/spec/core/intro/introduction.html|title=Introduction \u2014 WebAssembly 1.0|website=webassembly.github.io|access-date=18 June 2019|quote=WebAssembly is a ... code format}}</ref><ref name=\":0\">{{Cite web|url=https://webassembly.github.io/spec/core/syntax/conventions.html|title=Conventions \u2014 WebAssembly 1.0|website=webassembly.github.io|access-date=17 May 2019|quote=WebAssembly is a programming language that has multiple concrete representations (its binary format and the text format). Both map to a common structure.}}</ref><ref>{{Cite web|url=https://webassembly.github.io/spec/core/intro/introduction.html|title=Introduction \u2014 WebAssembly 1.0|website=webassembly.github.io|access-date=18 June 2019|quote=... this specification is complemented by additional documents defining interfaces to specific embedding environments such as the Web. These will each define a WebAssembly application programming interface (API) suitable for a given environment.}}</ref> The main goal of WebAssembly is to enable high-performance applications on [[web page]]s, but the format is designed to be executed and integrated in other environments as well.<ref>{{Cite web|url=https://webassembly.github.io/spec/core/intro/introduction.html|title=WebAssembly Specification Release 1.0 (Draft, last updated Apr 16, 2019): Introduction|website=webassembly.org|access-date=6 May 2019|quote=Its main goal is to enable high performance applications on the Web, but it does not make any Web-specific assumptions or provide Web-specific features, so it can be employed in other environments as well.}}</ref><ref>{{Cite journal|last=Haas|first=Andreas|last2=Rossberg|first2=Andreas|last3=Schuff|first3=Derek L.|last4=Titzer|first4=Ben L.|last5=Holman|first5=Michael|last6=Gohman|first6=Dan|last7=Wagner|first7=Luke|last8=Zakai|first8=Alon|last9=Bastien|first9=JF|date=14 June 2017|title=Bringing the Web Up to Speed with WebAssembly|journal=SIGPLAN Notices|volume=52|issue=6|pages=185\u2013200|doi=10.1145/3140587.3062363|issn=0362-1340|quote=While the Web is the primary motivation for WebAssembly, nothing in its design depends on the Web or a JavaScript environment. It is an open standard specifically designed for embedding in multiple contexts, and we expect that stand-alone implementations will become available in the future.|doi-access=free}}</ref>\n\nWebAssembly became a [[World Wide Web Consortium]] recommendation on 5 December 2019<ref>{{cite web |author1=World Wide Web Consortium |title=WebAssembly Core Specification |url=https://www.w3.org/TR/wasm-core-1/ |website=World Wide Web Consortium (W3) |accessdate=9 December 2019}}</ref> and, alongside [[HTML]], [[CSS]], and [[JavaScript]], is the fourth language to run natively in browsers.<ref>{{cite web |last1=Couriol |first1=Bruno |title=WebAssembly 1.0 Becomes a W3C Recommendation and the Fourth Language to Run Natively in Browsers |url=https://www.infoq.com/news/2019/12/webassembly-w3c-recommendation/ |website=infoq.com |accessdate=9 December 2019}}</ref> In order to use Wasm in browsers, users may use [[Emscripten|Emscripten SDK]] to compile C++ (or any other [[LLVM]]-supported language such as [[D (programming language)|D]] or [[Rust (programming language)|Rust]]) source code into a binary file which runs in the same [[sandbox (computer security)|sandbox]] as regular JavaScript code.{{Refn|group=note|According to official documentation the Emscripten SDK may be used to create <code>.wasm</code> files which then may be executed in web browser.<ref>{{Cite web|url=https://webassembly.org/getting-started/developers-guide/|title=Developer's Guide - WebAssembly|website=webassembly.org|access-date=10 June 2019}}</ref><ref>{{Cite web|url=https://developer.mozilla.org/en-US/docs/WebAssembly/C_to_wasm|title=Compiling a New C/C++ Module to WebAssembly|website=MDN Web Docs|language=en|access-date=10 June 2019}}</ref><ref>{{Cite web|url=https://emscripten.org/docs/compiling/WebAssembly.html|title=Building to WebAssembly \u2014 Emscripten 1.38.33 documentation|website=emscripten.org|access-date=10 June 2019}}</ref> Even though Emscripten can consume various languages when using [[Clang]] some problems may arise.<ref>{{Cite web|url=https://developers.google.com/web/updates/2018/03/emscripting-a-c-library|title=Emscripting a C library to Wasm {{!}} Web|website=Google Developers|language=en|access-date=10 June 2019}}</ref>}} Emscripten provides bindings for several commonly used environment interfaces like [[WebGL]].  There is no direct [[Document Object Model]] (DOM) access; however, it is possible to create proxy functions for this, for example through stdweb,<ref>{{Cite web|url=https://docs.rs/stdweb/*/stdweb/|title=stdweb - Rust|website=docs.rs|access-date=5 June 2019|quote=The goal of this crate is to provide Rust bindings to the Web APIs and to allow a high degree of interoperability between Rust and JavaScript.}}</ref> web_sys,<ref>{{Cite web|url=https://docs.rs/web-sys/*/web_sys/|title=web_sys - Rust|website=docs.rs|access-date=5 June 2019|quote=Raw API bindings for Web APIs. This is a procedurally generated crate from browser WebIDL which provides a binding to all APIs that browser provide on the web.}}</ref> and js_sys<ref>{{Cite web|url=https://docs.rs/js-sys/*/js_sys/|title=js_sys - Rust|website=docs.rs|access-date=5 June 2019|quote=Bindings to JavaScript's standard, built-in objects, including their methods and properties.}}</ref> when using [[Rust (programming language)|Rust language]].\n\nThe [[World Wide Web Consortium]] (W3C) maintains the standard with contributions from [[Mozilla]], [[Microsoft]], [[Google]], and [[Apple Inc.|Apple]].<ref name=\"ars\"/>\n\n== History ==\nWebAssembly was first announced in 2015,<ref name=\"Launch bug\"/> and the first demonstration was executing [[Unity (game engine)|Unity]]'s ''Angry Bots'' in [[Firefox]],<ref name=\"Unity in Firefox\"/> [[Google Chrome]],<ref name=\"V8 blog\"/> and [[Microsoft Edge]].<ref name=\"Edge\"/> The precursor technologies were [[asm.js]] from [[Mozilla]] and [[Google Native Client]],<ref name=\"techcrunch2015\"/><ref name=\"PNaCl\"/> and the initial implementation was based on the feature set of asm.js.<ref name=\"initial implementation\"/> The asm.js technology already provides near-native code execution speeds<ref>{{Cite web|url=https://blog.mozilla.org/javascript/2013/08/01/staring-at-the-sun-dalvik-vs-spidermonkey/|title=Staring at the Sun: Dalvik vs. ASM.js vs. Native|website=blog.mozilla.org|access-date=7 December 2019|quote=Even discarding the one score where asm.js did better, it executes at around 70% of the speed of native C++ code.}}</ref> and can be considered a viable alternative for browsers that don't support WebAssembly or have it disabled for security reasons.\n\nIn March 2017, the design of the [[minimum viable product]] (MVP) was declared to be finished and the preview phase ended.<ref name=\"MVP\"/> {{As of|2017|September|alt=In late September 2017}}, [[Safari (web browser)|Safari 11]] was released with support. In February 2018, the WebAssembly Working Group published three public working drafts for the Core Specification, JavaScript Interface, and Web API.<ref name=\"W3C-WD2018\" /><ref name=\"W3C-CSWD2018\" /><ref name=\"W3C-JIWD2018\" /><ref name=\"W3C-WAWD2018\" />\n\n== Support ==\nIn November 2017, Mozilla declared support \"in all major browsers\"<ref name=\"in browsers\"/> (by now all major on mobile and desktop), after WebAssembly was enabled by default in Edge 16.<ref name=\"Edge16\"/> The support includes mobile web browsers for iOS and Android. <!--While outdated, no longer supported, Android 4.4.4 KitKat and older versions don't have WebViews that support.--> {{As of|2020|04}}, 90.93% of installed browsers (91.9% of desktop browsers<!--\"tracked desktop\"--> and 91.78% of mobile browsers<!--\"tracked mobile\"-->) support WebAssembly.<ref name=\"caniuse.com\"/>\nBut for older browsers, Wasm can be compiled into asm.js by a JavaScript [[polyfill (programming)|polyfill]].<ref name=\"ars2015\"/>\n\nBecause WebAssembly [[executable]]s are precompiled, it is possible to use a variety of programming languages to make them.<ref name=AcceleratingWeb/> This is achieved either through direct compilation to Wasm, or through implementation of the corresponding [[Virtual machine#Process virtual machines|virtual machines]] in Wasm. There have been around 40 programming languages reported to support Wasm as a compilation target.<ref name=Implementations/>\n\n[[Emscripten]] compiles [[C (programming language)|C]] and [[C++]] to Wasm<ref name=\"MVP\"/> using the [[LLVM]] backend.<ref>{{Cite tweet|user=kripken|number=1186407352880074752|title=Emscripten has switched to the upstream LLVM wasm backend by default! / Details:<nowiki>https://groups.google.com/forum/#!topic/emscripten-discuss/NpxVAOirSl4</nowiki> \u2026|last=Zakai|first=Alon|date=21 October 2019|access-date=22 October 2019}}</ref>\n\nAs of version 8<ref>{{Cite web|url=https://releases.llvm.org/8.0.0/docs/ReleaseNotes.html#changes-to-the-webassembly-target|title=LLVM 8.0.0 Release Notes \u2014 LLVM 8 documentation|website=releases.llvm.org|access-date=22 October 2019}}</ref> a standalone Clang can compile C and C++ to Wasm.\n\nIts initial aim is to support [[compilation (computing)|compilation]] from [[C (programming language)|C]] and [[C++]],<ref name=\"github.com\"/> though support for other source [[programming language|languages]] such as [[Rust (programming language)|Rust]] and [[.NET languages]] is also emerging.<ref name=\"Rust\"/><ref>{{Cite web|url=https://blazor.net/docs/introduction/faq.html|title=Frequently asked questions (FAQ) about Blazor|website=blazor.net|access-date=18 June 2018}}</ref><ref name=Implementations/> After the MVP release, there are plans to support [[Thread (computing)#Multithreading|multithreading]] and [[garbage collection (computer science)|garbage collection]]<ref name=\"next\"/><ref>{{Cite web|url=https://github.com/WebAssembly/proposals/issues/16|title=\ud83d\udee4 Garbage collection \u00b7 Issue #16 \u00b7 WebAssembly/proposals|website=GitHub|language=en|access-date=25 July 2019}}</ref> which would make WebAssembly a compilation target for garbage-collected programming languages like [[C Sharp (programming language)|C#]] (supported via [[Blazor]]), [[F Sharp (programming language)|F#]] (supported via Bolero<ref>{{Cite web|url=https://fsbolero.io/|title=Bolero: F# in WebAssembly|website=fsbolero.io|access-date=25 July 2019}}</ref> with help of Blazor), [[Python (programming language)|Python]], and even [[JavaScript]] where the browser's [[Just-in-time compilation]] speed is considered too slow. A number of other languages have some support including [[Java (programming language)|Java]], [[Julia (programming language)|Julia]],<ref>{{Cite web|url=https://nextjournal.com/sdanisch/wasm-julia|title=Julia in the Browser |website=nextjournal.com|access-date=9 April 2019}}</ref><ref>{{Cite web|url=https://github.com/JuliaPackaging/Yggdrasil/pull/2|title=WebAssembly platform by tshort \u00b7 Pull Request #2 \u00b7 JuliaPackaging/Yggdrasil|website=GitHub|language=en|access-date=9 April 2019}}</ref><ref>{{Citation|last=Fischer|first=Keno|title=GitHub - Keno/julia-wasm: Running julia on wasm.|date=22 July 2019|url=https://github.com/Keno/julia-wasm|access-date=25 July 2019}}</ref> [[Ruby (programming language)|Ruby]],<ref>{{Cite web|url=https://ruby.dj/|title=MRuby in Your Browser|website=ruby.dj|access-date=25 July 2019}}</ref> as well as [[Go (programming language)|Go]].\n\n== Security considerations ==\nIn June 2018, a security researcher presented the possibility of using WebAssembly to circumvent browser mitigations for [[Spectre (security vulnerability)|Spectre]] and [[Meltdown (security vulnerability)|Meltdown]] security vulnerabilities once support for [[thread (computing)|thread]]s with shared memory is added. Due to this concern, WebAssembly developers put the feature on hold.<ref name=\"forcepoint\"/><ref name=\"bleeping computer\">{{cite web |last1=Cimpanu |first1=Catalin |title=Changes in WebAssembly Could Render Meltdown and Spectre Browser Patches Useless |url=https://www.bleepingcomputer.com/news/security/changes-in-webassembly-could-render-meltdown-and-spectre-browser-patches-useless/ |publisher=[[Bleeping Computer]] |accessdate=8 June 2019 |language=en-us |date=24 June 2018}}</ref><ref name=\"tech republic\">{{cite web |last1=Sanders |first1=James |title=How opaque WebAssembly code could increase the risk of Spectre attacks online |url=https://www.techrepublic.com/article/how-opaque-webassembly-code-could-increase-the-risk-of-spectre-attacks-online/ |website=[[Tech Republic]] |accessdate=9 June 2019 |language=en |date=25 June 2018}}</ref> However, in order to explore these future language extensions, Google Chrome added experimental support for the WebAssembly thread proposal in October 2018.<ref>{{cite web |last1=R |first1=Bhagyashree |title=Google Chrome 70 now supports WebAssembly threads to build multi-threaded web applications |url=https://hub.packtpub.com/google-chrome-70-now-supports-webassembly-threads-to-build-multi-threaded-web-applications/ |website=[[Packt|Packt Pub]] |accessdate=9 June 2019 |date=30 October 2018}}</ref>\n\nWebAssembly has been criticized for allowing greater ease of hiding the evidence for [[malware]] writers, scammers and [[phishing]] attackers; WebAssembly is only present on the user's machine in its compiled form, which \"[makes malware] detection difficult\".<ref name=\"virus bulletin\">{{cite web |last1=Lonkar |first1=Aishwarya |last2=Chandrayan |first2=Siddhesh |title=The dark side of WebAssembly |url=https://www.virusbulletin.com/virusbulletin/2018/10/dark-side-webassembly/ |website=[[Virus Bulletin]] |accessdate=8 June 2019 |date=October 2018}}</ref> The speed and concealability of WebAssembly have led to its use in hidden [[Cryptocurrency#Mining|crypto mining]] on the website visitor's device.<ref name=\"virus bulletin\"/><ref name=\"malwarebytes\">{{cite web |last1=Segura |first1=J\u00e9r\u00f4me |title=Persistent drive-by cryptomining coming to a browser near you |url=https://blog.malwarebytes.com/cybercrime/2017/11/persistent-drive-by-cryptomining-coming-to-a-browser-near-you/ |publisher=[[Malwarebytes]] |accessdate=8 June 2019 |date=29 November 2017}}</ref><ref name=\"forcepoint\">{{cite web |last1=Neumann |first1=Robert |last2=Toro |first2=Abel |title=In-browser mining: Coinhive and WebAssembly |url=https://www.forcepoint.com/blog/x-labs/browser-mining-coinhive-and-webassembly |publisher=Forcepoint |accessdate=8 June 2019 |language=en |date=19 April 2018}}</ref> [[Monero (cryptocurrency)#History|Coinhive]], a now defunct service facilitating cryptocurrency mining in website visitors' browsers, claims their \"miner uses WebAssembly and runs with about 65% of the performance of a native Miner.\"<ref name=\"forcepoint\" /> A June 2019 study from the [[Technische Universit\u00e4t Braunschweig]], analyzed the usage of WebAssembly in the Alexa top 1&nbsp;million websites and found the prevalent use was for malicious crypto mining, and that malware accounted for more than half of the WebAssembly-using websites studied.<ref>{{Cite web|url=https://www.infoq.com/news/2019/10/WebAssembly-wasm-malicious-usage/|title=Recent Study Estimates That 50% of Websites Using WebAssembly Apply It for Malicious Purposes|website=InfoQ|access-date=3 November 2019}}</ref><ref>{{cite book |last1=Musch |first1=Marius |title=Detection of Intrusions and Malware, and Vulnerability Assessment |volume=11543 |pages=23\u201342 |last2=Wressnegger |first2=Christian |last3=Johns |first3=Martin |last4=Rieck |first4=Konrad |chapter=New Kid on the Web: A Study on the Prevalence of WebAssembly in the Wild |chapter-url=https://www.tu-braunschweig.de/Medien-DB/ias/pubs/2019-dimva.pdf |publisher=[[Detection of Intrusions and Malware, and Vulnerability Assessment]] |accessdate=4 November 2019 |doi=10.1007/978-3-030-22038-9_2 |date=June 2019|series=Lecture Notes in Computer Science |isbn=978-3-030-22037-2 }} [https://www.dimva2019.org/wp-content/uploads/sites/31/2019/06/DIMVA19-slides-2-R.pdf Slides (PDF)]</ref>\n\nAs WebAssembly only supports structured [[control flow]], it is amenable toward security verification techniques including [[symbolic execution]]. Current efforts in this direction include the Manticore symbolic execution engine.<ref name=\"manticore\" />\n\n{{Anchor|Beyond the Browser}}\n\n== Embedding ==\nThe general standards provide core specifications for JavaScript and Web embedding.<ref name=\":0\" />\n\nWhile WebAssembly was initially designed to enable near-native code execution speed in the web browser, it has been considered valuable outside of such, in more generalized contexts.<ref name=\"nonweb\">{{cite web |url=https://webassembly.org/docs/non-web/ |title=Non-Web Embeddings |work=WebAssembly |accessdate=15 May 2019}}</ref><ref name=\"nonwebsrc\">{{cite web |url=https://github.com/WebAssembly/design/blob/master/NonWeb.md |title=Non-Web Embeddings |work=[[GitHub]] / WebAssembly |accessdate=15 May 2019}}</ref>\n\n== WASI ==\n{{anchor|WASI}}WebAssembly System Interface (WASI) is a simple interface ([[application binary interface|ABI]] and [[application programming interface|API]]) designed by [[Mozilla]] intended to be portable to any platform.<ref name=\"WASI\">{{cite web |url=https://github.com/WebAssembly/WASI |title=WebAssembly System Interface Repo |work=[[GitHub]] / WebAssembly|date=10 February 2020 }}</ref> It provides [[POSIX]] features like file I/O constrained by [[capability-based security]].<ref>{{cite web |title=Additional background on Capabilities |url=https://github.com/bytecodealliance/wasmtime/blob/master/docs/WASI-capabilities.md |website=GitHub |publisher=bytecodealliance |language=en}}</ref><ref>{{cite web |title=Standardizing WASI: A system interface to run WebAssembly outside the web \u2013 Mozilla Hacks - the Web developer blog |url=https://hacks.mozilla.org/2019/03/standardizing-wasi-a-webassembly-system-interface/ |website=Mozilla Hacks \u2013 the Web developer blog}}</ref> There are also a few other proposed ABI/APIs.<ref name=\"reference-sysroot\">{{cite web |url=https://github.com/WebAssembly/reference-sysroot |title=reference-sysroot Repo |work=[[GitHub]] / WebAssembly|date=12 January 2020 }}</ref><ref name=\"wasm-c-api\">{{cite web |url=https://github.com/WebAssembly/wasm-c-api |title=wasm-c-api Repo |work=[[GitHub]] / WebAssembly|date=3 February 2020 }}</ref>\n\nWASI was influenced by [[Capsicum (Unix)#CloudABI|CloudABI]] and [[Capsicum (Unix)|Capsicum]].\n\n== Specification{{Anchor|Features}}==\n\n=== Virtual machine ===\nWasm code (binary or bytecode) is intended to be run on a [[Software portability|portable]] virtual [[stack machine]] (VM).<ref name=\"stack machine\" /> The VM is designed to be faster to parse and execute than JavaScript and to have a compact code representation.<ref name=\"github.com\" />\n\n=== Wasm program ===\nA Wasm program is designed to be a separate module containing collection of various wasm-defined value and program types definitions expressed either in binary or textual format (see below) that both have a common structure.<ref>{{Cite web|url=https://webassembly.github.io/spec/core/syntax/conventions.html|title=Conventions \u2014 WebAssembly 1.0|website=webassembly.github.io|access-date=12 November 2019}}</ref>\n\n==== Instruction set ====\nThe core standard for binary format of wasm program defines [[Instruction set architecture|Instruction Set Architecture]] consisting of specific [[Opcode|binary encoding]] of types of operations which are executed by the VM. It doesn't specify how exactly they must be executed by the VM however.<ref>{{Cite web|url=https://webassembly.github.io/spec/core/intro/introduction.html?highlight=isa#scope|title=Introduction \u2014 WebAssembly 1.0|website=webassembly.github.io|access-date=17 May 2019}}</ref> The list of instructions includes standard memory load/store instructions, numeric, parametric, [[Control flow|control of flow]] [[Instruction set architecture|instruction types]] and wasm-specific variable instructions.<ref>{{Cite web|url=https://webassembly.github.io/spec/core/syntax/instructions.html|title=Instructions \u2014 WebAssembly 1.0|website=webassembly.github.io|access-date=12 November 2019}}</ref>\n\n==== Code representation ====\nIn March 2017, the WebAssembly Community Group reached consensus on the initial (MVP) binary format, JavaScript API, and reference interpreter.<ref name=\"Roadmap\" /> It defines a WebAssembly binary format ({{code|.wasm}}), which is not designed to be used by humans, as well as a human-readable WebAssembly text format ({{code|.wat}}) that resembles a cross between S-expressions and traditional assembly languages.\n\nThe table below represents three different views of the same source code input from the left, as it is converted to a Wasm [[intermediate representation]], then to Wasm binary instructions:<ref name=\"Text Format\" />\n\n{| class=\"wikitable\"\n|-\n! [[C (programming language)|C]] input source !! Linear assembly bytecode<br/> ([[intermediate representation]]) !! Wasm binary encoding<br/> (hexadecimal bytes)\n|- style=\"vertical-align:top\"\n|\n<syntaxhighlight lang=\"c\">\nint factorial(int n) {\n  if (n == 0)\n    return 1;\n  else\n    return n * factorial(n-1);\n}\n</syntaxhighlight>\n||\n<syntaxhighlight lang=\"lisp\">\n; magic number\n; type for (func (param i64) (result i64))\n; function section\n; code section start\n(func (param i64) (result i64)\n  local.get 0\n  i64.eqz\n  if (result i64)\n      i64.const 1\n  else\n      local.get 0\n      local.get 0\n      i64.const 1\n      i64.sub\n      call 0\n      i64.mul\n  end)\n; module end, size fixups\n</syntaxhighlight>\n||\n<syntaxhighlight lang=\"text\">\n00 61 73 6D 01 00 00 00\n01 00 01 60 01 73 01 73 06\n03 00 01 00 02\n0A 00 01\n00 00\n20 00\n50\n04 7E\n42 01\n05\n20 00\n20 00\n42 01\n7D\n10 00\n7E\n0B\n0B 15 17\n</syntaxhighlight>\n|}\n\nAll integer constants are encoded using a space-efficient, variable-length [[LEB128]] encoding.<ref name=wasmint>{{cite web\n |        url = https://webassembly.github.io/spec/core/binary/values.html#integers\n |      title = WebAssembly Specification Release 1.0\n | accessdate = 13 January 2020\n |     author = WebAssembly Community Group\n |date=January 2020\n}}</ref>\n\nThe WebAssembly text format is more canonically written in a folded format using [[s-expression]]s. For instructions and expressions, this format is purely [[syntactic sugar]] and has no behavioral differences with the linear format.<ref name=\"Folded Instructions\"/> Through {{code|wasm2wat}}, the code above decompiles to:\n\n<syntaxhighlight lang=\"lisp\">\n(module\n  (type $t0 (func (param i64) (result i64)))\n  (func $f0 (type $t0) (param $p0 i64) (result i64)\n    (if $I0 (result i64) ; $I0 is an unused label name\n      (i64.eqz\n        (local.get $p0)) ; the name $p0 is the same as 0 here\n      (then\n        (i64.const 1))\n      (else\n        (i64.mul\n          (local.get $p0)\n          (call $f0      ; the name $f0 is the same as 0 here\n            (i64.sub\n              (local.get $p0)\n              (i64.const 1))))))))\n</syntaxhighlight>\n\nNote that a module is implicitly generated by the compiler. The function is actually referenced by an entry of the type table in the binary, hence a type section and the {{code|type}} emitted by the decompiler.<ref>{{cite web |title=Modules (Binary) |url=https://webassembly.github.io/spec/core/syntax/modules.html |website=WebAssembly 1.0}}</ref> The compiler and decompiler can be accessed online.<ref>{{cite web |title=WebAssembly Binary Toolkit (wabt) demos |url=https://webassembly.github.io/wabt/demo/ |website=webassembly.github.io}}</ref>\n\n== Literature ==\n* {{Cite journal|first1=Andreas|last1=Haas|first2=Andreas|last2=Rossberg|first3=Derek L.|last3=Schuff|first4=Ben L.|last4=Titzer|first5=Dan|last5=Gohman|first6=Luke|last6=Wagner|first7=Alon|last7=Zakai|first8=JF|last8=Bastien|first9=Michael|last9=Holman|date=June 2017|title=Bringing the web up to speed with WebAssembly|url=https://dl.acm.org/ft_gateway.cfm?id=3062363&type=pdf|journal=Proceedings of the 38th ACM SIGPLAN Conference on Programming Language Design and Implementation|publisher=Association for Computing Machinery|volume=|pages=185\u2013200|doi=10.1145/3062341.3062363|via=|isbn=9781450349888|doi-access=free}}\n* {{Cite journal|last=Watt|first=Conrad|date=2018|title=Mechanising and Verifying the WebAssembly Specification|url=https://www.cl.cam.ac.uk/~caw77/papers/mechanising-and-verifying-the-webassembly-specification.pdf|journal=ACM SIGPLAN International Conference on Certified Programs and Proofs|publisher=ACM|volume=7|pages=53\u201365|doi=10.1145/3167082|via=|isbn=9781450355865}}\n\n== Notes ==\n{{reflist|group=note}}\n\n== References ==\n{{reflist|30em|refs=\n<ref name=\"techcrunch2015\">{{Cite news|url=https://techcrunch.com/2015/06/17/google-microsoft-mozilla-and-others-team-up-to-launch-webassembly-a-new-binary-format-for-the-web/|title=Google, Microsoft, Mozilla And Others Team Up To Launch WebAssembly, A New Binary Format For The Web|last=Lardinois|first=Frederic|date=17 June 2015|work=TechCrunch|access-date=24 December 2017|language=en}}</ref>\n\n<ref name=\"ars\">{{cite web |first=Peter |last=Bright |url=https://arstechnica.com/information-technology/2015/06/the-web-is-getting-its-bytecode-webassembly/|title=The Web is getting its bytecode: WebAssembly|work=[[Ars Technica]] |publisher=[[Cond\u00e9 Nast]] |date=18 June 2015}}</ref>\n\n<ref name=AcceleratingWeb>{{cite web|url=https://zendev.com/2018/06/26/webassembly-accelerating-future-web-development.html |title=How WebAssembly is Accelerating the Future of Web Development |last=Ball | first=Kevin |date=26 June 2018 |accessdate=22 October 2018 |archive-url=https://web.archive.org/web/20190212141715/https://zendev.com/2018/06/26/webassembly-accelerating-future-web-development.html |archive-date=12 February 2019}}</ref>\n\n<ref name=Implementations>{{cite web |url=https://github.com/appcypher/awesome-wasm-langs |title=Awesome WebAssembly Languages |last= | first= |date=26 June 2018 |accessdate=12 February 2019 |archive-url=https://web.archive.org/web/20190212133939/https://github.com/appcypher/awesome-wasm-langs |archive-date=12 February 2019}}</ref>\n\n<ref name=\"stack machine\">{{cite web|url=https://github.com/WebAssembly/design/blob/master/Rationale.md#why-a-stack-machine|title=Design Rationale|date=1 October 2016|work=[[GitHub]] / WebAssembly / design}}</ref>\n\n<ref name=\"github.com\">{{cite web|url=https://github.com/WebAssembly/design/blob/master/HighLevelGoals.md|title=WebAssembly High-Level Goals|date=11 December 2015|work=[[GitHub]] / WebAssembly / design}}</ref>\n\n<ref name=\"PNaCl\">{{Cite web|url=https://www.infoq.com/news/2017/05/pnacl-webassembly-google|title=Google Is to Remove Support for PNaCl|last=Avram|first=Abel|date=31 May 2017|website=InfoQ|access-date=22 December 2017}}</ref>\n\n<ref name=\"initial implementation\">{{cite web|url=https://www.2ality.com/2015/06/web-assembly.html|title=WebAssembly: a binary format for the web|work=\u2461ality&nbsp;\u2013 JavaScript and more|date=18 June 2015}}</ref>\n\n<ref name=\"Launch bug\">{{Cite web|url=https://github.com/WebAssembly/design/issues/150|title=Launch bug|date=11 June 2015|website=[[GitHub]] / WebAssembly / design}}</ref>\n\n<ref name=\"Unity in Firefox\">{{Cite web|url=https://hacks.mozilla.org/2016/03/a-webassembly-milestone/|title=A WebAssembly Milestone: Experimental Support in Multiple Browsers|last=Wagner|first=Luke|date=14 March 2016|website=Mozilla Hacks}}</ref>\n\n<ref name=\"V8 blog\">{{Cite web|url=https://v8project.blogspot.com/2016/03/experimental-support-for-webassembly.html|title=Experimental support for WebAssembly in V8|last=Thompson|first=Seth|date=15 March 2016|website=V8 Blog}}</ref>\n\n<ref name=\"Edge\">{{Cite web|url=https://blogs.windows.com/msedgedev/2016/03/15/previewing-webassembly-experiments/|title=Previewing WebAssembly experiments in Microsoft Edge|last=Zhu|first=Limin|date=15 March 2016|website=Microsoft Edge dev blog}}</ref>\n\n<ref name=\"MVP\">{{Cite news|url=https://www.infoworld.com/article/3176681/|title=WebAssembly is now ready for browsers to use|last=Krill|first=Paul|date=6 March 2017|work=InfoWorld|access-date=23 December 2017|language=en}}</ref>\n\n<ref name=\"caniuse.com\">{{cite web |title=WebAssembly |url=https://caniuse.com/wasm |work=Can I use |accessdate=1 April 2020}}</ref>\n\n<ref name=\"in browsers\">{{Cite web|url=https://blog.mozilla.org/blog/2017/11/13/webassembly-in-browsers/|title=WebAssembly support now shipping in all major browsers|website=The Mozilla Blog|language=en-US|access-date=21 November 2017}}</ref>\n\n<ref name=\"Edge16\">{{Cite web|url=https://blogs.windows.com/msedgedev/2017/10/31/optimizations-webassembly-sharedarraybuffer-atomics-edgehtml-16/|title=Introducing new JavaScript optimizations, WebAssembly, SharedArrayBuffer, and Atomics in EdgeHTML 16|website=Microsoft Edge Dev Blog|language=en-US|access-date=21 November 2017|date=31 October 2017}}</ref>\n\n<ref name=\"ars2015\">{{Cite news|url=https://arstechnica.com/information-technology/2015/06/the-web-is-getting-its-bytecode-webassembly/|title=The Web is getting its bytecode: WebAssembly|last=Bright|first=Peter|date=18 June 2015|work=Ars Technica|access-date=23 December 2017|language=en-us}}</ref>\n\n<ref name=\"Rust\">{{Cite news|url=https://www.infoworld.com/article/3239129/|title=Direct WebAssembly compilation comes to Rust language|last=Krill|first=Paul|date=29 November 2017|work=InfoWorld|access-date=24 December 2017|language=en}}</ref>\n\n<ref name=\"next\">{{Cite news|url=https://www.techworld.com.au/article/629123/|title=What's next for WebAssembly: GC, threads, debugging|last=Krill|first=Paul|date=26 October 2017|work=TechWorld|access-date=24 December 2017}}</ref>\n\n<ref name=\"Roadmap\">{{Cite web|url=https://webassembly.org/roadmap/|title=Roadmap |website=WebAssembly |date=March 2017}}</ref>\n\n<ref name=\"Text Format\">{{cite web|author1=jfbastien |author2=rossberg-chromium |author3=kripken |author4=titzer |author5=s3ththompson |author6=sunfishcode |author7=lukewagner |author8=flagxor |author9=enricobacis |author10=c3d |author11=binji |author12=andrewosh |date=9 March 2017 |title=Text Format |website=WebAssembly/design |publisher=GitHub |url=https://github.com/WebAssembly/design/blob/master/TextFormat.md }}</ref>\n\n<ref name=\"W3C-WD2018\">{{cite web |url=https://www.w3.org/blog/news/archives/6838|title=WebAssembly First Public Working Drafts|publisher=W3C|date= 15 February 2018|access-date=20 April 2018}}</ref>\n<ref name=\"W3C-CSWD2018\">{{cite web |url=https://www.w3.org/TR/2018/WD-wasm-core-1-20180215/|title=WebAssembly Core Specification|publisher=W3C|date= 15 February 2018|access-date=20 April 2018}}</ref>\n<ref name=\"W3C-JIWD2018\">{{cite web |url=https://www.w3.org/TR/2018/WD-wasm-js-api-1-20180215/|title=WebAssembly JavaScript Interface|publisher=W3C|date= 15 February 2018|access-date=20 April 2018}}</ref>\n<ref name=\"W3C-WAWD2018\">{{cite web |url=https://www.w3.org/TR/2018/WD-wasm-web-api-1-20180215/|title=WebAssembly Web API|publisher=W3C|date= 15 February 2018|access-date=20 April 2018}}</ref>\n\n<ref name=\"Folded Instructions\">{{cite web|url=https://webassembly.github.io/spec/core/text/instructions.html#folded-instructions|title=Folded instructions|work=[[GitHub]]}} / WebAssembly / spec</ref>\n<ref name=\"manticore\">{{cite web|url=https://blog.trailofbits.com/2020/01/31/symbolically-executing-webassembly-in-manticore/|title=Symbolically Executing WebAssembly in Manticore|date=31 January 2020|access-date=10 February 2020}}</ref>\n}}\n\n{{Free-content attribution|\n|title= Text Format\n|author = jfbastien; rossberg-chromium; kripken; titzer; s3ththompson; sunfishcode; lukewagner; flagxor; enricobacis; c3d; binji; andrewosh\n|publisher = GitHub\n|source= WebAssembly/design\n|documentURL= https://github.com/WebAssembly/design/blob/master/TextFormat.md\n|license statement URL= https://github.com/WebAssembly/design/blob/master/LICENSE\n|license= Apache License 2.0\n}}\n\n== Demo ==\n* Widgets demo: [https://yutakaaoki.github.io/demo1/index.html] with NWSTK\n* 3D mountain geometry synthesis demo: [https://yutakaaoki.github.io/demo_Mountain/index.html] with NWSTK\n* Demo for loading and drawing a [[JPEG|jpg]] file: [https://yutakaaoki.github.io/demo2/index.html] with NWSTK\n\n== External links ==\n{{sisterlinks|d=Q20155677|c=Category:WebAssembly|n=no|b=no|s=no|wikt=no|species=no|q=no|v=no|voy=no|m=no|mw=no}}\n* {{Official website}}\n* [https://www.w3.org/community/webassembly/ W3C Community Group]\n* [https://github.com/WebAssembly/design WebAssembly Design]\n* {{Citation|url=https://developer.mozilla.org/en-US/docs/WebAssembly|title=WebAssembly|website=MDN Web Docs|language=en-US}}{{snd}} with info on browser compatibility and specifications (WebAssembly JavaScript API)\n\n{{W3C Standards}}\n{{Web browsers|fsp}}\n{{Web interfaces}}\n{{JavaScript}}\n\n[[Category:Assembly languages]]\n[[Category:Computer-related introductions in 2015]]\n[[Category:World Wide Web Consortium standards]]\n[[Category:Web programming]]\n", "text_old": "{{Use dmy dates|date=February 2020}}\n{{Short description|binary format for executables used by web pages}}\n\n{{Infobox programming language\n| title = WebAssembly\n| logo = WebAssembly Logo.svg\n| logo caption = \n| screenshot = <!-- (filename) -->\n| screenshot caption = \n| paradigm = [[Imperative programming|Imperative]], [[Structured programming|structured]], [[Expression-oriented programming language|expression-oriented]]\n| family = \n| released = {{Start date and age|df=yes|2017|3}}\n| designer = [[World Wide Web Consortium|W3C]]\n| developer = {{Unbulleted list|[[World Wide Web Consortium|W3C]]|[[Mozilla]]|[[Microsoft]]|[[Google]]|[[Apple Inc.|Apple]]}}\n| latest release version = \n| latest release date = \n| typing = [[Type system|Static]]\n| scope = \n| implementations = \n| dialects = \n| influenced by = {{Hlist|[[asm.js]]|[[Google Native Client|PNaCl]]}}\n| influenced = \n| programming language = \n| license = [[Apache License 2.0]]\n| file extensions = {{Unbulleted list|.wat|.wasm}}\n| file format = <!-- or: | file formats = -->\n}}\n'''WebAssembly''' (often shortened to '''Wasm''') is an [[open standard]] that defines a [[software portability|portable]] [[binary code|binary-code]] format for [[executable|executable programs]], and a corresponding textual [[assembly language]], as well as interfaces for facilitating interactions between such programs and their host environment.<ref>{{Cite web|url=https://webassembly.github.io/spec/core/intro/introduction.html|title=Introduction \u2014 WebAssembly 1.0|website=webassembly.github.io|access-date=18 June 2019|quote=WebAssembly is an open standard...}}</ref><ref>{{Cite web|url=https://webassembly.github.io/spec/core/intro/introduction.html|title=Introduction \u2014 WebAssembly 1.0|website=webassembly.github.io|access-date=18 June 2019|quote=WebAssembly is a ... code format}}</ref><ref name=\":0\">{{Cite web|url=https://webassembly.github.io/spec/core/syntax/conventions.html|title=Conventions \u2014 WebAssembly 1.0|website=webassembly.github.io|access-date=17 May 2019|quote=WebAssembly is a programming language that has multiple concrete representations (its binary format and the text format). Both map to a common structure.}}</ref><ref>{{Cite web|url=https://webassembly.github.io/spec/core/intro/introduction.html|title=Introduction \u2014 WebAssembly 1.0|website=webassembly.github.io|access-date=18 June 2019|quote=... this specification is complemented by additional documents defining interfaces to specific embedding environments such as the Web. These will each define a WebAssembly application programming interface (API) suitable for a given environment.}}</ref> The main goal of WebAssembly is to enable high-performance applications on [[web page]]s, but the format is designed to be executed and integrated in other environments as well.<ref>{{Cite web|url=https://webassembly.github.io/spec/core/intro/introduction.html|title=WebAssembly Specification Release 1.0 (Draft, last updated Apr 16, 2019): Introduction|website=webassembly.org|access-date=6 May 2019|quote=Its main goal is to enable high performance applications on the Web, but it does not make any Web-specific assumptions or provide Web-specific features, so it can be employed in other environments as well.}}</ref><ref>{{Cite journal|last=Haas|first=Andreas|last2=Rossberg|first2=Andreas|last3=Schuff|first3=Derek L.|last4=Titzer|first4=Ben L.|last5=Holman|first5=Michael|last6=Gohman|first6=Dan|last7=Wagner|first7=Luke|last8=Zakai|first8=Alon|last9=Bastien|first9=JF|date=14 June 2017|title=Bringing the Web Up to Speed with WebAssembly|journal=SIGPLAN Notices|volume=52|issue=6|pages=185\u2013200|doi=10.1145/3140587.3062363|issn=0362-1340|quote=While the Web is the primary motivation for WebAssembly, nothing in its design depends on the Web or a JavaScript environment. It is an open standard specifically designed for embedding in multiple contexts, and we expect that stand-alone implementations will become available in the future.|doi-access=free}}</ref>\n\nWebAssembly became a [[World Wide Web Consortium]] recommendation on 5 December 2019<ref>{{cite web |author1=World Wide Web Consortium |title=WebAssembly Core Specification |url=https://www.w3.org/TR/wasm-core-1/ |website=World Wide Web Consortium (W3) |accessdate=9 December 2019}}</ref> and, alongside [[HTML]], [[CSS]], and [[JavaScript]], is the fourth language to run natively in browsers.<ref>{{cite web |last1=Couriol |first1=Bruno |title=WebAssembly 1.0 Becomes a W3C Recommendation and the Fourth Language to Run Natively in Browsers |url=https://www.infoq.com/news/2019/12/webassembly-w3c-recommendation/ |website=infoq.com |accessdate=9 December 2019}}</ref> In order to use Wasm in browsers, users may use [[Emscripten|Emscripten SDK]] to compile C++ (or any other [[LLVM]]-supported language such as [[D (programming language)|D]] or [[Rust (programming language)|Rust]]) source code into a binary file which runs in the same [[sandbox (computer security)|sandbox]] as regular JavaScript code.{{Refn|group=note|According to official documentation the Emscripten SDK may be used to create <code>.wasm</code> files which then may be executed in web browser.<ref>{{Cite web|url=https://webassembly.org/getting-started/developers-guide/|title=Developer's Guide - WebAssembly|website=webassembly.org|access-date=10 June 2019}}</ref><ref>{{Cite web|url=https://developer.mozilla.org/en-US/docs/WebAssembly/C_to_wasm|title=Compiling a New C/C++ Module to WebAssembly|website=MDN Web Docs|language=en|access-date=10 June 2019}}</ref><ref>{{Cite web|url=https://emscripten.org/docs/compiling/WebAssembly.html|title=Building to WebAssembly \u2014 Emscripten 1.38.33 documentation|website=emscripten.org|access-date=10 June 2019}}</ref> Even though Emscripten can consume various languages when using [[Clang]] some problems may arise.<ref>{{Cite web|url=https://developers.google.com/web/updates/2018/03/emscripting-a-c-library|title=Emscripting a C library to Wasm {{!}} Web|website=Google Developers|language=en|access-date=10 June 2019}}</ref>}} Emscripten provides bindings for several commonly used environment interfaces like [[WebGL]].  There is no direct [[Document Object Model]] (DOM) access; however, it is possible to create proxy functions for this, for example through stdweb,<ref>{{Cite web|url=https://docs.rs/stdweb/*/stdweb/|title=stdweb - Rust|website=docs.rs|access-date=5 June 2019|quote=The goal of this crate is to provide Rust bindings to the Web APIs and to allow a high degree of interoperability between Rust and JavaScript.}}</ref> web_sys,<ref>{{Cite web|url=https://docs.rs/web-sys/*/web_sys/|title=web_sys - Rust|website=docs.rs|access-date=5 June 2019|quote=Raw API bindings for Web APIs. This is a procedurally generated crate from browser WebIDL which provides a binding to all APIs that browser provide on the web.}}</ref> and js_sys<ref>{{Cite web|url=https://docs.rs/js-sys/*/js_sys/|title=js_sys - Rust|website=docs.rs|access-date=5 June 2019|quote=Bindings to JavaScript's standard, built-in objects, including their methods and properties.}}</ref> when using [[Rust (programming language)|Rust language]].\n\nThe [[World Wide Web Consortium]] (W3C) maintains the standard with contributions from [[Mozilla]], [[Microsoft]], [[Google]], and [[Apple Inc.|Apple]].<ref name=\"ars\"/>\n\n== History ==\nWebAssembly was first announced in 2015,<ref name=\"Launch bug\"/> and the first demonstration was executing [[Unity (game engine)|Unity]]'s ''Angry Bots'' in [[Firefox]],<ref name=\"Unity in Firefox\"/> [[Google Chrome]],<ref name=\"V8 blog\"/> and [[Microsoft Edge]].<ref name=\"Edge\"/> The precursor technologies were [[asm.js]] from [[Mozilla]] and [[Google Native Client]],<ref name=\"techcrunch2015\"/><ref name=\"PNaCl\"/> and the initial implementation was based on the feature set of asm.js.<ref name=\"initial implementation\"/> The asm.js technology already provides near-native code execution speeds<ref>{{Cite web|url=https://blog.mozilla.org/javascript/2013/08/01/staring-at-the-sun-dalvik-vs-spidermonkey/|title=Staring at the Sun: Dalvik vs. ASM.js vs. Native|website=blog.mozilla.org|access-date=7 December 2019|quote=Even discarding the one score where asm.js did better, it executes at around 70% of the speed of native C++ code.}}</ref> and can be considered a viable alternative for browsers that don't support WebAssembly or have it disabled for security reasons.\n\nIn March 2017, the design of the [[minimum viable product]] (MVP) was declared to be finished and the preview phase ended.<ref name=\"MVP\"/> {{As of|2017|September|alt=In late September 2017}}, [[Safari (web browser)|Safari 11]] was released with support. In February 2018, the WebAssembly Working Group published three public working drafts for the Core Specification, JavaScript Interface, and Web API.<ref name=\"W3C-WD2018\" /><ref name=\"W3C-CSWD2018\" /><ref name=\"W3C-JIWD2018\" /><ref name=\"W3C-WAWD2018\" />\n\n== Support ==\nIn November 2017, Mozilla declared support \"in all major browsers\"<ref name=\"in browsers\"/> (by now all major on mobile and desktop), after WebAssembly was enabled by default in Edge 16.<ref name=\"Edge16\"/> The support includes mobile web browsers for iOS and Android. <!--While outdated, no longer supported, Android 4.4.4 KitKat and older versions don't have WebViews that support.--> {{As of|2020|04}}, 90.93% of installed browsers (91.9% of desktop browsers<!--\"tracked desktop\"--> and 91.78% of mobile browsers<!--\"tracked mobile\"-->) support WebAssembly.<ref name=\"caniuse.com\"/>\nBut for older browsers, Wasm can be compiled into asm.js by a JavaScript [[polyfill (programming)|polyfill]].<ref name=\"ars2015\"/>\n\nBecause WebAssembly [[executable]]s are precompiled, it is possible to use a variety of programming languages to make them.<ref name=AcceleratingWeb/> This is achieved either through direct compilation to Wasm, or through implementation of the corresponding [[Virtual machine#Process virtual machines|virtual machines]] in Wasm. There have been around 40 programming languages reported to support Wasm as a compilation target.<ref name=Implementations/>\n\n[[Emscripten]] compiles [[C (programming language)|C]] and [[C++]] to Wasm<ref name=\"MVP\"/> using the [[LLVM]] backend.<ref>{{Cite tweet|user=kripken|number=1186407352880074752|title=Emscripten has switched to the upstream LLVM wasm backend by default! / Details:<nowiki>https://groups.google.com/forum/#!topic/emscripten-discuss/NpxVAOirSl4</nowiki>\u00a0\u2026|last=Zakai|first=Alon|date=21 October 2019|access-date=22 October 2019}}</ref>\n\nAs of version 8<ref>{{Cite web|url=https://releases.llvm.org/8.0.0/docs/ReleaseNotes.html#changes-to-the-webassembly-target|title=LLVM 8.0.0 Release Notes \u2014 LLVM 8 documentation|website=releases.llvm.org|access-date=22 October 2019}}</ref> a standalone Clang can compile C and C++ to Wasm.\n\nIts initial aim is to support [[compilation (computing)|compilation]] from [[C (programming language)|C]] and [[C++]],<ref name=\"github.com\"/> though support for other source [[programming language|languages]] such as [[Rust (programming language)|Rust]] and [[.NET languages]] is also emerging.<ref name=\"Rust\"/><ref>{{Cite web|url=https://blazor.net/docs/introduction/faq.html|title=Frequently asked questions (FAQ) about Blazor|website=blazor.net|access-date=18 June 2018}}</ref><ref name=Implementations/> After the MVP release, there are plans to support [[Thread (computing)#Multithreading|multithreading]] and [[garbage collection (computer science)|garbage collection]]<ref name=\"next\"/><ref>{{Cite web|url=https://github.com/WebAssembly/proposals/issues/16|title=\ud83d\udee4 Garbage collection \u00b7 Issue #16 \u00b7 WebAssembly/proposals|website=GitHub|language=en|access-date=25 July 2019}}</ref> which would make WebAssembly a compilation target for garbage-collected programming languages like [[C Sharp (programming language)|C#]] (supported via [[Blazor]]), [[F Sharp (programming language)|F#]] (supported via Bolero<ref>{{Cite web|url=https://fsbolero.io/|title=Bolero: F# in WebAssembly|website=fsbolero.io|access-date=25 July 2019}}</ref> with help of Blazor), [[Python (programming language)|Python]], and even [[JavaScript]] where the browser's [[Just-in-time compilation]] speed is considered too slow. A number of other languages have some support including [[Java (programming language)|Java]], [[Julia (programming language)|Julia]],<ref>{{Cite web|url=https://nextjournal.com/sdanisch/wasm-julia|title=Julia in the Browser |website=nextjournal.com|access-date=9 April 2019}}</ref><ref>{{Cite web|url=https://github.com/JuliaPackaging/Yggdrasil/pull/2|title=WebAssembly platform by tshort \u00b7 Pull Request #2 \u00b7 JuliaPackaging/Yggdrasil|website=GitHub|language=en|access-date=9 April 2019}}</ref><ref>{{Citation|last=Fischer|first=Keno|title=GitHub - Keno/julia-wasm: Running julia on wasm.|date=22 July 2019|url=https://github.com/Keno/julia-wasm|access-date=25 July 2019}}</ref> [[Ruby (programming language)|Ruby]],<ref>{{Cite web|url=https://ruby.dj/|title=MRuby in Your Browser|website=ruby.dj|access-date=25 July 2019}}</ref> as well as [[Go (programming language)|Go]].\n\n== Security considerations ==\nIn June 2018, a security researcher presented the possibility of using WebAssembly to circumvent browser mitigations for [[Spectre (security vulnerability)|Spectre]] and [[Meltdown (security vulnerability)|Meltdown]] security vulnerabilities once support for [[thread (computing)|thread]]s with shared memory is added. Due to this concern, WebAssembly developers put the feature on hold.<ref name=\"forcepoint\"/><ref name=\"bleeping computer\">{{cite web |last1=Cimpanu |first1=Catalin |title=Changes in WebAssembly Could Render Meltdown and Spectre Browser Patches Useless |url=https://www.bleepingcomputer.com/news/security/changes-in-webassembly-could-render-meltdown-and-spectre-browser-patches-useless/ |publisher=[[Bleeping Computer]] |accessdate=8 June 2019 |language=en-us |date=24 June 2018}}</ref><ref name=\"tech republic\">{{cite web |last1=Sanders |first1=James |title=How opaque WebAssembly code could increase the risk of Spectre attacks online |url=https://www.techrepublic.com/article/how-opaque-webassembly-code-could-increase-the-risk-of-spectre-attacks-online/ |website=[[Tech Republic]] |accessdate=9 June 2019 |language=en |date=25 June 2018}}</ref> However, in order to explore these future language extensions, Google Chrome added experimental support for the WebAssembly thread proposal in October 2018.<ref>{{cite web |last1=R |first1=Bhagyashree |title=Google Chrome 70 now supports WebAssembly threads to build multi-threaded web applications |url=https://hub.packtpub.com/google-chrome-70-now-supports-webassembly-threads-to-build-multi-threaded-web-applications/ |website=[[Packt|Packt Pub]] |accessdate=9 June 2019 |date=30 October 2018}}</ref>\n\nWebAssembly has been criticized for allowing greater ease of hiding the evidence for [[malware]] writers, scammers and [[phishing]] attackers; WebAssembly is only present on the user's machine in its compiled form, which \"[makes malware] detection difficult\".<ref name=\"virus bulletin\">{{cite web |last1=Lonkar |first1=Aishwarya |last2=Chandrayan |first2=Siddhesh |title=The dark side of WebAssembly |url=https://www.virusbulletin.com/virusbulletin/2018/10/dark-side-webassembly/ |website=[[Virus Bulletin]] |accessdate=8 June 2019 |date=October 2018}}</ref> The speed and concealability of WebAssembly have led to its use in hidden [[Cryptocurrency#Mining|crypto mining]] on the website visitor's device.<ref name=\"virus bulletin\"/><ref name=\"malwarebytes\">{{cite web |last1=Segura |first1=J\u00e9r\u00f4me |title=Persistent drive-by cryptomining coming to a browser near you |url=https://blog.malwarebytes.com/cybercrime/2017/11/persistent-drive-by-cryptomining-coming-to-a-browser-near-you/ |publisher=[[Malwarebytes]] |accessdate=8 June 2019 |date=29 November 2017}}</ref><ref name=\"forcepoint\">{{cite web |last1=Neumann |first1=Robert |last2=Toro |first2=Abel |title=In-browser mining: Coinhive and WebAssembly |url=https://www.forcepoint.com/blog/x-labs/browser-mining-coinhive-and-webassembly |publisher=Forcepoint |accessdate=8 June 2019 |language=en |date=19 April 2018}}</ref> [[Monero (cryptocurrency)#History|Coinhive]], a now defunct service facilitating cryptocurrency mining in website visitors' browsers, claims their \"miner uses WebAssembly and runs with about 65% of the performance of a native Miner.\"<ref name=\"forcepoint\" /> A June 2019 study from the [[Technische Universit\u00e4t Braunschweig]], analyzed the usage of WebAssembly in the Alexa top 1&nbsp;million websites and found the prevalent use was for malicious crypto mining, and that malware accounted for more than half of the WebAssembly-using websites studied.<ref>{{Cite web|url=https://www.infoq.com/news/2019/10/WebAssembly-wasm-malicious-usage/|title=Recent Study Estimates That 50% of Websites Using WebAssembly Apply It for Malicious Purposes|website=InfoQ|access-date=3 November 2019}}</ref><ref>{{cite book |last1=Musch |first1=Marius |title=Detection of Intrusions and Malware, and Vulnerability Assessment |volume=11543 |pages=23\u201342 |last2=Wressnegger |first2=Christian |last3=Johns |first3=Martin |last4=Rieck |first4=Konrad |chapter=New Kid on the Web: A Study on the Prevalence of WebAssembly in the Wild |chapter-url=https://www.tu-braunschweig.de/Medien-DB/ias/pubs/2019-dimva.pdf |publisher=[[Detection of Intrusions and Malware, and Vulnerability Assessment]] |accessdate=4 November 2019 |doi=10.1007/978-3-030-22038-9_2 |date=June 2019|series=Lecture Notes in Computer Science |isbn=978-3-030-22037-2 }} [https://www.dimva2019.org/wp-content/uploads/sites/31/2019/06/DIMVA19-slides-2-R.pdf Slides (PDF)]</ref>\n\nAs WebAssembly only supports structured [[control flow]], it is amenable toward security verification techniques including [[symbolic execution]]. Current efforts in this direction include the Manticore symbolic execution engine.<ref name=\"manticore\" />\n\n{{Anchor|Beyond the Browser}}\n\n== Embedding ==\nThe general standards provide core specifications for JavaScript and Web embedding.<ref name=\":0\" />\n\nWhile WebAssembly was initially designed to enable near-native code execution speed in the web browser, it has been considered valuable outside of such, in more generalized contexts.<ref name=\"nonweb\">{{cite web |url=https://webassembly.org/docs/non-web/ |title=Non-Web Embeddings |work=WebAssembly |accessdate=15 May 2019}}</ref><ref name=\"nonwebsrc\">{{cite web |url=https://github.com/WebAssembly/design/blob/master/NonWeb.md |title=Non-Web Embeddings |work=[[GitHub]] / WebAssembly |accessdate=15 May 2019}}</ref>\n\n== WASI ==\n{{anchor|WASI}}WebAssembly System Interface (WASI) is a simple interface ([[application binary interface|ABI]] and [[application programming interface|API]]) designed by [[Mozilla]] intended to be portable to any platform.<ref name=\"WASI\">{{cite web |url=https://github.com/WebAssembly/WASI |title=WebAssembly System Interface Repo |work=[[GitHub]] / WebAssembly|date=10 February 2020 }}</ref> It provides [[POSIX]] features like file I/O constrained by [[capability-based security]].<ref>{{cite web |title=Additional background on Capabilities |url=https://github.com/bytecodealliance/wasmtime/blob/master/docs/WASI-capabilities.md |website=GitHub |publisher=bytecodealliance |language=en}}</ref><ref>{{cite web |title=Standardizing WASI: A system interface to run WebAssembly outside the web \u2013 Mozilla Hacks - the Web developer blog |url=https://hacks.mozilla.org/2019/03/standardizing-wasi-a-webassembly-system-interface/ |website=Mozilla Hacks \u2013 the Web developer blog}}</ref> There are also a few other proposed ABI/APIs.<ref name=\"reference-sysroot\">{{cite web |url=https://github.com/WebAssembly/reference-sysroot |title=reference-sysroot Repo |work=[[GitHub]] / WebAssembly|date=12 January 2020 }}</ref><ref name=\"wasm-c-api\">{{cite web |url=https://github.com/WebAssembly/wasm-c-api |title=wasm-c-api Repo |work=[[GitHub]] / WebAssembly|date=3 February 2020 }}</ref>\n\nWASI was influenced by [[Capsicum (Unix)#CloudABI|CloudABI]] and [[Capsicum (Unix)|Capsicum]].\n\n== Specification{{Anchor|Features}}==\n\n=== Virtual machine ===\nWasm code (binary or bytecode) is intended to be run on a [[Software portability|portable]] virtual [[stack machine]] (VM).<ref name=\"stack machine\" /> The VM is designed to be faster to parse and execute than JavaScript and to have a compact code representation.<ref name=\"github.com\" />\n\n=== Wasm program ===\nA Wasm program is designed to be a separate module containing collection of various wasm-defined value and program types definitions expressed either in binary or textual format (see below) that both have a common structure.<ref>{{Cite web|url=https://webassembly.github.io/spec/core/syntax/conventions.html|title=Conventions \u2014 WebAssembly 1.0|website=webassembly.github.io|access-date=12 November 2019}}</ref>\n\n==== Instruction set ====\nThe core standard for binary format of wasm program defines [[Instruction set architecture|Instruction Set Architecture]] consisting of specific [[Opcode|binary encoding]] of types of operations which are executed by the VM. It doesn't specify how exactly they must be executed by the VM however.<ref>{{Cite web|url=https://webassembly.github.io/spec/core/intro/introduction.html?highlight=isa#scope|title=Introduction \u2014 WebAssembly 1.0|website=webassembly.github.io|access-date=17 May 2019}}</ref> The list of instructions includes standard memory load/store instructions, numeric, parametric, [[Control flow|control of flow]] [[Instruction set architecture|instruction types]] and wasm-specific variable instructions.<ref>{{Cite web|url=https://webassembly.github.io/spec/core/syntax/instructions.html|title=Instructions \u2014 WebAssembly 1.0|website=webassembly.github.io|access-date=12 November 2019}}</ref>\n\n==== Code representation ====\nIn March 2017, the WebAssembly Community Group reached consensus on the initial (MVP) binary format, JavaScript API, and reference interpreter.<ref name=\"Roadmap\" /> It defines a WebAssembly binary format ({{code|.wasm}}), which is not designed to be used by humans, as well as a human-readable WebAssembly text format ({{code|.wat}}) that resembles a cross between S-expressions and traditional assembly languages.\n\nThe table below represents three different views of the same source code input from the left, as it is converted to a Wasm [[intermediate representation]], then to Wasm binary instructions:<ref name=\"Text Format\" />\n\n{| class=\"wikitable\"\n|-\n! [[C (programming language)|C]] input source !! Linear assembly bytecode<br/> ([[intermediate representation]]) !! Wasm binary encoding<br/> (hexadecimal bytes)\n|- style=\"vertical-align:top\"\n|\n<syntaxhighlight lang=\"c\">\nint factorial(int n) {\n  if (n == 0)\n    return 1;\n  else\n    return n * factorial(n-1);\n}\n</syntaxhighlight>\n||\n<syntaxhighlight lang=\"lisp\">\n; magic number\n; type for (func (param i64) (result i64))\n; function section\n; code section start\n(func (param i64) (result i64)\n  local.get 0\n  i64.eqz\n  if (result i64)\n      i64.const 1\n  else\n      local.get 0\n      local.get 0\n      i64.const 1\n      i64.sub\n      call 0\n      i64.mul\n  end)\n; module end, size fixups\n</syntaxhighlight>\n||\n<syntaxhighlight lang=\"text\">\n00 61 73 6D 01 00 00 00\n01 00 01 60 01 73 01 73 06\n03 00 01 00 02\n0A 00 01\n00 00\n20 00\n50\n04 7E\n42 01\n05\n20 00\n20 00\n42 01\n7D\n10 00\n7E\n0B\n0B 15 17\n</syntaxhighlight>\n|}\n\nAll integer constants are encoded using a space-efficient, variable-length [[LEB128]] encoding.<ref name=wasmint>{{cite web\n |        url = https://webassembly.github.io/spec/core/binary/values.html#integers\n |      title = WebAssembly Specification Release 1.0\n | accessdate = 13 January 2020\n |     author = WebAssembly Community Group\n |date=January 2020\n}}</ref>\n\nThe WebAssembly text format is more canonically written in a folded format using [[s-expression]]s. For instructions and expressions, this format is purely [[syntactic sugar]] and has no behavioral differences with the linear format.<ref name=\"Folded Instructions\"/> Through {{code|wasm2wat}}, the code above decompiles to:\n\n<syntaxhighlight lang=\"lisp\">\n(module\n  (type $t0 (func (param i64) (result i64)))\n  (func $f0 (type $t0) (param $p0 i64) (result i64)\n    (if $I0 (result i64) ; $I0 is an unused label name\n      (i64.eqz\n        (local.get $p0)) ; the name $p0 is the same as 0 here\n      (then\n        (i64.const 1))\n      (else\n        (i64.mul\n          (local.get $p0)\n          (call $f0      ; the name $f0 is the same as 0 here\n            (i64.sub\n              (local.get $p0)\n              (i64.const 1))))))))\n</syntaxhighlight>\n\nNote that a module is implicitly generated by the compiler. The function is actually referenced by an entry of the type table in the binary, hence a type section and the {{code|type}} emitted by the decompiler.<ref>{{cite web |title=Modules (Binary) |url=https://webassembly.github.io/spec/core/syntax/modules.html |website=WebAssembly 1.0}}</ref> The compiler and decompiler can be accessed online.<ref>{{cite web |title=WebAssembly Binary Toolkit (wabt) demos |url=https://webassembly.github.io/wabt/demo/ |website=webassembly.github.io}}</ref>\n\n== Literature ==\n* {{Cite journal|first1=Andreas|last1=Haas|first2=Andreas|last2=Rossberg|first3=Derek L.|last3=Schuff|first4=Ben L.|last4=Titzer|first5=Dan|last5=Gohman|first6=Luke|last6=Wagner|first7=Alon|last7=Zakai|first8=JF|last8=Bastien|first9=Michael|last9=Holman|date=June 2017|title=Bringing the web up to speed with WebAssembly|url=https://dl.acm.org/ft_gateway.cfm?id=3062363&type=pdf|journal=Proceedings of the 38th ACM SIGPLAN Conference on Programming Language Design and Implementation|publisher=Association for Computing Machinery|volume=|pages=185\u2013200|doi=10.1145/3062341.3062363|via=|isbn=9781450349888|doi-access=free}}\n* {{Cite journal|last=Watt|first=Conrad|date=2018|title=Mechanising and Verifying the WebAssembly Specification|url=https://www.cl.cam.ac.uk/~caw77/papers/mechanising-and-verifying-the-webassembly-specification.pdf|journal=ACM SIGPLAN International Conference on Certified Programs and Proofs|publisher=ACM|volume=7|pages=53\u201365|doi=10.1145/3167082|via=|isbn=9781450355865}}\n\n== Notes ==\n{{reflist|group=note}}\n\n== References ==\n{{reflist|30em|refs=\n<ref name=\"techcrunch2015\">{{Cite news|url=https://techcrunch.com/2015/06/17/google-microsoft-mozilla-and-others-team-up-to-launch-webassembly-a-new-binary-format-for-the-web/|title=Google, Microsoft, Mozilla And Others Team Up To Launch WebAssembly, A New Binary Format For The Web|last=Lardinois|first=Frederic|date=17 June 2015|work=TechCrunch|access-date=24 December 2017|language=en}}</ref>\n\n<ref name=\"ars\">{{cite web |first=Peter |last=Bright |url=https://arstechnica.com/information-technology/2015/06/the-web-is-getting-its-bytecode-webassembly/|title=The Web is getting its bytecode: WebAssembly|work=[[Ars Technica]] |publisher=[[Cond\u00e9 Nast]] |date=18 June 2015}}</ref>\n\n<ref name=AcceleratingWeb>{{cite web|url=https://zendev.com/2018/06/26/webassembly-accelerating-future-web-development.html |title=How WebAssembly is Accelerating the Future of Web Development |last=Ball | first=Kevin |date=26 June 2018 |accessdate=22 October 2018 |archive-url=https://web.archive.org/web/20190212141715/https://zendev.com/2018/06/26/webassembly-accelerating-future-web-development.html |archive-date=12 February 2019}}</ref>\n\n<ref name=Implementations>{{cite web |url=https://github.com/appcypher/awesome-wasm-langs |title=Awesome WebAssembly Languages |last= | first= |date=26 June 2018 |accessdate=12 February 2019 |archive-url=https://web.archive.org/web/20190212133939/https://github.com/appcypher/awesome-wasm-langs |archive-date=12 February 2019}}</ref>\n\n<ref name=\"stack machine\">{{cite web|url=https://github.com/WebAssembly/design/blob/master/Rationale.md#why-a-stack-machine|title=Design Rationale|date=1 October 2016|work=[[GitHub]] / WebAssembly / design}}</ref>\n\n<ref name=\"github.com\">{{cite web|url=https://github.com/WebAssembly/design/blob/master/HighLevelGoals.md|title=WebAssembly High-Level Goals|date=11 December 2015|work=[[GitHub]] / WebAssembly / design}}</ref>\n\n<ref name=\"PNaCl\">{{Cite web|url=https://www.infoq.com/news/2017/05/pnacl-webassembly-google|title=Google Is to Remove Support for PNaCl|last=Avram|first=Abel|date=31 May 2017|website=InfoQ|access-date=22 December 2017}}</ref>\n\n<ref name=\"initial implementation\">{{cite web|url=https://www.2ality.com/2015/06/web-assembly.html|title=WebAssembly: a binary format for the web|work=\u2461ality&nbsp;\u2013 JavaScript and more|date=18 June 2015}}</ref>\n\n<ref name=\"Launch bug\">{{Cite web|url=https://github.com/WebAssembly/design/issues/150|title=Launch bug|date=11 June 2015|website=[[GitHub]] / WebAssembly / design}}</ref>\n\n<ref name=\"Unity in Firefox\">{{Cite web|url=https://hacks.mozilla.org/2016/03/a-webassembly-milestone/|title=A WebAssembly Milestone: Experimental Support in Multiple Browsers|last=Wagner|first=Luke|date=14 March 2016|website=Mozilla Hacks}}</ref>\n\n<ref name=\"V8 blog\">{{Cite web|url=https://v8project.blogspot.com/2016/03/experimental-support-for-webassembly.html|title=Experimental support for WebAssembly in V8|last=Thompson|first=Seth|date=15 March 2016|website=V8 Blog}}</ref>\n\n<ref name=\"Edge\">{{Cite web|url=https://blogs.windows.com/msedgedev/2016/03/15/previewing-webassembly-experiments/|title=Previewing WebAssembly experiments in Microsoft Edge|last=Zhu|first=Limin|date=15 March 2016|website=Microsoft Edge dev blog}}</ref>\n\n<ref name=\"MVP\">{{Cite news|url=https://www.infoworld.com/article/3176681/|title=WebAssembly is now ready for browsers to use|last=Krill|first=Paul|date=6 March 2017|work=InfoWorld|access-date=23 December 2017|language=en}}</ref>\n\n<ref name=\"caniuse.com\">{{cite web |title=WebAssembly |url=https://caniuse.com/wasm |work=Can I use |accessdate=1 April 2020}}</ref>\n\n<ref name=\"in browsers\">{{Cite web|url=https://blog.mozilla.org/blog/2017/11/13/webassembly-in-browsers/|title=WebAssembly support now shipping in all major browsers|website=The Mozilla Blog|language=en-US|access-date=21 November 2017}}</ref>\n\n<ref name=\"Edge16\">{{Cite web|url=https://blogs.windows.com/msedgedev/2017/10/31/optimizations-webassembly-sharedarraybuffer-atomics-edgehtml-16/|title=Introducing new JavaScript optimizations, WebAssembly, SharedArrayBuffer, and Atomics in EdgeHTML 16|website=Microsoft Edge Dev Blog|language=en-US|access-date=21 November 2017|date=31 October 2017}}</ref>\n\n<ref name=\"ars2015\">{{Cite news|url=https://arstechnica.com/information-technology/2015/06/the-web-is-getting-its-bytecode-webassembly/|title=The Web is getting its bytecode: WebAssembly|last=Bright|first=Peter|date=18 June 2015|work=Ars Technica|access-date=23 December 2017|language=en-us}}</ref>\n\n<ref name=\"Rust\">{{Cite news|url=https://www.infoworld.com/article/3239129/|title=Direct WebAssembly compilation comes to Rust language|last=Krill|first=Paul|date=29 November 2017|work=InfoWorld|access-date=24 December 2017|language=en}}</ref>\n\n<ref name=\"next\">{{Cite news|url=https://www.techworld.com.au/article/629123/|title=What's next for WebAssembly: GC, threads, debugging|last=Krill|first=Paul|date=26 October 2017|work=TechWorld|access-date=24 December 2017}}</ref>\n\n<ref name=\"Roadmap\">{{Cite web|url=https://webassembly.org/roadmap/|title=Roadmap |website=WebAssembly |date=March 2017}}</ref>\n\n<ref name=\"Text Format\">{{cite web|author1=jfbastien |author2=rossberg-chromium |author3=kripken |author4=titzer |author5=s3ththompson |author6=sunfishcode |author7=lukewagner |author8=flagxor |author9=enricobacis |author10=c3d |author11=binji |author12=andrewosh |date=9 March 2017 |title=Text Format |website=WebAssembly/design |publisher=GitHub |url=https://github.com/WebAssembly/design/blob/master/TextFormat.md }}</ref>\n\n<ref name=\"W3C-WD2018\">{{cite web |url=https://www.w3.org/blog/news/archives/6838|title=WebAssembly First Public Working Drafts|publisher=W3C|date= 15 February 2018|access-date=20 April 2018}}</ref>\n<ref name=\"W3C-CSWD2018\">{{cite web |url=https://www.w3.org/TR/2018/WD-wasm-core-1-20180215/|title=WebAssembly Core Specification|publisher=W3C|date= 15 February 2018|access-date=20 April 2018}}</ref>\n<ref name=\"W3C-JIWD2018\">{{cite web |url=https://www.w3.org/TR/2018/WD-wasm-js-api-1-20180215/|title=WebAssembly JavaScript Interface|publisher=W3C|date= 15 February 2018|access-date=20 April 2018}}</ref>\n<ref name=\"W3C-WAWD2018\">{{cite web |url=https://www.w3.org/TR/2018/WD-wasm-web-api-1-20180215/|title=WebAssembly Web API|publisher=W3C|date= 15 February 2018|access-date=20 April 2018}}</ref>\n\n<ref name=\"Folded Instructions\">{{cite web|url=https://webassembly.github.io/spec/core/text/instructions.html#folded-instructions|title=Folded instructions|work=[[GitHub]]}} / WebAssembly / spec</ref>\n<ref name=\"manticore\">{{cite web|url=https://blog.trailofbits.com/2020/01/31/symbolically-executing-webassembly-in-manticore/|title=Symbolically Executing WebAssembly in Manticore|date=31 January 2020|access-date=10 February 2020}}</ref>\n}}\n\n{{Free-content attribution|\n|title= Text Format\n|author = jfbastien; rossberg-chromium; kripken; titzer; s3ththompson; sunfishcode; lukewagner; flagxor; enricobacis; c3d; binji; andrewosh\n|publisher = GitHub\n|source= WebAssembly/design\n|documentURL= https://github.com/WebAssembly/design/blob/master/TextFormat.md\n|license statement URL= https://github.com/WebAssembly/design/blob/master/LICENSE\n|license= Apache License 2.0\n}}\n\n== Demo ==\n* Widgets demo: [https://yutakaaoki.github.io/demo1/index.html] with NWSTK\n* 3D mountain geometry synthesis demo: [https://yutakaaoki.github.io/demo_Mountain/index.html] with NWSTK\n* Demo for loading and drawing a [[JPEG|jpg]] file: [https://yutakaaoki.github.io/demo2/index.html] with NWSTK\n\n== External links ==\n{{sisterlinks|d=Q20155677|c=Category:WebAssembly|n=no|b=no|s=no|wikt=no|species=no|q=no|v=no|voy=no|m=no|mw=no}}\n* {{Official website}}\n* [https://www.w3.org/community/webassembly/ W3C Community Group]\n* [https://github.com/WebAssembly/design WebAssembly Design]\n* {{Citation|url=https://developer.mozilla.org/en-US/docs/WebAssembly|title=WebAssembly|website=MDN Web Docs|language=en-US}}{{snd}} with info on browser compatibility and specifications (WebAssembly JavaScript API)\n\n{{W3C Standards}}\n{{Web browsers|fsp}}\n{{Web interfaces}}\n{{JavaScript}}\n\n[[Category:Assembly languages]]\n[[Category:Computer-related introductions in 2015]]\n[[Category:World Wide Web Consortium standards]]\n[[Category:Web programming]]\n", "name_user": "Trappist the monk", "label": "safe", "comment": "\u2192\u200eSupport:remove 'invisible' characters from cs1|2 template parameters; (1\u00d7 NBSP)", "url_page": "//en.wikipedia.org/wiki/WebAssembly"}
