{"title_page": "Comparison of multi-paradigm programming languages", "text_new": "{{short description|Wikimedia list article}}\n{{Original research|date=August 2009}}\n{{Programming paradigms|state=collapsed}}\n[[Programming language]]s can be grouped by the number and types of [[Programming paradigm|paradigms]] supported.\n\n==Paradigm summaries==\nA concise reference for the programming paradigms listed in this article.\n\n* [[Concurrent programming language|Concurrent programming]] \u2013 have language constructs for concurrency, these may involve multi-threading, support for distributed computing, message passing, shared resources (including shared memory), or futures\n** [[Actor model|Actor programming]] \u2013 concurrent computation with ''actors'' that make local decisions in response to the environment (capable of selfish or competitive behavior)\n* [[Constraint programming]] \u2013 relations between variables are expressed as constraints (or constraint networks), directing allowable solutions (uses constraint satisfaction or [[simplex algorithm]])\n* [[Dataflow|Dataflow programming]] \u2013 forced recalculation of formulas when data values change (e.g. [[spreadsheet]]s)\n* [[Declarative programming]] \u2013 describes what a computation should perform, without specifying detailed state changes c.f. imperative programming (functional and logic programming are major subgroups of declarative programing)\n* [[Distributed computing|Distributed programming]] \u2013 have support for multiple autonomous computers that communicate via computer networks\n* [[Functional programming]] \u2013 uses evaluation of mathematical functions and avoids state and mutable data\n* [[Generic programming]] \u2013 uses algorithms written in terms of to-be-specified-later types that are then instantiated as needed for specific types provided as parameters\n* [[Imperative programming]] \u2013 explicit statements that change a program state\n* [[Logic programming]] \u2013 uses explicit mathematical logic for programming\n* [[Metaprogramming]] \u2013 writing programs that write or manipulate other programs (or themselves) as their data, or that do part of the work at compile time that would otherwise be done at runtime\n** [[Template metaprogramming]] \u2013 metaprogramming methods in which templates are used by a compiler to generate temporary source code, which is merged by the compiler with the rest of the source code and then compiled\n** [[reflection (computer programming)|Reflective programming]] \u2013 metaprogramming methods in which a program modifies or extends itself\n* [[Object-oriented programming]] \u2013 uses data structures consisting of data fields and methods together with their interactions (objects) to design programs\n** [[class (computer science)|Class-based]] \u2013 object-oriented programming in which inheritance is achieved by defining classes of objects, versus the objects themselves\n** [[prototype-based programming|Prototype-based]] \u2013 object-oriented programming that avoids classes and implements inheritance via cloning of instances\n* [[Pipeline programming]] \u2013 a simple syntax change to add syntax to nest function calls to language originally designed with none\n* [[Rule-based programming]] \u2013 a network of rules of thumb that comprise a knowledge base and can be used for expert systems and problem deduction & resolution\n* [[Visual programming language|Visual programming]] \u2013 manipulating program elements graphically rather than by specifying them textually (e.g. [[Simulink]]); also termed ''diagrammatic programming''<ref>{{cite book |chapter=Diagrammatic-graphical programming languages and DoD-STD-2167A |last=Bragg |first=S.D. |last2=Driskill |first2=C.G. |date=20\u201322 September 1994 |work=IEEEXplore |publisher=IEEE|doi=10.1109/AUTEST.1994.381508 |title=Proceedings of AUTOTESTCON '94 |pages=211\u2013220 |isbn=978-0-7803-1910-3 }}</ref>\n\n==Language overview==\n{|class=\"wikitable sortable\" style=\"font-size:85%;\"\n|+ List of multi-paradigm programming languages \n! Language \n! Num&shy;ber of Para&shy;digms \n! Con&shy;cur&shy;rent\n! Con&shy;straints\n! Data&shy;flow \n! De&shy;clar&shy;at&shy;ive \n! Dis&shy;trib&shy;uted \n! Func&shy;tion&shy;al \n! Meta&shy;pro&shy;gram&shy;ming \n! Gen&shy;er&shy;ic \n! Im&shy;per&shy;at&shy;ive \n! Lo&shy;gic \n! Re&shy;flec&shy;tion \n! Ob&shy;ject-ori&shy;ented \n! Pipe&shy;lines \n! Visu&shy;al \n! Rule-based\n! Oth&shy;er para&shy;digms\n|-\n| [[Ada (programming language)|Ada]]<ref>[http://www.adaic.org/standards/05rm/html/RM-TTL.html Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3], [http://www.adaic.org/standards/05rm/html/RM-9.html Section 9: Tasks and Synchronization]</ref><ref>[http://www.adaic.org/standards/05rm/html/RM-TTL.html Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3] [http://www.adaic.org/standards/05rm/html/RM-E.html Annex E: Distributed Systems]</ref><ref>[http://www.adaic.org/standards/05rm/html/RM-TTL.html Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3], [http://www.adaic.org/standards/05rm/html/RM-12.html Section 12: Generic Units]</ref><ref>[http://www.adaic.org/standards/05rm/html/RM-TTL.html Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3], [http://www.adaic.org/standards/05rm/html/RM-6.html Section 6: Subprograms]</ref><ref>[http://www.adaic.org/standards/05rm/html/RM-TTL.html Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3], [http://www.adaic.org/standards/05rm/html/RM-3-9.html 3.9 Tagged Types and Type Extensions]</ref> || 5 \n| {{yes}}<ref group=\"a\" name=\"rend-mon\">rendezvous and monitor-like based</ref> || {{no}}|| {{no}}|| {{no}}|| {{yes}} || {{no}}|| {{no}}|| {{yes}} || {{yes}} || {{no}}|| {{no}}|| {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}}|| {{no}}|| {{no}}|| {{no}}\n|- \n| [[Algebraic Logic Functional programming language|ALF]] || 2 \n| {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}} || {{no}} || {{no}} || {{no}} || {{yes}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}}\n|- \n| [[AmigaE]]{{Citation needed|date=March 2007}} || 2 \n| {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}} || {{no}} || {{no}} || {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}} || {{no}} || {{no}} || {{no}}\n|- \n| [[APL (programming language)|APL]] || 3\n| {{no}} || {{no}} || {{no}} || {{no}}  || {{no}} || {{yes}} || {{no}} || {{no}} || {{yes}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || Array (multi-dimensional)\n|- \n| [[BETA (programming language)|BETA]] {{Citation needed|date=March 2007}} || 3 \n| {{no}} || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}} || {{no}}|| {{no}}|| {{yes}} || {{no}}|| {{no}}|| {{yes}}<ref group=\"a\" name=\"class\" />  || {{no}}|| {{no}}|| {{no}}|| {{no}}\n|- \n| [[C++]] || 7 (15)\n| {{yes}}<ref>[http://en.cppreference.com/w/cpp/thread Thread support]</ref><ref>[http://en.cppreference.com/w/cpp/atomic Atomics support]</ref><ref>[https://cppandbeyond.wordpress.com/2011/04/11/session-announcement-the-c0x-memory-model-and-why-you-care Memory model]</ref> || {{partial|Library}}<ref>[http://www.gecode.org/ Gecode]</ref> || {{partial|Library}}<ref>[http://www.accellera.org/downloads/standards/systemc/about_systemc/ SystemC]</ref><ref>[http://www.boost.org/libs/iostreams/ Boost.Iostreams]</ref> || {{partial|Library}}<ref>[http://code.google.com/p/boolinq/ Boolinq]</ref><ref>[https://www.cs.technion.ac.il/~lkeren/scp.pdf AraRat]</ref> || {{partial|Library}}<ref>[http://www.open-mpi.org/ OpenMPI]</ref><ref>[http://www.boost.org/libs/mpi/ Boost.MPI]</ref> || {{yes}} || {{yes}}<ref>[http://www.boost.org/libs/mpl/ Boost.MPL]</ref> || {{yes}}<ref group=\"a\" name=\"temp-meta\">Template metaprogramming</ref> || {{yes}} || {{partial|Library}}<ref>[http://cgi.di.uoa.gr/~smaragd/lc++/ LC++]</ref><ref>[http://www.mpprogramming.com/Cpp/Default.aspx Castor] {{webarchive|url=https://web.archive.org/web/20130125024854/http://www.mpprogramming.com/Cpp/Default.aspx |date=2013-01-25 }}</ref> || {{partial|Library}}<ref>[https://bytemaster.github.com/boost_reflect/index.html Reflect Library]</ref> || {{yes}}<ref group=\"a\" name=\"class\" /> || {{yes}}<ref>[http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2013/n3534.html N3534]</ref> || {{no}} || {{partial|Library}}<ref>[http://www.boost.org/libs/spirit/ Boost.Spirit]</ref> || Array (multi-dimensional; using [[Standard Template Library|STL]])\n|-\n| [[C Sharp (programming language)|C#]] || 6 (7) \n| {{yes}}|| {{no}} || {{partial|Library}}<ref group=\"a\" name=\"tpldf\">using [http://msdn.microsoft.com/en-us/devlabs/gg585582.aspx TPL Dataflow]</ref> || {{no}} || {{no}} || {{yes}}<ref group=\"a\" name=\"lambda\">only [[Lambda calculus|lambda]] support (lazy functional programming)</ref>|| {{no}} || {{yes}}|| {{yes}} || {{no}} || {{yes}}|| {{yes}}<ref group=\"a\" name=\"class\" />|| {{no}} || {{no}} || {{no}} || reactive<ref group=\"a\" name=\"rx\">using [http://msdn.microsoft.com/en-us/data/gg577609.aspx Reactive Extensions (Rx)]</ref> \n|- \n| [[ChucK]] {{Citation needed|date=March 2007}} || 3 \n| {{yes}} || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}} || {{no}}|| {{no}}|| {{yes}}<ref group=\"a\" name=\"class\"/> || {{no}} || {{no}}|| {{no}}|| {{no}}\n|- \n| [[Claire (programming language)|Claire]] || 2 \n| {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}} || {{no}} || {{no}} || {{no}}\n|- \n| [[Clojure]] || 5 \n| {{yes}}<ref>[https://clojure.org/about/concurrent_programming Clojure - Concurrent Programming]</ref><ref>[https://github.com/clojure/core.async Clojure - core.async]</ref> || {{no}} || {{no}} || {{yes}} || {{no}} || {{yes}}<ref>[https://clojure.org/about/functional_programming Clojure - Functional Programming]</ref> || {{yes}}<ref>[https://clojure.org/reference/macros Clojure - Macros]</ref> || {{no}} || {{no}} || {{partial|Library}}<ref>[https://github.com/clojure/core.logic/ Clojure - core.logic]</ref> || {{no}} || {{no}} || {{yes}}<ref>[https://clojure.org/guides/threading_macros Clojure - Threading Macros Guide]</ref> || {{partial|Editor}}<ref>{{Cite web | url=http://lighttable.com/ | title=Light Table| date=2019-04-08}}</ref> || {{no}} || [[Multiple dispatch]]<ref>[https://clojure.org/reference/multimethods Multimethods and Hierarchies]</ref>, Agents<ref>[https://clojure.org/reference/agents Agents and Asynchronous Actions]</ref>\n|-\n| [[Common Lisp]] || 5 \n| {{partial|Library}}<ref>[https://www.cliki.net/Concurrency] many concurrency paradigms implemented as language extensions</ref> || {{partial|Library}}<ref>[https://www.cliki.net/screamer] constraint programming inside CL through extensions</ref> || {{partial|Library}}<ref>[https://www.cliki.net/Cells] dataflow extension</ref>|| {{yes}}<ref>[http://www.gigamonkeys.com/book/practical-an-html-generation-library-the-interpreter.html] by creating DSLs using the built-in metaprogramming; also see note on functional, constraint and logic paradigms, which are part of declarative</ref>|| {{partial|Library}}<ref>[https://www.cliki.net/Distributed] MPI, etc via language extensions</ref> || {{yes}} || {{yes}} || {{yes}}<ref>template metaprogramming using macros (see C++)</ref>|| {{yes}} || {{partial|Library}}<ref>[https://www.cliki.net/Prolog] [https://franz.com/products/prolog/] [http://www.lispworks.com/products/knowledgeworks.html] Prolog implemented as a language extension</ref> || {{yes}} || {{yes}} (multiple dispatch, method combinations)<ref>[[Common Lisp Object System]] see Wikipedia article on CLOS, the Common Lisp Object System.</ref><ref group=\"a\" name=\"class\" /> || {{partial|Library}}<ref>implemented by the user via a short macro, example of implementation: [http://blog.vjeux.com/2011/lisp/lisp-chaining-operator.html]</ref> || {{no}}|| {{partial|Library}}<ref>[http://lisa.sourceforge.net/] rule-based programming extension</ref> || Multiple dispatch, meta-OOP system<ref>[https://common-lisp.net/project/ecl/static/manual/ch31.html] through the Meta Object Protocol</ref>, Language is extensible via metaprogramming.\n|-\n| [[Curl (programming language)|Curl]] || 5 \n| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}} || {{no}}|| {{yes}}<ref group=\"a\" name=\"temp-meta\" /> || {{yes}} || {{no}}|| {{yes}} || {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}}|| {{no}}|| {{no}}|| {{no}}\n|- \n| [[Curry (programming language)|Curry]] || 4 \n| {{yes}} || {{yes}} || {{no}}|| {{no}}|| {{no}}|| {{yes}} || {{no}}|| {{no}} || {{no}}|| {{yes}} || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}\n|-\n| [[D (programming language)|D]] (version 2.0)<ref>[http://www.digitalmars.com/d/2.0/comparison.html D Language Feature Table]</ref><ref>[http://www.digitalmars.com/d/2.0/phobos/std_algorithm.html Phobos std.algorithm]</ref> || 6 \n| {{yes}}<ref group=\"a\" name=\"actor\" /> || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}} || {{yes}}<ref>[http://dlang.org/mixin.html D language String Mixins]</ref><ref group=\"a\" name=\"temp-meta\" /> || {{yes}}<ref group=\"a\" name=\"temp-meta\" /> || {{yes}} || {{no}}|| {{no}}|| {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}}|| {{no}}|| {{no}}|| {{no}}\n|- \n| [[Dylan (programming language)|Dylan]]{{Citation needed|date=March 2007}} || 3 \n| {{no}} || {{no}} || {{no}} || {{no}}  || {{no}} || {{yes}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}} || {{yes}}<ref group=\"a\" name=\"class\">Class-based</ref>|| {{no}} || {{no}} || {{no}} || {{no}}\n|- \n| [[E (programming language)|E]] || 3 \n| {{yes}} || {{no}} || {{no}} || {{no}} || {{yes}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}} || {{no}} || {{no}} || {{no}}\n|- \n| [[ECMAScript]]<ref>[http://www.crockford.com/javascript/little.html The Little JavaScripter] demonstrates fundamental commonality with Scheme, a functional language.</ref><ref>[http://mckoss.com/jscript/object.htm Object Oriented Programming in JavaScript] {{Webarchive|url=https://web.archive.org/web/20190210070220/http://mckoss.com/jscript/object.htm |date=2019-02-10 }} gives an overview of object-oriented programming techniques in JavaScript.</ref> ([[ActionScript]], [[E4X]], [[JavaScript]], [[JScript]]) || 4 (5)\n| {{partial|partial (promises, native extensions)}}<ref group=\"a\" name=\"nodejs-cluster\">using [[Node.js]]' [https://nodejs.org/api/cluster.html cluster] module or [https://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options child_process.fork] method, [https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers web workers] in the browser, etc.</ref> || {{no}} || {{no}} || {{partial|Library}}<ref>{{Cite web | url=https://reactjs.org/ | title=React \u2013 A JavaScript library for building user interfaces| date=2019-04-08}}</ref><ref>{{Cite web | url=https://reactjs.org/ | title=React \u2013 A JavaScript library for building user interfaces| date=2019-04-08}}</ref><ref>{{Cite web | url=https://github.com/getify/tng-hooks | title=TNG-Hooks| date=2019-04-08}}</ref> || {{no}} || {{yes}} || {{no}} || {{no}} || {{yes}} || {{no}} || {{yes}} || {{yes}}<ref group=\"a\" name=\"prototype\">Prototype-based</ref> || {{partial|Library}}<ref>{{Cite web | url=https://lodash.com/docs/4.17.11#flow | title=Lodash documentation| date=2019-04-08}}</ref><ref>{{Cite web | url=https://swannodette.github.io/mori/#pipeline | title=mori| date=2019-04-08}}</ref> || {{partial|Editor}}<ref>{{Cite web | url=http://lighttable.com/ | title=Light Table| date=2019-04-08}}</ref> || {{no}} || reactive<ref group=\"a\" name=\"rxjs\">using [http://reactivex.io/rxjs/ Reactive Extensions (RxJS)]</ref><ref>{{Cite web | url=https://github.com/getify/tng-hooks | title=TNG-Hooks| date=2019-04-08}}</ref>, event driven<ref group=\"a\" name=\"node-events\">in Node.js via their [https://nodejs.org/api/events.html events] module</ref><ref group=\"a\" name=\"dom-events\">in browsers via their native [https://developer.mozilla.org/en-US/docs/Web/API/EventTarget EventTarget] API</ref>\n\n|- \n| [[Embarcadero Delphi]] || 3 \n| {{no}} || {{no}} || {{no}}  || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}}<ref group=\"a\" name=\"temp-meta\" /> || {{yes}} || {{no}} || {{no}} || {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}} || {{no}} || {{no}} || {{no}}\n|- \n| [[Erlang (programming language)|Erlang]] || 3 \n| {{yes}} || {{no}}|| {{no}}|| {{yes}}|| {{yes}} || {{yes}} || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}}|| {{no}}|| {{no}}|| {{no}}\n|- \n| [[Elixir (programming language)|Elixir]] || 4 \n| {{yes}} || {{no}}|| {{no}}|| {{no}}|| {{yes}} || {{yes}} || {{yes}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}}|| {{no}}|| {{no}}|| {{no}}\n|- \n| [[Elm (programming language)|Elm]] || 6\n| {{yes}} || {{no}}|| {{yes}}|| {{yes}}|| {{no}} || {{yes}} || {{no}}|| {{yes}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}}|| {{no}}|| {{no}}|| reactive\n|- \n| [[F Sharp (programming language)|F#]] || 7 (8) \n| {{yes}}<ref group=\"a\" name=\"actor\">actor programming</ref> || {{no}} || {{partial|Library}}<ref group=\"a\" name=\"tpldf\">using [http://msdn.microsoft.com/en-us/devlabs/gg585582.aspx TPL Dataflow]</ref> || {{yes}} || {{no}} || {{yes}}|| {{no}} || {{yes}}|| {{yes}} || {{no}} || {{yes}}|| {{yes}}<ref group=\"a\" name=\"class\" />|| {{no}} || {{no}} || {{no}} || reactive<ref group=\"a\" name=\"rx\">using [http://msdn.microsoft.com/en-us/data/gg577609.aspx Reactive Extensions (Rx)]</ref> \n|-\n| [[Fortran]] || 4 (5)\n| {{yes}} || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}}<ref group=\"a\" name=\"pure-func\">purely functional</ref>|| {{no}}|| {{yes}}<ref group=\"a\" name=\"param-class\">parameterized classes</ref> || {{no}}|| {{no}}|| {{no}}|| {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}} || {{no}}|| {{no}} || Array <small>(multi-dimensional)</small>\n|-\n|[[Go (programming language)|Go]] || 4 \n| {{yes}}|| {{no}} || {{no}} || {{no}}|| {{no}} || {{no}} || {{no}} || {{no}} || {{yes}} || {{no}} || {{yes}} || {{no}} || {{yes}} || {{no}}|| {{no}}|| {{no}}\n|-\n| [[Haskell (programming language)|Haskell]] || 8 (15)\n| {{yes}}|| {{partial|Library}}<ref>[https://hackage.haskell.org/package/hswip Prolog embedding]</ref> || {{partial|Library}}<ref>{{Cite web | url=https://wiki.haskell.org/Functional_Reactive_Programming | title=Functional Reactive Programming - HaskellWiki}}</ref> || {{yes}}|| {{partial|Library}}<ref>[https://haskell-distributed.github.io/ Cloud Haskell]</ref>|| {{yes}} ([[lazy evaluation|lazy]]) || {{yes}}<ref>{{Cite web | url=https://wiki.haskell.org/Template_Haskell | title=Template Haskell - HaskellWiki}}</ref> || {{yes}} || {{yes}} || {{partial|Library}}<ref>{{Cite web | url=https://hackage.haskell.org/package/logict | title=Logict: A backtracking logic-programming monad}}</ref> || {{no}} || {{partial|Immutable}} || {{yes}} || {{yes}} || {{partial|Library}}<ref>[https://web.engr.oregonstate.edu/~erwig/HaskellRules/HaskellRules_June06.pdf]</ref> || {{yes|literate, reactive, dependent types (partial)}}\n|- |\n| [[Io (programming language)|Io]] || 4 \n| {{yes}}<ref group=\"a\" name=\"actor\" /> || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}}|| {{no}}|| {{no}}|| {{yes}} || {{no}}|| {{no}}|| {{yes}}<ref group=\"a\" name=\"prototype\" /> || {{no}}|| {{no}}|| {{no}}|| {{no}}\n|- \n| [[J (programming language)|J]] {{Citation needed|date=March 2007}} || 3 \n| {{no}} || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}} || {{no}}|| {{no}}|| {{yes}} || {{no}}|| {{no}}|| {{yes}}<ref group=\"a\" name=\"class\" />  || {{no}}|| {{no}}|| {{no}}|| {{no}}\n|-\n| [[Java (programming language)|Java]] || 6 \n| {{yes}} || {{partial|Library}}<ref>https://jcp.org/en/jsr/detail?id=331 JSR 331: Constraint Programming API </ref> || {{partial|Library}}<ref> https://github.com/GoogleCloudPlatform/DataflowJavaSDK Google Cloud Platform Dataflow SDK </ref>|| {{no}}|| {{no}}|| {{yes}}|| {{no}}|| {{yes}} || {{yes}} || {{no}}|| {{yes}} || {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}}|| {{no}}|| {{no}}  || {{no}}\n|-\n| [[Julia (programming language)|Julia]] || 9 (17)\n| {{yes}} || {{partial|Library}}<ref>{{cite web |title=JuliaOpt/JuMP.jl |url=https://github.com/JuliaOpt/JuMP.jl |website=GitHub |publisher=JuliaOpt |accessdate=12 February 2020 |date=11 February 2020}}</ref> || {{partial|Library}}<ref>{{Cite web | url=https://github.com/MikeInnes/DataFlow.jl | title=GitHub - MikeInnes/DataFlow.jl| date=2019-01-15}}</ref><ref>{{Cite web | url=https://github.com/JuliaGizmos/Reactive.jl | title=GitHub - JuliaGizmos/Reactive.jl: Reactive programming primitives for Julia.| date=2018-12-28}}</ref> || {{partial|Library}}<ref>https://github.com/davidanthoff/Query.jl Query almost anything in julia</ref> || {{yes}} || {{yes}} ([[eager evaluation|eager]]) || {{yes}} || {{yes}} || {{yes}} || {{partial|Library}}<ref>https://github.com/lilinjn/LilKanren.jl A collection of Kanren implementations in Julia</ref> || {{yes}}|| {{yes}} (multiple dispatch, not traditional single) || {{yes}}|| {{no}} || {{partial|Library}}<ref>{{Cite web | url=https://github.com/abeschneider/PEGParser.jl | title=GitHub - abeschneider/PEGParser.jl: PEG Parser for Julia.| date=2018-12-03}}</ref><ref>{{Cite web | url=https://github.com/gitfoxi/Parsimonious.jl | title=GitHub - gitfoxi/Parsimonious.jl: A PEG parser generator for Julia.| date=2017-08-03}}</ref> || [[Multiple dispatch]],<br> Array <small>(multi-dimensional)</small>; optionally [[lazy evaluation|lazy]]<ref>Lazy https://github.com/MikeInnes/Lazy.jl</ref> and reactive (with libraries)\n|-\n|[[Kotlin (programming language)|Kotlin]] || 8\n| {{yes}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}}|| {{yes}}|| {{yes}}|| {{yes}}|| {{no}} || {{yes}} || {{yes}} || {{yes}} || {{no}} || {{no}}|| {{no}}\n|- |\n| [[LabVIEW]] || 4 \n| {{yes}} || {{no}} || {{yes}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}} || {{no}} || {{yes}} || {{no}}|| {{no}}\n|- \n| [[Lava (programming language)|Lava]] || 2 \n| {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}}|| {{yes}} || {{no}}|| {{no}}\n|-\n| [[LispWorks]] (version 6.0 with support for symmetric multi-processing, rules, logic (Prolog), CORBA) || 9\n| {{yes}} || {{no}} || {{no}} || {{no}} || {{yes}} || {{yes}} || {{yes}} || {{no}} || {{yes}} || {{yes}} || {{yes}} || {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}} || {{no}} || {{yes}} || {{no}}\n|- \n| [[Lua (programming language)|Lua]] {{Citation needed|date=March 2007}} || 3\n| {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}} || {{no}} || {{no}} || {{yes}} || {{no}} || {{no}} || {{yes}}<ref group=\"a\" name=\"prototype\" /> || {{no}} || {{no}} || {{no}} || {{no}}\n|-\n| [[MATLAB]] || 6 (10) \n| {{partial|Toolbox}}<ref>{{cite web|title=Execute loop iterations in parallel|url=http://mathworks.com/help/distcomp/parfor.html|website=mathworks.com|accessdate=21 October 2016}}</ref>|| {{partial|Toolbox}}<ref>{{cite web|title=Write Constraints|url=https://mathworks.com/help/optim/write-constraints.html|website=mathworks.com|accessdate=21 October 2016}}</ref>|| {{yes}}<ref>{{cite web|title=Getting Started with SimEvents|url=https://mathworks.com/help/simevents/getting-started-with-simevents.html|website=mathworks.com|accessdate=21 October 2016}}</ref>|| {{no}}|| {{partial|Toolbox}}<ref>{{cite web|title=Execute loop iterations in parallel|url=http://mathworks.com/help/distcomp/parfor.html|website=mathworks.com|accessdate=21 October 2016}}</ref> || {{no}}|| {{yes}}<ref>{{cite web|title=Execute MATLAB expression in text - MATLAB eval|url=https://mathworks.com/help/matlab/ref/eval.html|website=mathworks.com|accessdate=21 October 2016}}</ref>|| {{yes}}<ref>{{cite web|title=Determine class of object|url=https://mathworks.com/help/matlab/ref/class.html|website=mathworks.com|accessdate=21 October 2016}}</ref> || {{no}}|| {{no}}|| {{yes}}<ref>{{cite web|title=Class Metadata|url=https://mathworks.com/help/matlab/get-information-about-classes-and-objects.html|website=mathworks.com|accessdate=21 October 2016}}</ref> || {{yes}}<ref>{{cite web|title=Object-Oriented Programming|url=https://mathworks.com/help/matlab/object-oriented-programming.html|website=mathworks.com|accessdate=21 October 2016}}</ref>|| {{no}}|| {{yes}}<ref>{{cite web|title=Simulink|url=https://mathworks.com/help/simulink/index.html|website=mathworks.com|accessdate=21 October 2016}}</ref>|| {{no}}|| Array <small>(multi-dimensional)</small>\n|- \n| [[Nemerle]] || 7 \n| {{yes}} || {{no}} || {{no}} || {{no}} || {{no}}  || {{yes}} || {{yes}} || {{yes}}|| {{yes}} || {{no}} || {{yes}} || {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}} || {{no}} || {{no}} || {{no}} \n|-\n| [[Object Pascal]] || 4 \n| {{yes}} || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}} || {{no}}|| {{no}}|| {{yes}} || {{no}}|| {{no}}|| {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}}|| {{no}}|| {{no}}|| {{no}}\n|-\n| [[OCaml]] || 4 \n| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}}|| {{no}}|| {{yes}} || {{yes}} || {{no}}|| {{no}}|| {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}}|| {{no}}|| {{no}}|| {{no}}\n|-\n| [[Oz (programming language)|Oz]] || 11\n| {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{no}} || {{no}} || {{yes}} || {{yes}} || {{no}} || {{yes}}<ref group=\"a\" name=\"class\" /> || {{yes}} || {{no}} || {{yes}} || {{no}}\n|- \n| [[Perl]] {{Citation needed|date=March 2007}} || 8 (9) \n| {{yes}}<ref>[http://perldoc.perl.org/threads.html interpreter based threads]</ref> || {{partial|Library}}<ref>[[Moose (Perl)|Moose]]</ref>|| {{yes}}<ref>[http://hop.perl.plover.com/book/ Higher Order Perl]</ref>|| {{no}}|| {{no}}|| {{yes}} || {{yes}}|| {{no}}|| {{yes}} || {{no}}|| {{yes}}<ref group=\"a\" name=\"class\" />|| {{yes}}<ref group=\"a\" name=\"class\" />  || {{yes}}|| {{no}}|| {{no}}|| {{no}} \n|- \n| [[Raku (programming language)|Raku]] ||  10\n| {{yes}}<ref>[https://docs.perl6.org/language/concurrency Channels and other mechanisms]</ref> || {{yes}}<ref>{{Cite web | url=https://docs.perl6.org/type/Signature#Type_Constraints | title=Class Signature}}</ref>|| {{yes}}<ref>[https://docs.perl6.org/routine/==%3E Feed operator]</ref>|| {{no}}|| {{partial|Library}}<ref>https://github.com/perl6/doc/issues/1744#issuecomment-360565196 Cro module</ref>|| {{yes}} || {{yes}}<ref>{{Cite web | url=https://perl6advent.wordpress.com/2011/12/14/meta-programming-what-why-and-how/ | title=Meta-programming: What, why and how| date=2011-12-14}}</ref>|| {{yes}}<ref>https://perl6advent.wordpress.com/2009/12/18/day-18-roles/ Parametrized Roles</ref>|| {{yes}} || {{no}}|| {{yes}}<ref>{{Cite web | url=https://docs.perl6.org/language/mop | title=Meta-object protocol (MOP)}}</ref>|| {{yes}}<ref>https://docs.perl6.org/language/classtut Classes and Roles </ref>  || {{yes}}|| {{no}}|| {{no}}|| Multiple dispatch, lazy lists, reactive. \n|- \n| [[PHP]]<ref>[http://php.net/manual/en/index.php PHP Manual], [http://php.net/manual/en/language.functions.php Chapter 17. Functions]</ref><ref>[http://php.net/manual/en/index.php PHP Manual], [http://php.net/manual/en/language.oop5.php Chapter 19. Classes and Objects (PHP 5)]</ref><ref>[http://php.net/manual/en/index.php PHP Manual], [http://docs.php.net/functions.anonymous Anonymous functions]</ref> || 4 \n| {{no}} || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}} || {{no}} || {{no}}|| {{yes}} || {{no}} || {{yes}}|| {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}}|| {{no}}|| {{no}}|| {{no}}\n|- \n| [[Poplog]] || 3 \n| {{no}}|| {{no}}|| {{no}} || {{no}}|| {{no}} || {{yes}} || {{no}}|| {{no}}|| {{yes}} || {{yes}} || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}\n|- \n| [[Prograph]] || 3 \n| {{no}}|| {{no}}|| {{yes}} || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}}|| {{yes}} || {{no}}|| {{no}}\n|-\n| [[Python (programming language)|Python]] || 5 (10) \n| {{partial|Library}}<ref>{{cite web|title=Parallel Processing and Multiprocessing in Python|url=https://wiki.python.org/moin/ParallelProcessing|website=wiki.python.org|accessdate=21 October 2016}}</ref><ref>{{cite web|title=threading \u2014 Higher-level threading interface|url=https://docs.python.org/2/library/threading.html|website=docs.python.org|accessdate=21 October 2016}}</ref>\n| {{partial|Library}}<ref>{{cite web|title=python-constraint|url=https://pypi.python.org/pypi/python-constraint|website=pypi.python.org|accessdate=21 October 2016}}</ref>\n| {{no}}\n| {{no}}\n| {{partial|Library}}<ref>{{cite web|title=DistributedProgramming|url=https://wiki.python.org/moin/DistributedProgramming|website=wiki.python.org|accessdate=21 October 2016}}</ref>\n| {{partial}}\n| {{yes}}<ref>{{cite web|title=Chapter 9. Metaprogramming|url=http://chimera.labs.oreilly.com/books/1230000000393/ch09.html|website=chimera.labs.oreilly.com|accessdate=22 October 2016|archive-url=https://web.archive.org/web/20161023050954/http://chimera.labs.oreilly.com/books/1230000000393/ch09.html|archive-date=23 October 2016|url-status=dead}}</ref><ref>{{cite web|title=Metaprogramming|url=https://python-3-patterns-idioms-test.readthedocs.io/en/latest/Metaprogramming.html|website=readthedocs.io|accessdate=22 October 2016}}</ref>\n| {{yes}}<ref>{{cite web|title=PEP 443 -- Single-dispatch generic functions|url=https://www.python.org/dev/peps/pep-0443/|website=python.org|accessdate=22 October 2016}}</ref><ref>{{cite web|title=PEP 484 -- Type Hints|url=https://www.python.org/dev/peps/pep-0484/#generics|website=python.org|accessdate=22 October 2016}}</ref>|| {{yes}} || {{partial|Library}}<ref>{{cite web |url=https://sites.google.com/site/pydatalog/ |title=PyDatalog |accessdate=22 October 2016}}</ref>|| {{yes}}|| {{yes}}<ref group=\"a\" name=\"class\" /> \n| {{no}}|| {{partial|Editor}}<ref>{{Cite web | url=http://lighttable.com/ | title=Light Table| date=2019-04-08}}</ref> || {{no}}|| [[Structured programming|structured]]\n|-\n| [[R (programming language)|R]] || 4 \n| {{no}} || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}}|| {{no}}|| {{no}} || {{yes}} || {{no}}|| {{yes}} || {{yes}} || {{yes}}<ref>{{cite web|title= Magrittr: A Forward Pipe Operator for R|url=https://cran.r-project.org/package=magrittr|website=cran.r-project.org\\accessdate=13 July 2017}}</ref>|| {{no}}|| {{no}} || Array (multi-dimensional)\n|-\n| [[Racket (programming language)|Racket]] || 6 \n| {{yes}}<ref>[https://docs.racket-lang.org/guide/concurrency.html Racket Guide: Concurrency and Synchronization]</ref> || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}}|| {{yes}}|| {{no}} || {{yes}} || {{yes}}|| {{yes}} || {{yes}} || {{no}}|| {{no}}|| {{no}} || {{no}}\n|-\n| [[ROOP (programming language)|ROOP]] || 3 \n| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}} || {{no}}|| {{yes}} || {{yes}} || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}} || {{no}}\n|-\n| [[Ruby (programming language)|Ruby]] || 5 \n| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}}|| {{yes}} || {{no}}|| {{yes}} || {{no}} || {{yes}}|| {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}}|| {{no}}|| {{no}}|| {{no}}\n|-\n| [[Rust (programming language)|Rust]] (version 1.0.0-alpha) || 6\t\n| {{yes}}<ref group=\"a\" name=\"actor\" /> || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}}|| {{yes}}<ref>{{cite web|title=The Rust macros guide|url=http://doc.rust-lang.org/1.0.0-alpha/book/macros.html|website=Rust|accessdate=19 January 2015|ref=rust-macros}}</ref><ref>{{cite web|title=The Rust compiler plugins guide|url=http://doc.rust-lang.org/1.0.0-alpha/book/plugins.html|website=Rust|accessdate=19 January 2015|ref=rust-plugins}}</ref>|| {{yes}}<ref>[http://doc.rust-lang.org/1.0.0-alpha/reference.html#generic-functions The Rust Reference \u00a76.1.3.1]</ref> || {{yes}}|| {{no}}|| {{no}}|| {{yes}}|| {{no}}|| {{no}}|| {{no}}|| linear, affline, and ownership types\n|- \n| [[Sather]]{{Citation needed|date=March 2007}} || 2 \n| {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}} || {{no}} || {{no}} || {{no}}\n|- \n| [[Scala (programming language)|Scala]]<ref>[http://www.scala-lang.org/sites/default/files/linuxsoft_archives/docu/files/ScalaOverview.pdf An Overview of the Scala Programming Language]</ref><ref>[https://wayback.archive-it.org/all/20171003043151/http://www.scala-lang.org/sites/default/files/linuxsoft_archives/docu/files/ScalaReference.pdf Scala Language Specification]</ref> || 9 \n| {{yes}}<ref group=\"a\" name=\"actor\">actor programming</ref> || {{no}} || {{yes}}<ref group=\"a\" name=\"akka\">[http://doc.akka.io/docs/akka/snapshot/scala/dataflow.html Akka] {{webarchive|url=https://web.archive.org/web/20130119045517/http://doc.akka.io/docs/akka/snapshot/scala/dataflow.html |date=2013-01-19 }}</ref> || {{yes}} || {{no}} || {{yes}}|| {{yes}} || {{yes}}|| {{yes}} || {{no}} || {{yes}}|| {{yes}}<ref group=\"a\" name=\"class\" />|| {{no}} || {{no}} || {{no}} || {{no}} \n|- \n| [[Simula]]{{Citation needed|date=March 2007}} || 2 \n| {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}} || {{no}} || {{no}} || {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}} || {{no}} || {{no}} || {{no}}\n|- \n| [[SISAL]]|| 3 \n| {{yes}} || {{no}}|| {{yes}} || {{no}}|| {{no}}|| {{yes}} || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}} || {{no}}|| {{no}}\n|- \n| [[Spreadsheet]]s || 2 \n| {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}}  || {{no}} || {{no}} || {{yes}} || {{no}}|| {{no}}\n|- \n| [[Swift (programming language)|Swift]] || 7\n| {{yes}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{no}} || {{yes}} || {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}} || {{no}} || {{no}} || block-structured\n|- \n| [[Tcl]] with Snit extension {{Citation needed|date=March 2007}} || 3 \n| {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}}<ref>{{cite web|title=Tcl Programming/Introduction|url=https://en.wikibooks.org/wiki/Tcl_Programming/Introduction#One_language.2C_many_styles|website=en.wikibooks.org|accessdate=22 October 2016}}</ref> || {{no}} || {{no}} || {{yes}} || {{no}} || {{no}} || {{yes}}<ref group=\"a\" name=\"prototype\" /><ref>{{cite web|title=TCLLIB - Tcl Standard Library: snitfaq|url=http://tmml.sourceforge.net/doc/tcllib/snitfaq.html|website=sourceforge.net|accessdate=22 October 2016}}</ref> || {{no}} || {{no}} || {{no}} || {{no}}\n|- \n| [[Visual Basic .NET]] || 6 (7) \n| {{yes}}|| {{no}} || {{partial|Library}}<ref group=\"a\" name=\"tpldf\"/> || {{no}} || {{no}} || {{yes}} || {{no}} || {{yes}}|| {{yes}} || {{no}} || {{yes}}|| {{yes}}<ref group=\"a\" name=\"class\" />|| {{no}} || {{no}} || {{no}} || reactive<ref group=\"a\" name=\"rx\" />\n|-\n| [[Windows PowerShell]] || 6 \n| {{no}}|| {{no}} || {{no}}|| {{no}}|| {{no}}|| {{yes}} || {{no}}|| {{yes}} || {{yes}} || {{no}}|| {{yes}} || {{yes}}<ref group=\"a\" name=\"class\" /> || {{yes}}|| {{no}}|| {{no}}|| {{no}}\n|- \n| [[Wolfram Language]] & [[Mathematica]] || 13<ref>[http://www.wolfram.com/language/for-experts/ Notes for Programming Language Experts], Wolfram Language Documentation.</ref> (14)\n| {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}}<ref>[https://reference.wolfram.com/language/tutorial/ExternalPrograms.html External Programs], Wolfram Language Documentation.</ref> || {{no}} || {{yes}} || Knowledge Based\n|}\n<!-- Row Template:\n|-\n| lang || count || concurrent || constrain || dataf || decl || dist || func || meta || generic || imp || logic || reflect || OO || pipeline || visual || rules || other\n{{yes}} {{no}} \n-->\n\n==See also==\n* [[Programming paradigm]]\n* [[Categorical list of programming languages]]\n* [[Domain-specific programming language]]\n* [[Domain-specific multimodeling]]\n\n==Notes==\n{{reflist|group=a}}\n\n==Citations==\n{{Reflist|30em}}\n\n==References==\n* Jim Coplien, ''Multiparadigm Design for C++'', Addison-Wesley Professional, 1998.\n\n{{Programming language}}\n\n{{DEFAULTSORT:List of multi-paradigm programming languages}}\n[[Category:Programming paradigms]]\n[[Category:Programming language comparisons]]\n", "text_old": "{{short description|Wikimedia list article}}\n{{Original research|date=August 2009}}\n{{Programming paradigms|state=collapsed}}\n[[Programming language]]s can be grouped by the number and types of [[Programming paradigm|paradigms]] supported.\n\n==Paradigm summaries==\nA concise reference for the programming paradigms listed in this article.\n\n* [[Concurrent programming language|Concurrent programming]] \u2013 have language constructs for concurrency, these may involve multi-threading, support for distributed computing, message passing, shared resources (including shared memory), or futures\n** [[Actor model|Actor programming]] \u2013 concurrent computation with ''actors'' that make local decisions in response to the environment (capable of selfish or competitive behavior)\n* [[Constraint programming]] \u2013 relations between variables are expressed as constraints (or constraint networks), directing allowable solutions (uses constraint satisfaction or [[simplex algorithm]])\n* [[Dataflow|Dataflow programming]] \u2013 forced recalculation of formulas when data values change (e.g. [[spreadsheet]]s)\n* [[Declarative programming]] \u2013 describes what a computation should perform, without specifying detailed state changes c.f. imperative programming (functional and logic programming are major subgroups of declarative programing)\n* [[Distributed computing|Distributed programming]] \u2013 have support for multiple autonomous computers that communicate via computer networks\n* [[Functional programming]] \u2013 uses evaluation of mathematical functions and avoids state and mutable data\n* [[Generic programming]] \u2013 uses algorithms written in terms of to-be-specified-later types that are then instantiated as needed for specific types provided as parameters\n* [[Imperative programming]] \u2013 explicit statements that change a program state\n* [[Logic programming]] \u2013 uses explicit mathematical logic for programming\n* [[Metaprogramming]] \u2013 writing programs that write or manipulate other programs (or themselves) as their data, or that do part of the work at compile time that would otherwise be done at runtime\n** [[Template metaprogramming]] \u2013 metaprogramming methods in which templates are used by a compiler to generate temporary source code, which is merged by the compiler with the rest of the source code and then compiled\n** [[reflection (computer programming)|Reflective programming]] \u2013 metaprogramming methods in which a program modifies or extends itself\n* [[Object-oriented programming]] \u2013 uses data structures consisting of data fields and methods together with their interactions (objects) to design programs\n** [[class (computer science)|Class-based]] \u2013 object-oriented programming in which inheritance is achieved by defining classes of objects, versus the objects themselves\n** [[prototype-based programming|Prototype-based]] \u2013 object-oriented programming that avoids classes and implements inheritance via cloning of instances\n* [[Pipeline programming]] \u2013 a simple syntax change to add syntax to nest function calls to language originally designed with none\n* [[Rule-based programming]] \u2013 a network of rules of thumb that comprise a knowledge base and can be used for expert systems and problem deduction & resolution\n* [[Visual programming language|Visual programming]] \u2013 manipulating program elements graphically rather than by specifying them textually (e.g. [[Simulink]]); also termed ''diagrammatic programming''<ref>{{cite book |chapter=Diagrammatic-graphical programming languages and DoD-STD-2167A |last=Bragg |first=S.D. |last2=Driskill |first2=C.G. |date=20\u201322 September 1994 |work=IEEEXplore |publisher=IEEE|doi=10.1109/AUTEST.1994.381508 |title=Proceedings of AUTOTESTCON '94 |pages=211\u2013220 |isbn=978-0-7803-1910-3 }}</ref>\n\n==Language overview==\n{|class=\"wikitable sortable\" style=\"font-size:85%;\"\n|+ List of multi-paradigm programming languages \n! Language \n! Num&shy;ber of Para&shy;digms \n! Con&shy;cur&shy;rent\n! Con&shy;straints\n! Data&shy;flow \n! De&shy;clar&shy;at&shy;ive \n! Dis&shy;trib&shy;uted \n! Func&shy;tion&shy;al \n! Meta&shy;pro&shy;gram&shy;ming \n! Gen&shy;er&shy;ic \n! Im&shy;per&shy;at&shy;ive \n! Lo&shy;gic \n! Re&shy;flec&shy;tion \n! Ob&shy;ject-ori&shy;ented \n! Pipe&shy;lines \n! Visu&shy;al \n! Rule-based\n! Oth&shy;er para&shy;digms\n|-\n| [[Ada (programming language)|Ada]]<ref>[http://www.adaic.org/standards/05rm/html/RM-TTL.html Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3], [http://www.adaic.org/standards/05rm/html/RM-9.html Section 9: Tasks and Synchronization]</ref><ref>[http://www.adaic.org/standards/05rm/html/RM-TTL.html Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3] [http://www.adaic.org/standards/05rm/html/RM-E.html Annex E: Distributed Systems]</ref><ref>[http://www.adaic.org/standards/05rm/html/RM-TTL.html Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3], [http://www.adaic.org/standards/05rm/html/RM-12.html Section 12: Generic Units]</ref><ref>[http://www.adaic.org/standards/05rm/html/RM-TTL.html Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3], [http://www.adaic.org/standards/05rm/html/RM-6.html Section 6: Subprograms]</ref><ref>[http://www.adaic.org/standards/05rm/html/RM-TTL.html Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3], [http://www.adaic.org/standards/05rm/html/RM-3-9.html 3.9 Tagged Types and Type Extensions]</ref> || 5 \n| {{yes}}<ref group=\"a\" name=\"rend-mon\">rendezvous and monitor-like based</ref> || {{no}}|| {{no}}|| {{no}}|| {{yes}} || {{no}}|| {{no}}|| {{yes}} || {{yes}} || {{no}}|| {{no}}|| {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}}|| {{no}}|| {{no}}|| {{no}}\n|- \n| [[Algebraic Logic Functional programming language|ALF]] || 2 \n| {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}} || {{no}} || {{no}} || {{no}} || {{yes}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}}\n|- \n| [[AmigaE]]{{Citation needed|date=March 2007}} || 2 \n| {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}} || {{no}} || {{no}} || {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}} || {{no}} || {{no}} || {{no}}\n|- \n| [[APL (programming language)|APL]] || 3\n| {{no}} || {{no}} || {{no}} || {{no}}  || {{no}} || {{yes}} || {{no}} || {{no}} || {{yes}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || Array (multi-dimensional)\n|- \n| [[BETA (programming language)|BETA]] {{Citation needed|date=March 2007}} || 3 \n| {{no}} || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}} || {{no}}|| {{no}}|| {{yes}} || {{no}}|| {{no}}|| {{yes}}<ref group=\"a\" name=\"class\" />  || {{no}}|| {{no}}|| {{no}}|| {{no}}\n|- \n| [[C++]] || 7 (15)\n| {{yes}}<ref>[http://en.cppreference.com/w/cpp/thread Thread support]</ref><ref>[http://en.cppreference.com/w/cpp/atomic Atomics support]</ref><ref>[https://cppandbeyond.wordpress.com/2011/04/11/session-announcement-the-c0x-memory-model-and-why-you-care Memory model]</ref> || {{partial|Library}}<ref>[http://www.gecode.org/ Gecode]</ref> || {{partial|Library}}<ref>[http://www.accellera.org/downloads/standards/systemc/about_systemc/ SystemC]</ref><ref>[http://www.boost.org/libs/iostreams/ Boost.Iostreams]</ref> || {{partial|Library}}<ref>[http://code.google.com/p/boolinq/ Boolinq]</ref><ref>[https://www.cs.technion.ac.il/~lkeren/scp.pdf AraRat]</ref> || {{partial|Library}}<ref>[http://www.open-mpi.org/ OpenMPI]</ref><ref>[http://www.boost.org/libs/mpi/ Boost.MPI]</ref> || {{yes}} || {{yes}}<ref>[http://www.boost.org/libs/mpl/ Boost.MPL]</ref> || {{yes}}<ref group=\"a\" name=\"temp-meta\">Template metaprogramming</ref> || {{yes}} || {{partial|Library}}<ref>[http://cgi.di.uoa.gr/~smaragd/lc++/ LC++]</ref><ref>[http://www.mpprogramming.com/Cpp/Default.aspx Castor] {{webarchive|url=https://web.archive.org/web/20130125024854/http://www.mpprogramming.com/Cpp/Default.aspx |date=2013-01-25 }}</ref> || {{partial|Library}}<ref>[https://bytemaster.github.com/boost_reflect/index.html Reflect Library]</ref> || {{yes}}<ref group=\"a\" name=\"class\" /> || {{yes}}<ref>[http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2013/n3534.html N3534]</ref> || {{no}} || {{partial|Library}}<ref>[http://www.boost.org/libs/spirit/ Boost.Spirit]</ref> || Array (multi-dimensional; using [[Standard Template Library|STL]])\n|-\n| [[C Sharp (programming language)|C#]] || 6 (7) \n| {{yes}}|| {{no}} || {{partial|Library}}<ref group=\"a\" name=\"tpldf\">using [http://msdn.microsoft.com/en-us/devlabs/gg585582.aspx TPL Dataflow]</ref> || {{no}} || {{no}} || {{yes}}<ref group=\"a\" name=\"lambda\">only [[Lambda calculus|lambda]] support (lazy functional programming)</ref>|| {{no}} || {{yes}}|| {{yes}} || {{no}} || {{yes}}|| {{yes}}<ref group=\"a\" name=\"class\" />|| {{no}} || {{no}} || {{no}} || reactive<ref group=\"a\" name=\"rx\">using [http://msdn.microsoft.com/en-us/data/gg577609.aspx Reactive Extensions (Rx)]</ref> \n|- \n| [[ChucK]] {{Citation needed|date=March 2007}} || 3 \n| {{yes}} || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}} || {{no}}|| {{no}}|| {{yes}}<ref group=\"a\" name=\"class\"/> || {{no}} || {{no}}|| {{no}}|| {{no}}\n|- \n| [[Claire (programming language)|Claire]] || 2 \n| {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}} || {{no}} || {{no}} || {{no}}\n|- \n| [[Clojure]] || 5 \n| {{yes}}<ref>[https://clojure.org/about/concurrent_programming Clojure - Concurrent Programming]</ref><ref>[https://github.com/clojure/core.async Clojure - core.async]</ref> || {{no}} || {{no}} || {{yes}} || {{no}} || {{yes}}<ref>[https://clojure.org/about/functional_programming Clojure - Functional Programming]</ref> || {{yes}}<ref>[https://clojure.org/reference/macros Clojure - Macros]</ref> || {{no}} || {{no}} || {{partial|Library}}<ref>[https://github.com/clojure/core.logic/ Clojure - core.logic]</ref> || {{no}} || {{no}} || {{yes}}<ref>[https://clojure.org/guides/threading_macros Clojure - Threading Macros Guide]</ref> || {{partial|Editor}}<ref>{{Cite web | url=http://lighttable.com/ | title=Light Table| date=2019-04-08}}</ref> || {{no}} || [[Multiple dispatch]]<ref>[https://clojure.org/reference/multimethods Multimethods and Hierarchies]</ref>, Agents<ref>[https://clojure.org/reference/agents Agents and Asynchronous Actions]</ref>\n|-\n| [[Common Lisp]] || 5 \n| {{partial|Library}}<ref>[https://www.cliki.net/Concurrency] many concurrency paradigms implemented as language extensions</ref> || {{partial|Library}}<ref>[https://www.cliki.net/screamer] constraint programming inside CL through extensions</ref> || {{partial|Library}}<ref>[https://www.cliki.net/Cells] dataflow extension</ref>|| {{yes}}<ref>[http://www.gigamonkeys.com/book/practical-an-html-generation-library-the-interpreter.html] by creating DSLs using the built-in metaprogramming; also see note on functional, constraint and logic paradigms, which are part of declarative</ref>|| {{partial|Library}}<ref>[https://www.cliki.net/Distributed] MPI, etc via language extensions</ref> || {{yes}} || {{yes}} || {{yes}}<ref>template metaprogramming using macros (see C++)</ref>|| {{yes}} || {{partial|Library}}<ref>[https://www.cliki.net/Prolog] [https://franz.com/products/prolog/] [http://www.lispworks.com/products/knowledgeworks.html] Prolog implemented as a language extension</ref> || {{yes}} || {{yes}} (multiple dispatch, method combinations)<ref>[[Common Lisp Object System]] see Wikipedia article on CLOS, the Common Lisp Object System.</ref><ref group=\"a\" name=\"class\" /> || {{partial|Library}}<ref>implemented by the user via a short macro, example of implementation: [http://blog.vjeux.com/2011/lisp/lisp-chaining-operator.html]</ref> || {{no}}|| {{partial|Library}}<ref>[http://lisa.sourceforge.net/] rule-based programming extension</ref> || Multiple dispatch, meta-OOP system<ref>[https://common-lisp.net/project/ecl/static/manual/ch31.html] through the Meta Object Protocol</ref>, Language is extensible via metaprogramming.\n|-\n| [[Curl (programming language)|Curl]] || 5 \n| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}} || {{no}}|| {{yes}}<ref group=\"a\" name=\"temp-meta\" /> || {{yes}} || {{no}}|| {{yes}} || {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}}|| {{no}}|| {{no}}|| {{no}}\n|- \n| [[Curry (programming language)|Curry]] || 4 \n| {{yes}} || {{yes}} || {{no}}|| {{no}}|| {{no}}|| {{yes}} || {{no}}|| {{no}} || {{no}}|| {{yes}} || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}\n|-\n| [[D (programming language)|D]] (version 2.0)<ref>[http://www.digitalmars.com/d/2.0/comparison.html D Language Feature Table]</ref><ref>[http://www.digitalmars.com/d/2.0/phobos/std_algorithm.html Phobos std.algorithm]</ref> || 6 \n| {{yes}}<ref group=\"a\" name=\"actor\" /> || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}} || {{yes}}<ref>[http://dlang.org/mixin.html D language String Mixins]</ref><ref group=\"a\" name=\"temp-meta\" /> || {{yes}}<ref group=\"a\" name=\"temp-meta\" /> || {{yes}} || {{no}}|| {{no}}|| {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}}|| {{no}}|| {{no}}|| {{no}}\n|- \n| [[Dylan (programming language)|Dylan]]{{Citation needed|date=March 2007}} || 3 \n| {{no}} || {{no}} || {{no}} || {{no}}  || {{no}} || {{yes}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}} || {{yes}}<ref group=\"a\" name=\"class\">Class-based</ref>|| {{no}} || {{no}} || {{no}} || {{no}}\n|- \n| [[E (programming language)|E]] || 3 \n| {{yes}} || {{no}} || {{no}} || {{no}} || {{yes}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}} || {{no}} || {{no}} || {{no}}\n|- \n| [[ECMAScript]]<ref>[http://www.crockford.com/javascript/little.html The Little JavaScripter] demonstrates fundamental commonality with Scheme, a functional language.</ref><ref>[http://mckoss.com/jscript/object.htm Object Oriented Programming in JavaScript] {{Webarchive|url=https://web.archive.org/web/20190210070220/http://mckoss.com/jscript/object.htm |date=2019-02-10 }} gives an overview of object-oriented programming techniques in JavaScript.</ref> ([[ActionScript]], [[E4X]], [[JavaScript]], [[JScript]]) || 4 (5)\n| {{partial|partial (promises, native extensions)}}<ref group=\"a\" name=\"nodejs-cluster\">using [[Node.js]]' [https://nodejs.org/api/cluster.html cluster] module or [https://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options child_process.fork] method, [https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers web workers] in the browser, etc.</ref> || {{no}} || {{no}} || {{partial|Library}}<ref>{{Cite web | url=https://reactjs.org/ | title=React \u2013\u00a0A JavaScript library for building user interfaces| date=2019-04-08}}</ref><ref>{{Cite web | url=https://reactjs.org/ | title=React \u2013\u00a0A JavaScript library for building user interfaces| date=2019-04-08}}</ref><ref>{{Cite web | url=https://github.com/getify/tng-hooks | title=TNG-Hooks| date=2019-04-08}}</ref> || {{no}} || {{yes}} || {{no}} || {{no}} || {{yes}} || {{no}} || {{yes}} || {{yes}}<ref group=\"a\" name=\"prototype\">Prototype-based</ref> || {{partial|Library}}<ref>{{Cite web | url=https://lodash.com/docs/4.17.11#flow | title=Lodash documentation| date=2019-04-08}}</ref><ref>{{Cite web | url=https://swannodette.github.io/mori/#pipeline | title=mori| date=2019-04-08}}</ref> || {{partial|Editor}}<ref>{{Cite web | url=http://lighttable.com/ | title=Light Table| date=2019-04-08}}</ref> || {{no}} || reactive<ref group=\"a\" name=\"rxjs\">using [http://reactivex.io/rxjs/ Reactive Extensions (RxJS)]</ref><ref>{{Cite web | url=https://github.com/getify/tng-hooks | title=TNG-Hooks| date=2019-04-08}}</ref>, event driven<ref group=\"a\" name=\"node-events\">in Node.js via their [https://nodejs.org/api/events.html events] module</ref><ref group=\"a\" name=\"dom-events\">in browsers via their native [https://developer.mozilla.org/en-US/docs/Web/API/EventTarget EventTarget] API</ref>\n\n|- \n| [[Embarcadero Delphi]] || 3 \n| {{no}} || {{no}} || {{no}}  || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}}<ref group=\"a\" name=\"temp-meta\" /> || {{yes}} || {{no}} || {{no}} || {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}} || {{no}} || {{no}} || {{no}}\n|- \n| [[Erlang (programming language)|Erlang]] || 3 \n| {{yes}} || {{no}}|| {{no}}|| {{yes}}|| {{yes}} || {{yes}} || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}}|| {{no}}|| {{no}}|| {{no}}\n|- \n| [[Elixir (programming language)|Elixir]] || 4 \n| {{yes}} || {{no}}|| {{no}}|| {{no}}|| {{yes}} || {{yes}} || {{yes}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}}|| {{no}}|| {{no}}|| {{no}}\n|- \n| [[Elm (programming language)|Elm]] || 6\n| {{yes}} || {{no}}|| {{yes}}|| {{yes}}|| {{no}} || {{yes}} || {{no}}|| {{yes}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}}|| {{no}}|| {{no}}|| reactive\n|- \n| [[F Sharp (programming language)|F#]] || 7 (8) \n| {{yes}}<ref group=\"a\" name=\"actor\">actor programming</ref> || {{no}} || {{partial|Library}}<ref group=\"a\" name=\"tpldf\">using [http://msdn.microsoft.com/en-us/devlabs/gg585582.aspx TPL Dataflow]</ref> || {{yes}} || {{no}} || {{yes}}|| {{no}} || {{yes}}|| {{yes}} || {{no}} || {{yes}}|| {{yes}}<ref group=\"a\" name=\"class\" />|| {{no}} || {{no}} || {{no}} || reactive<ref group=\"a\" name=\"rx\">using [http://msdn.microsoft.com/en-us/data/gg577609.aspx Reactive Extensions (Rx)]</ref> \n|-\n| [[Fortran]] || 4 (5)\n| {{yes}} || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}}<ref group=\"a\" name=\"pure-func\">purely functional</ref>|| {{no}}|| {{yes}}<ref group=\"a\" name=\"param-class\">parameterized classes</ref> || {{no}}|| {{no}}|| {{no}}|| {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}} || {{no}}|| {{no}} || Array <small>(multi-dimensional)</small>\n|-\n|[[Go (programming language)|Go]] || 4 \n| {{yes}}|| {{no}} || {{no}} || {{no}}|| {{no}} || {{no}} || {{no}} || {{no}} || {{yes}} || {{no}} || {{yes}} || {{no}} || {{yes}} || {{no}}|| {{no}}|| {{no}}\n|-\n| [[Haskell (programming language)|Haskell]] || 8 (15)\n| {{yes}}|| {{partial|Library}}<ref>[https://hackage.haskell.org/package/hswip Prolog embedding]</ref> || {{partial|Library}}<ref>{{Cite web | url=https://wiki.haskell.org/Functional_Reactive_Programming | title=Functional Reactive Programming - HaskellWiki}}</ref> || {{yes}}|| {{partial|Library}}<ref>[https://haskell-distributed.github.io/ Cloud Haskell]</ref>|| {{yes}} ([[lazy evaluation|lazy]]) || {{yes}}<ref>{{Cite web | url=https://wiki.haskell.org/Template_Haskell | title=Template Haskell - HaskellWiki}}</ref> || {{yes}} || {{yes}} || {{partial|Library}}<ref>{{Cite web | url=https://hackage.haskell.org/package/logict | title=Logict: A backtracking logic-programming monad}}</ref> || {{no}} || {{partial|Immutable}} || {{yes}} || {{yes}} || {{partial|Library}}<ref>[https://web.engr.oregonstate.edu/~erwig/HaskellRules/HaskellRules_June06.pdf]</ref> || {{yes|literate, reactive, dependent types (partial)}}\n|- |\n| [[Io (programming language)|Io]] || 4 \n| {{yes}}<ref group=\"a\" name=\"actor\" /> || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}}|| {{no}}|| {{no}}|| {{yes}} || {{no}}|| {{no}}|| {{yes}}<ref group=\"a\" name=\"prototype\" /> || {{no}}|| {{no}}|| {{no}}|| {{no}}\n|- \n| [[J (programming language)|J]] {{Citation needed|date=March 2007}} || 3 \n| {{no}} || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}} || {{no}}|| {{no}}|| {{yes}} || {{no}}|| {{no}}|| {{yes}}<ref group=\"a\" name=\"class\" />  || {{no}}|| {{no}}|| {{no}}|| {{no}}\n|-\n| [[Java (programming language)|Java]] || 6 \n| {{yes}} || {{partial|Library}}<ref>https://jcp.org/en/jsr/detail?id=331 JSR 331: Constraint Programming API </ref> || {{partial|Library}}<ref> https://github.com/GoogleCloudPlatform/DataflowJavaSDK Google Cloud Platform Dataflow SDK </ref>|| {{no}}|| {{no}}|| {{yes}}|| {{no}}|| {{yes}} || {{yes}} || {{no}}|| {{yes}} || {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}}|| {{no}}|| {{no}}  || {{no}}\n|-\n| [[Julia (programming language)|Julia]] || 9 (17)\n| {{yes}} || {{partial|Library}}<ref>{{cite web |title=JuliaOpt/JuMP.jl |url=https://github.com/JuliaOpt/JuMP.jl |website=GitHub |publisher=JuliaOpt |accessdate=12 February 2020 |date=11 February 2020}}</ref> || {{partial|Library}}<ref>{{Cite web | url=https://github.com/MikeInnes/DataFlow.jl | title=GitHub - MikeInnes/DataFlow.jl| date=2019-01-15}}</ref><ref>{{Cite web | url=https://github.com/JuliaGizmos/Reactive.jl | title=GitHub - JuliaGizmos/Reactive.jl: Reactive programming primitives for Julia.| date=2018-12-28}}</ref> || {{partial|Library}}<ref>https://github.com/davidanthoff/Query.jl Query almost anything in julia</ref> || {{yes}} || {{yes}} ([[eager evaluation|eager]]) || {{yes}} || {{yes}} || {{yes}} || {{partial|Library}}<ref>https://github.com/lilinjn/LilKanren.jl A collection of Kanren implementations in Julia</ref> || {{yes}}|| {{yes}} (multiple dispatch, not traditional single) || {{yes}}|| {{no}} || {{partial|Library}}<ref>{{Cite web | url=https://github.com/abeschneider/PEGParser.jl | title=GitHub - abeschneider/PEGParser.jl: PEG Parser for Julia.| date=2018-12-03}}</ref><ref>{{Cite web | url=https://github.com/gitfoxi/Parsimonious.jl | title=GitHub - gitfoxi/Parsimonious.jl: A PEG parser generator for Julia.| date=2017-08-03}}</ref> || [[Multiple dispatch]],<br> Array <small>(multi-dimensional)</small>; optionally [[lazy evaluation|lazy]]<ref>Lazy https://github.com/MikeInnes/Lazy.jl</ref> and reactive (with libraries)\n|-\n|[[Kotlin (programming language)|Kotlin]] || 8\n| {{yes}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}}|| {{yes}}|| {{yes}}|| {{yes}}|| {{no}} || {{yes}} || {{yes}} || {{yes}} || {{no}} || {{no}}|| {{no}}\n|- |\n| [[LabVIEW]] || 4 \n| {{yes}} || {{no}} || {{yes}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}} || {{no}} || {{yes}} || {{no}}|| {{no}}\n|- \n| [[Lava (programming language)|Lava]] || 2 \n| {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}}|| {{yes}} || {{no}}|| {{no}}\n|-\n| [[LispWorks]] (version 6.0 with support for symmetric multi-processing, rules, logic (Prolog), CORBA) || 9\n| {{yes}} || {{no}} || {{no}} || {{no}} || {{yes}} || {{yes}} || {{yes}} || {{no}} || {{yes}} || {{yes}} || {{yes}} || {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}} || {{no}} || {{yes}} || {{no}}\n|- \n| [[Lua (programming language)|Lua]] {{Citation needed|date=March 2007}} || 3\n| {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}} || {{no}} || {{no}} || {{yes}} || {{no}} || {{no}} || {{yes}}<ref group=\"a\" name=\"prototype\" /> || {{no}} || {{no}} || {{no}} || {{no}}\n|-\n| [[MATLAB]] || 6 (10) \n| {{partial|Toolbox}}<ref>{{cite web|title=Execute loop iterations in parallel|url=http://mathworks.com/help/distcomp/parfor.html|website=mathworks.com|accessdate=21 October 2016}}</ref>|| {{partial|Toolbox}}<ref>{{cite web|title=Write Constraints|url=https://mathworks.com/help/optim/write-constraints.html|website=mathworks.com|accessdate=21 October 2016}}</ref>|| {{yes}}<ref>{{cite web|title=Getting Started with SimEvents|url=https://mathworks.com/help/simevents/getting-started-with-simevents.html|website=mathworks.com|accessdate=21 October 2016}}</ref>|| {{no}}|| {{partial|Toolbox}}<ref>{{cite web|title=Execute loop iterations in parallel|url=http://mathworks.com/help/distcomp/parfor.html|website=mathworks.com|accessdate=21 October 2016}}</ref> || {{no}}|| {{yes}}<ref>{{cite web|title=Execute MATLAB expression in text - MATLAB eval|url=https://mathworks.com/help/matlab/ref/eval.html|website=mathworks.com|accessdate=21 October 2016}}</ref>|| {{yes}}<ref>{{cite web|title=Determine class of object|url=https://mathworks.com/help/matlab/ref/class.html|website=mathworks.com|accessdate=21 October 2016}}</ref> || {{no}}|| {{no}}|| {{yes}}<ref>{{cite web|title=Class Metadata|url=https://mathworks.com/help/matlab/get-information-about-classes-and-objects.html|website=mathworks.com|accessdate=21 October 2016}}</ref> || {{yes}}<ref>{{cite web|title=Object-Oriented Programming|url=https://mathworks.com/help/matlab/object-oriented-programming.html|website=mathworks.com|accessdate=21 October 2016}}</ref>|| {{no}}|| {{yes}}<ref>{{cite web|title=Simulink|url=https://mathworks.com/help/simulink/index.html|website=mathworks.com|accessdate=21 October 2016}}</ref>|| {{no}}|| Array <small>(multi-dimensional)</small>\n|- \n| [[Nemerle]] || 7 \n| {{yes}} || {{no}} || {{no}} || {{no}} || {{no}}  || {{yes}} || {{yes}} || {{yes}}|| {{yes}} || {{no}} || {{yes}} || {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}} || {{no}} || {{no}} || {{no}} \n|-\n| [[Object Pascal]] || 4 \n| {{yes}} || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}} || {{no}}|| {{no}}|| {{yes}} || {{no}}|| {{no}}|| {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}}|| {{no}}|| {{no}}|| {{no}}\n|-\n| [[OCaml]] || 4 \n| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}}|| {{no}}|| {{yes}} || {{yes}} || {{no}}|| {{no}}|| {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}}|| {{no}}|| {{no}}|| {{no}}\n|-\n| [[Oz (programming language)|Oz]] || 11\n| {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{no}} || {{no}} || {{yes}} || {{yes}} || {{no}} || {{yes}}<ref group=\"a\" name=\"class\" /> || {{yes}} || {{no}} || {{yes}} || {{no}}\n|- \n| [[Perl]] {{Citation needed|date=March 2007}} || 8 (9) \n| {{yes}}<ref>[http://perldoc.perl.org/threads.html interpreter based threads]</ref> || {{partial|Library}}<ref>[[Moose (Perl)|Moose]]</ref>|| {{yes}}<ref>[http://hop.perl.plover.com/book/ Higher Order Perl]</ref>|| {{no}}|| {{no}}|| {{yes}} || {{yes}}|| {{no}}|| {{yes}} || {{no}}|| {{yes}}<ref group=\"a\" name=\"class\" />|| {{yes}}<ref group=\"a\" name=\"class\" />  || {{yes}}|| {{no}}|| {{no}}|| {{no}} \n|- \n| [[Raku (programming language)|Raku]] ||  10\n| {{yes}}<ref>[https://docs.perl6.org/language/concurrency Channels and other mechanisms]</ref> || {{yes}}<ref>{{Cite web | url=https://docs.perl6.org/type/Signature#Type_Constraints | title=Class Signature}}</ref>|| {{yes}}<ref>[https://docs.perl6.org/routine/==%3E Feed operator]</ref>|| {{no}}|| {{partial|Library}}<ref>https://github.com/perl6/doc/issues/1744#issuecomment-360565196 Cro module</ref>|| {{yes}} || {{yes}}<ref>{{Cite web | url=https://perl6advent.wordpress.com/2011/12/14/meta-programming-what-why-and-how/ | title=Meta-programming: What, why and how| date=2011-12-14}}</ref>|| {{yes}}<ref>https://perl6advent.wordpress.com/2009/12/18/day-18-roles/ Parametrized Roles</ref>|| {{yes}} || {{no}}|| {{yes}}<ref>{{Cite web | url=https://docs.perl6.org/language/mop | title=Meta-object protocol (MOP)}}</ref>|| {{yes}}<ref>https://docs.perl6.org/language/classtut Classes and Roles </ref>  || {{yes}}|| {{no}}|| {{no}}|| Multiple dispatch, lazy lists, reactive. \n|- \n| [[PHP]]<ref>[http://php.net/manual/en/index.php PHP Manual], [http://php.net/manual/en/language.functions.php Chapter 17. Functions]</ref><ref>[http://php.net/manual/en/index.php PHP Manual], [http://php.net/manual/en/language.oop5.php Chapter 19. Classes and Objects (PHP 5)]</ref><ref>[http://php.net/manual/en/index.php PHP Manual], [http://docs.php.net/functions.anonymous Anonymous functions]</ref> || 4 \n| {{no}} || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}} || {{no}} || {{no}}|| {{yes}} || {{no}} || {{yes}}|| {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}}|| {{no}}|| {{no}}|| {{no}}\n|- \n| [[Poplog]] || 3 \n| {{no}}|| {{no}}|| {{no}} || {{no}}|| {{no}} || {{yes}} || {{no}}|| {{no}}|| {{yes}} || {{yes}} || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}\n|- \n| [[Prograph]] || 3 \n| {{no}}|| {{no}}|| {{yes}} || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}}|| {{yes}} || {{no}}|| {{no}}\n|-\n| [[Python (programming language)|Python]] || 5 (10) \n| {{partial|Library}}<ref>{{cite web|title=Parallel Processing and Multiprocessing in Python|url=https://wiki.python.org/moin/ParallelProcessing|website=wiki.python.org|accessdate=21 October 2016}}</ref><ref>{{cite web|title=threading \u2014 Higher-level threading interface|url=https://docs.python.org/2/library/threading.html|website=docs.python.org|accessdate=21 October 2016}}</ref>\n| {{partial|Library}}<ref>{{cite web|title=python-constraint|url=https://pypi.python.org/pypi/python-constraint|website=pypi.python.org|accessdate=21 October 2016}}</ref>\n| {{no}}\n| {{no}}\n| {{partial|Library}}<ref>{{cite web|title=DistributedProgramming|url=https://wiki.python.org/moin/DistributedProgramming|website=wiki.python.org|accessdate=21 October 2016}}</ref>\n| {{partial}}\n| {{yes}}<ref>{{cite web|title=Chapter 9. Metaprogramming|url=http://chimera.labs.oreilly.com/books/1230000000393/ch09.html|website=chimera.labs.oreilly.com|accessdate=22 October 2016|archive-url=https://web.archive.org/web/20161023050954/http://chimera.labs.oreilly.com/books/1230000000393/ch09.html|archive-date=23 October 2016|url-status=dead}}</ref><ref>{{cite web|title=Metaprogramming|url=https://python-3-patterns-idioms-test.readthedocs.io/en/latest/Metaprogramming.html|website=readthedocs.io|accessdate=22 October 2016}}</ref>\n| {{yes}}<ref>{{cite web|title=PEP 443 -- Single-dispatch generic functions|url=https://www.python.org/dev/peps/pep-0443/|website=python.org|accessdate=22 October 2016}}</ref><ref>{{cite web|title=PEP 484 -- Type Hints|url=https://www.python.org/dev/peps/pep-0484/#generics|website=python.org|accessdate=22 October 2016}}</ref>|| {{yes}} || {{partial|Library}}<ref>{{cite web |url=https://sites.google.com/site/pydatalog/ |title=PyDatalog |accessdate=22 October 2016}}</ref>|| {{yes}}|| {{yes}}<ref group=\"a\" name=\"class\" /> \n| {{no}}|| {{partial|Editor}}<ref>{{Cite web | url=http://lighttable.com/ | title=Light Table| date=2019-04-08}}</ref> || {{no}}|| [[Structured programming|structured]]\n|-\n| [[R (programming language)|R]] || 4 \n| {{no}} || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}}|| {{no}}|| {{no}} || {{yes}} || {{no}}|| {{yes}} || {{yes}} || {{yes}}<ref>{{cite web|title= Magrittr: A Forward Pipe Operator for R|url=https://cran.r-project.org/package=magrittr|website=cran.r-project.org\\accessdate=13 July 2017}}</ref>|| {{no}}|| {{no}} || Array (multi-dimensional)\n|-\n| [[Racket (programming language)|Racket]] || 6 \n| {{yes}}<ref>[https://docs.racket-lang.org/guide/concurrency.html Racket Guide: Concurrency and Synchronization]</ref> || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}}|| {{yes}}|| {{no}} || {{yes}} || {{yes}}|| {{yes}} || {{yes}} || {{no}}|| {{no}}|| {{no}} || {{no}}\n|-\n| [[ROOP (programming language)|ROOP]] || 3 \n| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}} || {{no}}|| {{yes}} || {{yes}} || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}} || {{no}}\n|-\n| [[Ruby (programming language)|Ruby]] || 5 \n| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}}|| {{yes}} || {{no}}|| {{yes}} || {{no}} || {{yes}}|| {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}}|| {{no}}|| {{no}}|| {{no}}\n|-\n| [[Rust (programming language)|Rust]] (version 1.0.0-alpha) || 6\t\n| {{yes}}<ref group=\"a\" name=\"actor\" /> || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{yes}}|| {{yes}}<ref>{{cite web|title=The Rust macros guide|url=http://doc.rust-lang.org/1.0.0-alpha/book/macros.html|website=Rust|accessdate=19 January 2015|ref=rust-macros}}</ref><ref>{{cite web|title=The Rust compiler plugins guide|url=http://doc.rust-lang.org/1.0.0-alpha/book/plugins.html|website=Rust|accessdate=19 January 2015|ref=rust-plugins}}</ref>|| {{yes}}<ref>[http://doc.rust-lang.org/1.0.0-alpha/reference.html#generic-functions The Rust Reference \u00a76.1.3.1]</ref> || {{yes}}|| {{no}}|| {{no}}|| {{yes}}|| {{no}}|| {{no}}|| {{no}}|| linear, affline, and ownership types\n|- \n| [[Sather]]{{Citation needed|date=March 2007}} || 2 \n| {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}} || {{no}} || {{no}} || {{no}}\n|- \n| [[Scala (programming language)|Scala]]<ref>[http://www.scala-lang.org/sites/default/files/linuxsoft_archives/docu/files/ScalaOverview.pdf An Overview of the Scala Programming Language]</ref><ref>[https://wayback.archive-it.org/all/20171003043151/http://www.scala-lang.org/sites/default/files/linuxsoft_archives/docu/files/ScalaReference.pdf Scala Language Specification]</ref> || 9 \n| {{yes}}<ref group=\"a\" name=\"actor\">actor programming</ref> || {{no}} || {{yes}}<ref group=\"a\" name=\"akka\">[http://doc.akka.io/docs/akka/snapshot/scala/dataflow.html Akka] {{webarchive|url=https://web.archive.org/web/20130119045517/http://doc.akka.io/docs/akka/snapshot/scala/dataflow.html |date=2013-01-19 }}</ref> || {{yes}} || {{no}} || {{yes}}|| {{yes}} || {{yes}}|| {{yes}} || {{no}} || {{yes}}|| {{yes}}<ref group=\"a\" name=\"class\" />|| {{no}} || {{no}} || {{no}} || {{no}} \n|- \n| [[Simula]]{{Citation needed|date=March 2007}} || 2 \n| {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}} || {{no}} || {{no}} || {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}} || {{no}} || {{no}} || {{no}}\n|- \n| [[SISAL]]|| 3 \n| {{yes}} || {{no}}|| {{yes}} || {{no}}|| {{no}}|| {{yes}} || {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}}|| {{no}} || {{no}}|| {{no}}\n|- \n| [[Spreadsheet]]s || 2 \n| {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}} || {{no}} || {{no}} || {{no}} || {{no}} || {{no}}  || {{no}} || {{no}} || {{yes}} || {{no}}|| {{no}}\n|- \n| [[Swift (programming language)|Swift]] || 7\n| {{yes}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{no}} || {{yes}} || {{yes}}<ref group=\"a\" name=\"class\" /> || {{no}} || {{no}} || {{no}} || block-structured\n|- \n| [[Tcl]] with Snit extension {{Citation needed|date=March 2007}} || 3 \n| {{no}} || {{no}} || {{no}} || {{no}} || {{no}} || {{yes}}<ref>{{cite web|title=Tcl Programming/Introduction|url=https://en.wikibooks.org/wiki/Tcl_Programming/Introduction#One_language.2C_many_styles|website=en.wikibooks.org|accessdate=22 October 2016}}</ref> || {{no}} || {{no}} || {{yes}} || {{no}} || {{no}} || {{yes}}<ref group=\"a\" name=\"prototype\" /><ref>{{cite web|title=TCLLIB - Tcl Standard Library: snitfaq|url=http://tmml.sourceforge.net/doc/tcllib/snitfaq.html|website=sourceforge.net|accessdate=22 October 2016}}</ref> || {{no}} || {{no}} || {{no}} || {{no}}\n|- \n| [[Visual Basic .NET]] || 6 (7) \n| {{yes}}|| {{no}} || {{partial|Library}}<ref group=\"a\" name=\"tpldf\"/> || {{no}} || {{no}} || {{yes}} || {{no}} || {{yes}}|| {{yes}} || {{no}} || {{yes}}|| {{yes}}<ref group=\"a\" name=\"class\" />|| {{no}} || {{no}} || {{no}} || reactive<ref group=\"a\" name=\"rx\" />\n|-\n| [[Windows PowerShell]] || 6 \n| {{no}}|| {{no}} || {{no}}|| {{no}}|| {{no}}|| {{yes}} || {{no}}|| {{yes}} || {{yes}} || {{no}}|| {{yes}} || {{yes}}<ref group=\"a\" name=\"class\" /> || {{yes}}|| {{no}}|| {{no}}|| {{no}}\n|- \n| [[Wolfram Language]] & [[Mathematica]] || 13<ref>[http://www.wolfram.com/language/for-experts/ Notes for Programming Language Experts], Wolfram Language Documentation.</ref> (14)\n| {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}} || {{yes}}<ref>[https://reference.wolfram.com/language/tutorial/ExternalPrograms.html External Programs], Wolfram Language Documentation.</ref> || {{no}} || {{yes}} || Knowledge Based\n|}\n<!-- Row Template:\n|-\n| lang || count || concurrent || constrain || dataf || decl || dist || func || meta || generic || imp || logic || reflect || OO || pipeline || visual || rules || other\n{{yes}} {{no}} \n-->\n\n==See also==\n* [[Programming paradigm]]\n* [[Categorical list of programming languages]]\n* [[Domain-specific programming language]]\n* [[Domain-specific multimodeling]]\n\n==Notes==\n{{reflist|group=a}}\n\n==Citations==\n{{Reflist|30em}}\n\n==References==\n* Jim Coplien, ''Multiparadigm Design for C++'', Addison-Wesley Professional, 1998.\n\n{{Programming language}}\n\n{{DEFAULTSORT:List of multi-paradigm programming languages}}\n[[Category:Programming paradigms]]\n[[Category:Programming language comparisons]]\n", "name_user": "Trappist the monk", "label": "safe", "comment": "\u2192\u200eLanguage overview:remove 'invisible' characters from cs1|2 template parameters; (NBSP)", "url_page": "//en.wikipedia.org/wiki/Comparison_of_multi-paradigm_programming_languages"}
