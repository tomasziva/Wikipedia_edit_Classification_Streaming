{"title_page": "Petri net", "text_new": "{{Use dmy dates|date=May 2019|cs1-dates=y}}\nA '''Petri net''', also known as a '''place/transition (PT) net''', is one of several [[mathematical]] [[modeling language]]s for the description of [[distributed systems]].  It is a class of [[discrete event dynamic system]]. A Petri net is a directed [[bipartite graph]], in which the nodes represent transitions (i.e. events that may occur, represented by bars) and places (i.e. conditions, represented by circles). The directed arcs describe which places are pre- and/or postconditions for which transitions (signified by arrows).  Some sources<ref>{{cite journal | first1 = Carl Adam | last1 = Petri | first2 = Wolfgang | last2 = Reisig | date = 2008 | title = Petri net | journal = [[Scholarpedia]] | volume = 3 | issue = 4 | page = 6477 | doi=10.4249/scholarpedia.6477| doi-access = free }}</ref> state that Petri nets were invented in August 1939 by [[Carl Adam Petri]]\u2014at the age of 13\u2014for the purpose of describing chemical processes.\n\nLike industry standards such as [[Unified Modeling Language|UML]] [[activity diagram]]s, [[Business Process Model and Notation]] and [[event-driven process chain]]s, Petri nets offer a [[diagram|graphical notation]] for stepwise processes that include choice, [[iteration]], and [[Concurrent computing|concurrent execution]]. Unlike these standards, Petri nets have an exact mathematical definition of their execution semantics, with a well-developed mathematical theory for process analysis.\n\n[[Image:Animated Petri net commons.gif|thumb|(a) Petri net trajectory example]]\n\n== Petri net basics ==\nA Petri net consists of ''places'', ''transitions'', and ''[[graph theory|arc]]s''.  Arcs run from a place to a transition or vice versa, never between places or between transitions.  The places from which an arc runs to a transition are called the ''input places'' of the transition; the places to which arcs run from a transition are called the ''output places'' of the transition.\n\nGraphically, places in a Petri net may contain a discrete number of marks called ''tokens''.  Any distribution of tokens over the places will represent a configuration of the net called a ''marking''.  In an abstract sense relating to a Petri net diagram, a transition of a Petri net may ''fire'' if it is ''enabled'', i.e. there are sufficient tokens in all of its input places; when the transition fires, it consumes the required input tokens, and creates tokens in its output places.  A firing is atomic, i.e. a single non-interruptible step.\n\nUnless an ''execution policy'' {{Example needed|date=September 2018}} is defined, the execution of Petri nets is [[Nondeterministic algorithm|nondeterministic]]: when multiple transitions are enabled at the same time, they will fire in any order.\n\nSince firing is nondeterministic, and multiple tokens may be present anywhere in the net (even in the same place),  Petri nets are well suited for modeling the [[Concurrency (computer science)|concurrent]] behavior of distributed systems.\n\n== Formal definition and basic terminology ==\nPetri nets are [[State transition system|state-transition systems]] that extend a class of nets called elementary nets.<ref>{{cite book | first1 = G. | last1 = Rozenburg | first2 = J. | last2 = Engelfriet | chapter = Elementary Net Systems | editor1-first = W. | editor1-last = Reisig | editor2-first = G. | editor2-last = Rozenberg | title = Lectures on Petri Nets I: Basic Models \u2013 Advances in Petri Nets | volume = 1491 | series = Lecture Notes in Computer Science | publisher = Springer | date = 1998 | pages = 12\u2013121 }}</ref>\n\n'''Definition 1.''' A ''net'' is a [[Tuple|triple]] <math>N = (P, T, F)</math> where:\n# <math>P</math> and <math>T</math> are ''disjoint'' finite sets of ''places'' and ''transitions'', respectively.\n# <math>F \\subseteq (P \\times T) \\cup (T \\times P)</math> is a set of ''arcs'' (or flow relations).\n\n'''Definition 2.''' Given a net ''N'' = (''P'', ''T'', ''F''), a ''configuration'' is a set ''C'' so that ''C'' <big>\u2286</big> ''P''.\n\n[[File:Petri Net A.jpg|thumb|A Petri net with an enabled transition.]][[File:Petri Net B.jpg|thumb|The Petri net that follows after the transition fires (Initial Petri net in the figure above).]]\n'''Definition 3.''' An ''elementary net'' is a net of the form ''EN'' = (''N'', ''C'') where:\n# ''N'' = (''P'', ''T'', ''F'') is a net.\n# ''C'' is such that ''C'' <big>\u2286</big> ''P'' is a ''configuration''.\n\n'''Definition 4.''' A ''Petri net'' is a net of the form ''PN'' = (''N'', ''M'', ''W''), which extends the elementary net so that:\n# ''N'' = (''P'', ''T'', ''F'') is a net.\n# ''M'' : ''P'' <big>\u2192</big> ''Z'' is a place [[multiset]], where ''Z'' is a [[countable set]]. ''M'' extends the concept of ''configuration'' and is commonly described with reference to Petri net diagrams as a ''marking''.\n# ''W'' : ''F'' <big>\u2192</big> ''Z'' is an arc [[multiset]], so that the count (or weight) for each arc is a measure of the arc ''multiplicity''.\n\nIf a Petri net is equivalent to an elementary net, then ''Z'' can be the countable set {0,1} and those elements in ''P'' that map to 1 under ''M'' form a configuration. Similarly, if a Petri net is not an elementary net, then the [[multiset]] ''M'' can be interpreted as representing a non-singleton set of configurations. In this respect, ''M'' extends the concept of configuration for elementary nets to Petri nets.\n\nIn the diagram of a Petri net (see top figure right), places are conventionally depicted with circles, transitions with long narrow rectangles and arcs as one-way arrows that show connections of places to transitions or transitions to places. If the diagram were of an elementary net, then those places in a configuration would be conventionally depicted as circles, where each circle encompasses a single dot called a ''token''. In the given diagram of a Petri net (see right), the place circles may encompass more than one token to show the number of times a place appears in a configuration. The configuration of tokens distributed over an entire Petri net diagram is called a ''marking''.\n\nIn the top figure (see right), the place ''p''<sub>1</sub> is an input place of transition ''t''; whereas, the place ''p''<sub>2</sub> is an output place to the same transition. Let ''PN''<sub>0</sub> (top figure) be a Petri net with a marking configured ''M''<sub>0</sub>, and ''PN''<sub>1</sub> (bottom figure) be a Petri net with a marking configured ''M''<sub>1</sub>. The configuration of ''PN''<sub>0</sub> ''enables'' transition ''t'' through the property that all input places have sufficient number of tokens (shown in the figures as dots) \"equal to or greater\" than the multiplicities on their respective arcs to ''t''. Once and only once a transition is enabled will the transition fire. In this example, the ''firing'' of transition ''t'' generates a map that has the marking configured ''M''<sub>1</sub> in the image of ''M''<sub>0</sub> and results in Petri net ''PN''<sub>1</sub>, seen in the bottom figure. In the diagram, the firing rule for a transition can be characterised by subtracting a number of tokens from its input places equal to the multiplicity of the respective input arcs and accumulating a new number of tokens at the output places equal to the multiplicity of the respective output arcs.\n\n'''Remark 1.''' The precise meaning of \"equal to or greater\" will depend on the precise algebraic properties of addition being applied on ''Z'' in the firing rule, where subtle variations on the algebraic properties can lead to other classes of Petri nets; for example, algebraic Petri nets.<ref>{{cite journal | last1 = Reisig | first1 = Wolfgang | date = 1991 | title = Petri Nets and Algebraic Specifications | url = | journal = Theoretical Computer Science | volume = 80 | issue = 1| pages = 1\u201334 | doi=10.1016/0304-3975(91)90203-e}}</ref>\n\nThe following formal definition is loosely based on {{harv|Peterson|1981}}.  Many alternative definitions exist.\n\n=== Syntax ===\n\nA '''Petri net graph''' (called ''Petri net'' by some, but see below) is a 3-[[tuple]] <math>(S,T,W)</math>, where\n* ''S'' is a [[finite set]] of ''places''\n* ''T'' is a finite set of ''transitions''\n* ''S'' and ''T'' are [[Disjoint sets|disjoint]], i.e. no object can be both a place and a transition\n* <math>W: (S \\times T) \\cup (T \\times S) \\to \\mathbb{N}</math> is a [[multiset]] of [[directed edge|arc]]s, i.e. it assigns to each arc a non-negative integer ''arc multiplicity'' (or weight); note that no arc may connect two places or two transitions.\n\nThe ''flow relation'' is the set of arcs: <math> F = \\{ (x,y) \\mid W(x,y) > 0 \\}</math>.  In many textbooks, arcs can only have multiplicity 1. These texts often define Petri nets using ''F'' instead of ''W''.  When using this convention, a Petri net graph is a [[bipartite graph|bipartite]] [[multigraph]] <math>(S \\cup T, F)</math> with node partitions ''S'' and ''T''.\n\nThe ''preset'' of a transition ''t'' is the set of its ''input places'': <math>{}^{\\bullet}t = \\{ s \\in S \\mid W(s,t) > 0 \\}</math>;\nits ''postset'' is the set of its ''output places'': <math>t^{\\bullet} = \\{ s \\in S \\mid W(t,s) > 0 \\}</math>. Definitions of pre- and postsets of places are analogous.\n\nA ''marking'' of a Petri net (graph) is a multiset of its places, i.e., a mapping <math>M: S \\to \\mathbb{N}</math>.  We say the marking assigns to each place a number of ''tokens''.\n\nA '''Petri net''' (called ''marked Petri net'' by some, see above) is a 4-tuple <math>(S,T,W,M_0)</math>, where\n* <math>(S,T,W)</math> is a Petri net graph;\n* <math>M_0</math> is the ''initial marking'', a marking of the Petri net graph.\n\n=== Execution semantics ===\n\nIn words:\n* firing a transition {{mvar|t}} in a marking {{mvar|M}} consumes <math>W(s,t)</math> tokens from each of its input places {{mvar|s}}, and produces <math>W(t,s)</math> tokens in each of its output places {{mvar|s}}\n* a transition is ''enabled'' (it may ''fire'') in {{mvar|M}} if there are enough tokens in its input places for the consumptions to be possible, i.e. if and only if <math>\\forall s: M(s) \\geq W(s,t)</math>.\n\nWe are generally interested in what may happen when transitions may continually fire in arbitrary order.\n\nWe say that a marking {{mvar|M'}} ''is reachable from'' a marking {{mvar|M}} ''in one step'' if <math>M \\underset{G}{\\longrightarrow} M'</math>; we say that it ''is reachable from {{mvar|M}}'' if <math>M \\overset{*}{\\underset{G}{\\longrightarrow}} M'</math>, where <math>\\overset{*}{\\underset{G}{\\longrightarrow}}</math> is the [[reflexive transitive closure]] of <math>\\underset{G}{\\longrightarrow}</math>; that is, if it is reachable in 0 or more steps.\n\nFor a (marked) Petri net <math>N=(S,T,W,M_0)</math>, we are interested in the firings that can be performed starting with the initial marking <math>M_0</math>.  Its set of ''reachable markings'' is the set\n<math>R(N) \\ \\stackrel{D}{=}\\ \\left\\{ M' \\Bigg| M_0 \\xrightarrow[(S,T,W)]{*} M' \\right\\} </math>\n\nThe ''reachability graph'' of {{mvar|N}} is the transition relation <math>\\underset{G}{\\longrightarrow}</math> restricted to its reachable markings <math>R(N)</math>.  It is the [[state space]] of the net.\n\nA ''firing sequence'' for a Petri net with graph {{mvar|G}} and initial marking <math>M_0</math> is a sequence of transitions <math>\\vec \\sigma = \\langle t_{1} \\cdots t_{n} \\rangle</math> such that <math>M_0 \\xrightarrow[G,t_{1}]{} M_1 \\wedge \\cdots \\wedge M_{n-1} \\xrightarrow[G,t_{n}]{} M_n</math>.  The set of firing sequences is denoted as <math>L(N)</math>.\n\n== Variations on the definition ==\n\nAs already remarked, a common variation is to disallow arc multiplicities and replace the [[multiset|bag]] of arcs ''W'' with a simple set, called the ''flow relation'', <math>F \\subseteq (S \\times T) \\cup (T \\times S)</math>.\nThis doesn't limit [[expressive power (computer science)|expressive power]] as both can represent each other.\n\nAnother common variation, e.g. in, Desel and Juh\u00e1s (2001),<ref>{{cite book | last1 = Desel | first1 = J\u00f6rg | last2 = Juh\u00e1s | first2 = Gabriel | chapter = What Is a Petri Net? Informal Answers for the Informed Reader | editor1-first = Hartmut | editor1-last = Ehrig | title = Unifying Petri Nets | series = LNCS | volume = 2128 | pages = 1\u201325 | date = 2001 |publisher=Springer | doi = 10.1007/3-540-45541-8_1 |display-editors=etal| isbn = 9783540430674 }}</ref> is to allow ''capacities'' to be defined on places.  This is discussed under ''extensions'' below.\n\n== Formulation in terms of vectors and matrices ==\n\nThe markings of a Petri net <math>(S,T,W,M_0)</math> can be regarded as [[Vector (mathematics)|vector]]s of nonnegative integers of length <math>|S|</math>.\n\nIts transition relation can be described as a pair of <math>|S|</math> by <math>|T|</math> [[matrix (mathematics)|matrices]]:\n* <math>W^-</math>, defined by <math>\\forall s,t: W^-[s,t] = W(s,t)</math>\n* <math>W^+</math>, defined by <math>\\forall s,t: W^+[s,t] = W(t,s).</math>\nThen their difference\n* <math> W^T = - W^- + W^+</math>\ncan be used to describe the reachable markings in terms of matrix multiplication, as follows.\nFor any sequence of transitions {{mvar|w}}, write <math>o(w)</math> for the vector that maps every transition to its number of occurrences in {{mvar|w}}.  Then, we have\n* <math>R(N) = \\{ M \\mid \\exists w:\\ w \\text{ is a firing sequence of } N\\ \\text{ and }\\ M = M_0 + W^T \\cdot o(w) \\}</math>.<!-- the \\!s make the \\{ and \\} the same size. -->\n\nNote that it must be required that {{mvar|w}} is a firing sequence; allowing arbitrary sequences of transitions will generally produce a larger set.\n\n[[Image:detailed petri net.png|frame|(b) Petri net Example]] \n<math display=\"block\">\nW^{-}=\\begin{bmatrix} * & t1 & t2 \\\\ p1 & 1  & 0 \\\\ p2 & 0 & 1 \\\\ p3 & 0 & 1 \\\\ p4 & 0 & 0 \\end{bmatrix}, \\ \nW^{+}=\\begin{bmatrix} * & t1 & t2 \\\\ p1 & 0  & 1 \\\\ p2 & 1 & 0 \\\\ p3 & 1& 0 \\\\ p4 & 0 & 1 \\end{bmatrix}, \\ \nW^T=\\begin{bmatrix} * & t1 & t2 \\\\ p1 & -1  & 1 \\\\ p2 & 1 & -1 \\\\ p3 & 1 & -1 \\\\ p4 & 0 & 1 \\end{bmatrix}\n</math>\n\n<math display=\"block\">\nM_{0}=\\begin{bmatrix} 1 & 0 & 2 & 1 \\end{bmatrix}\n</math>\n\n== Mathematical properties of Petri nets ==\n\nOne thing that makes Petri nets interesting is that they provide a balance between modeling power and analyzability: many things one would like to know about concurrent systems can be automatically determined for Petri nets, although some of those things are very expensive to determine in the general case.  Several subclasses of Petri nets have been studied that can still model interesting classes of concurrent systems, while these problems become easier.\n\nAn overview of such [[decision problem]]s, with decidability and complexity results for Petri nets and some subclasses, can be found in\nEsparza and Nielsen (1995).<ref>{{cite journal | url = http://citeseer.ist.psu.edu/226920.html | title = Decidability issues for Petri nets \u2013 a survey | first1 = Javier | last1 = Esparza | first2 = Mogens | last2 = Nielsen | journal = Bulletin of the EATCS | origyear = 1994 | edition = Revised | date = 1995 |accessdate=2014-05-14}}</ref>\n\n=== Reachability ===\nThe [[reachability problem]] for Petri nets is to decide, given a Petri net ''N'' and a marking ''M'', whether <math>M \\in  R(N)</math>.\n\nClearly, this is a matter of walking the reachability graph defined above, until either we reach the requested marking or we know it can no longer be found.  This is harder than it may seem at first: the reachability graph is generally infinite, and it is not easy to determine when it is safe to stop.\n\nIn fact, this problem was shown to be [[EXPSPACE]]-hard<ref>{{cite journal | last = Lipton | first = R. | url = http://citeseer.ist.psu.edu/contextsummary/115623/0 | title = The Reachability Problem Requires Exponential Space | journal = Technical Report 62 | date = 1976 }}</ref> years before it was shown to be decidable at all (Mayr, 1981).  Papers continue to be published on how to do it efficiently.<ref>{{cite conference | first = P. | last = K\u00fcngas | url = http://www.idi.ntnu.no/%7Epeep/papers/SARA2005Kung.ps | title = Petri Net Reachability Checking Is Polynomial with Optimal Abstraction Hierarchies | conference = Proceedings of the 6th International Symposium on Abstraction, Reformulation and Approximation\u2014SARA 2005 | location = Airth Castle, Scotland, UK | date = July 26\u201329, 2005 | access-date = 10 July 2008 | archive-url = https://web.archive.org/web/20120209084910/http://www.idi.ntnu.no/%7Epeep/papers/SARA2005Kung.ps | archive-date = 9 February 2012 | url-status = dead }}</ref> In 2018, Czerwinski et al. improved the lower bound and showed that the problem is not [[ELEMENTARY]].<ref>{{cite arxiv |eprint=1809.07115|last1=Czerwinski|first1=Wojciech|title=The Reachability Problem for Petri Nets is Not Elementary (Extended Abstract)|last2=Lasota|first2=Slawomir|last3=Lazic|first3=Ranko|last4=Leroux|first4=Jerome|last5=Mazowiecki|first5=Filip|class=cs.FL|year=2018}}</ref>\n\nWhile reachability seems to be a good tool to find erroneous states, for practical problems the constructed graph usually has far too many states to calculate. To alleviate this problem, [[linear temporal logic]] is usually used in conjunction with the [[Method of analytic tableaux|tableau method]] to prove that such states cannot be reached. Linear temporal logic uses the [[semi-decision procedure|semi-decision technique]] to find if indeed a state can be reached, by finding a set of necessary conditions for the state to be reached then proving that those conditions cannot be satisfied.\n\n=== Liveness ===\n\n[[Image:liveness-levels.gif|thumb|right|A Petri net in which transition <math>t_0</math> is dead, while for all <math>j>0,</math> <math>t_j</math> is <math>L_j</math>-live]]\n\nPetri nets can be described as having different degrees of liveness <math>L_1 - L_4</math>. A Petri net <math>(N, M_0)</math> is called <math>L_k</math>-live [[if and only if]] all of its transitions are <math>L_k</math>-live, where a transition is\n* ''dead'', if it can never fire, i.e. it is not in any firing sequence in <math>L(N,M_0)</math>\n* <math>L_1</math>-live (''potentially fireable''), if and only if it may fire, i.e. it is in some firing sequence in <math>L(N,M_0)</math>\n* <math>L_2</math>-live if it can fire arbitrarily often, i.e. if for every positive integer {{mvar|k}}, it occurs at least {{mvar|k}} times in some firing sequence in <math>L(N,M_0)</math>\n* <math>L_3</math>-live if it can fire infinitely often, i.e. if there is some fixed (necessarily infinite) firing sequence in which for every positive integer {{mvar|k}}, the transition <math>L_3</math> occurs at least {{mvar|k}} times,\n* <math>L_4</math>-live (''live'') if it may always fire, i.e. it is <math>L_1</math>-live in every reachable marking in <math>R(N,M_0)</math>\n\nNote that these are increasingly stringent requirements: <math>L_{j+1}</math>-liveness implies <math>L_j</math>-liveness, for <math display=\"inline\">\\textstyle{j \\in {1,2,3}}</math>.\n\nThese definitions are in accordance with Murata's overview,<ref>{{cite journal | url = http://www.cs.uic.edu/bin/view/Murata/Publications | title = Petri Nets: Properties, Analysis and Applications | first = Tadao | last = Murata | journal = Proceedings of the IEEE | volume = 77 | issue = 4 | pages = 541\u2013558 | date = April 1989 | accessdate = 2014-10-13 | doi=10.1109/5.24143}}</ref> which additionally uses <math>L_0</math>''-live'' as a term for ''dead''.\n\n=== Boundedness ===\n[[File:Reachability graph for petri net.png|right|frame|width=50px|The reachability graph of ''N2''.]]\n\nA place in a Petri net is called ''k-bounded'' if it does not contain more than ''k'' tokens in all reachable markings, including the initial marking; it is said to be ''safe'' if it is 1-bounded; it is ''[[bounded set|bounded]]'' if it is ''k-bounded'' for some ''k''.\n\nA (marked) Petri net is called ''k''-bounded, ''safe'', or ''bounded'' when all of its places are.\nA Petri net (graph) is called ''(structurally) bounded'' if it is bounded for every possible initial marking.\n\nNote that a Petri net is bounded if and only if its reachability graph is finite.\n\nBoundedness is decidable by looking at [[covering problem|covering]], by constructing the [[Richard Karp|Karp]]\u2013Miller Tree.\n\nIt can be useful to explicitly impose a bound on places in a given net.\nThis can be used to model limited system resources.\n\nSome definitions of Petri nets explicitly allow this as a syntactic feature.<ref>\n{{cite web\n  |url=http://www.techfak.uni-bielefeld.de/~mchen/BioPNML/Intro/pnfaq.html\n  |ref=harv\n  |title=Petri Nets\n  |website = www.techfak.uni-bielefeld.de\n}}\n</ref>\nFormally, ''Petri nets with place capacities'' can be defined as tuples <math>(S,T,W,C,M_0)</math>, where <math>(S,T,W,M_0)</math> is a Petri net, <math>C: P \\rightarrow\\!\\!\\!\\shortmid \\mathbb N</math> an assignment of capacities to (some or all) places, and the transition relation is the usual one restricted to the markings in which each place with a capacity has at most that many tokens.\n\n[[File:Two-boundedness-ub.png|right|frame|An unbounded Petri net, ''N''.]]\n\nFor example, if in the net ''N'', both places are assigned capacity 2, we obtain a Petri net with place capacities, say ''N2''; its reachability graph is displayed on the right.\n\n[[File:Two-boundedness-cb.png|right|frame|A two-bounded Petri net, obtained by extending ''N'' with \"counter-places\".]]\n\nAlternatively, places can be made bounded by extending the net.  To be exact,\na place can be made ''k''-bounded by adding a \"counter-place\" with flow opposite to that of the place, and adding tokens to make the total in both places ''k''.\n\n==Discrete, continuous, and hybrid Petri nets==\n\nAs well as for discrete events, there are Petri nets for continuous and hybrid discrete-continuous processes that are useful in discrete, continuous and hybrid [[control theory]],<ref>{{cite book | url = https://books.google.com/books?id=VsS0JkMcXGwC | title = Discrete, continuous, and hybrid Petri Nets | first1 = Ren\u00e9 | last1 = David | first2 = Hassane | last2 = Alla | publisher = Springer | date = 2005 | isbn = 978-3-540-22480-8 }}</ref> and related to discrete, continuous and hybrid [[automata theory|automata]].\n\n==Extensions==\nThere are many extensions to Petri nets. Some of them are completely backwards-compatible (e.g. [[coloured Petri nets]]) with the original Petri net, some add properties that cannot be modelled in the original Petri net formalism (e.g. timed Petri nets). Although backwards-compatible models do not extend the computational power of Petri nets, they may have more succinct representations and may be more convenient for modeling.<ref>{{cite book|last1=Jensen|first1=Kurt|authorlink= Kurt Jensen (computer scientist)|title=A brief introduction to colored Petri nets|volume=1217|pages=203\u2013208|chapter-url=https://link.springer.com/content/pdf/10.1007/BFb0035389.pdf|doi=10.1007/BFb0035389|chapter=A brief introduction to coloured Petri Nets|series=Lecture Notes in Computer Science|year=1997|isbn=978-3-540-62790-6}}</ref> Extensions that cannot be transformed into Petri nets are sometimes very powerful, but usually lack the full range of mathematical tools available to analyse ordinary Petri nets.\n\nThe term  [[high-level Petri net]] is used for many Petri net formalisms that extend the basic P/T net formalism; this includes coloured Petri nets, hierarchical Petri nets such as [[Nets within Nets]], and all other extensions sketched in this section.  The term is also used specifically for the type of coloured nets supported by [[CPN Tools]].\n\nA short list of possible extensions:\n\n*Additional types of arcs; two common types are:\n**a ''reset arc'' does not impose a precondition on firing, and empties the place when the transition fires; this makes reachability undecidable,<ref>{{cite journal | first1 = T. | last1 = Araki | first2 = T. | last2 = Kasami | title = Some Decision Problems Related to the Reachability Problem for Petri Nets | journal = Theoretical Computer Science | volume = 3 | issue = 1 | pages = 85\u2013104 | date = 1977 | doi=10.1016/0304-3975(76)90067-0}}</ref> while some other properties, such as termination, remain decidable;<ref>{{cite book | first1 = C. | last1 = Dufourd | first2 = A. | last2 = Finkel | first3 = Ph. | last3 =Schnoebelen | chapter = Reset Nets Between Decidability and Undecidability | title = Proceedings of the 25th International Colloquium on Automata, Languages and Programming | series = [[Lecture Notes in Computer Science|LNCS]] | volume = 1443 | pages = 103\u2013115 | date = 1998 }}</ref>\n**an ''inhibitor arc'' imposes the precondition that the transition may only fire when the place is empty; this allows arbitrary computations on numbers of tokens to be expressed, which makes the formalism [[Turing complete]] and implies existence of a universal net.<ref>{{cite journal | last = Zaitsev | first = D. A. | title = Toward the Minimal Universal Petri Net | journal = IEEE Transactions on Systems, Man, and Cybernetics: Systems | date = 2013 | pages = 47\u201358 | doi = 10.1109/TSMC.2012.2237549 | volume=44}}</ref>\n*In a standard Petri net, tokens are indistinguishable.  In a [[Coloured Petri net]], every token has a value.<ref>{{cite web | url = http://www.daimi.au.dk/CPnets/intro/verybrief.html | title = Very Brief Introduction to CP-nets | publisher = Department of Computer Science, University of Aarhus, Denmark }}</ref>  In popular tools for coloured Petri nets such as [[CPN Tools]], the values of tokens are typed, and can be tested (using ''guard'' expressions) and manipulated with a [[functional programming language]]. A subsidiary of coloured Petri nets are the [[well-formed Petri net]]s, where the arc and guard expressions are restricted to make it easier to analyse the net.\n*Another popular extension of Petri nets is hierarchy; this in the form of different views supporting levels of refinement and abstraction was studied by Fehling. Another form of hierarchy is found in so-called object Petri nets or object systems  where a Petri net can contain Petri nets as its tokens inducing a hierarchy of nested Petri nets that communicate by synchronisation of transitions on different levels. See<ref>{{cite web |url=http://llpn.com/OPNs.html |title=Archived copy |accessdate=2006-01-06 |url-status=dead |archiveurl=https://web.archive.org/web/20051103131745/http://www.llpn.com/OPNs.html |archivedate=2005-11-03 }}</ref> for an informal introduction to object Petri nets.\n*A [[Vector addition system|vector addition system with states (VASS)]] is an equivalent formalism to Petri nets.  However, it can be superficially viewed as a generalisation of Petri nets. Consider a [[finite state automaton]] where each transition is labelled by a transition from the Petri net. The Petri net is then synchronised with the finite state automaton, i.e., a transition in the automaton is taken at the same time as the corresponding transition in the Petri net. It is only possible to take a transition in the automaton if the corresponding transition in the Petri net is enabled, and it is only possible to fire a transition in the Petri net if there is a transition from the current state in the automaton labelled by it. (The definition of VASS is usually formulated slightly differently.)\n*[[Prioritised Petri net]]s add priorities to transitions, whereby a transition cannot fire, if a higher-priority transition is enabled (i.e. can fire). Thus, transitions are in priority groups, and e.g. priority group 3 can only fire if all transitions are disabled in groups 1 and 2. Within a priority group, firing is ''still'' non-deterministic.\n*The non-deterministic property has been a very valuable one, as it lets the user abstract a large number of properties (depending on what the net is used for). In certain cases, however, the need arises to also model the timing, not only the structure of a model. For these cases, [[timed Petri nets]] have evolved, where there are transitions that are timed, and possibly transitions which are not timed (if there are, transitions that are not timed have a higher priority than timed ones). A subsidiary of timed Petri nets are the [[stochastic Petri net]]s that add [[nondeterministic time]] through adjustable randomness of the transitions. The [[Exponential distribution|exponential random distribution]] is usually used to 'time' these nets. In this case, the nets' reachability graph can be used as a continuous time [[Markov chain]] (CTMC).\n*[[Dualistic Petri Nets]] (dP-Nets) is a Petri Net extension developed by E. Dawis, et al.<ref>{{cite conference | last1 = Dawis | first1 = E. P. | first2 = J. F. | last2 = Dawis | first3 = Wei-Pin | last3 = Koo | date = 2001 | title = Architecture of Computer-based Systems using Dualistic Petri Nets | conference = 2001 IEEE International Conference on Systems, Man, and Cybernetics | volume = 3 | pages = 1554\u20131558 }}</ref> to better represent real-world process.  dP-Nets balance the duality of change/no-change, action/passivity, (transformation) time/space, etc., between the bipartite Petri Net constructs of transformation and place resulting in the unique characteristic of ''transformation marking'', i.e., when the transformation is \"working\" it is marked.  This allows for the transformation to fire (or be marked) multiple times representing the real-world behavior of process throughput.  Marking of the transformation assumes that transformation time must be greater than zero.  A zero transformation time used in many typical Petri Nets may be mathematically appealing but impractical in representing real-world processes.  dP-Nets also exploit the power of Petri Nets' hierarchical abstraction to depict [[Process architecture]].  Complex process systems are modeled as a series of simpler nets interconnected through various levels of hierarchical abstraction.  The process architecture of a packet switch is demonstrated in,<ref>{{cite conference | last = Dawis | first = E. P. | date = 2001 | title = Architecture of an SS7 Protocol Stack on a Broadband Switch Platform using Dualistic Petri Nets | conference = 2001 IEEE Pacific Rim Conference on Communications, Computers and signal Processing | volume = 1 | pages = 323\u2013326 }}</ref> where development requirements are organized around the structure of the designed system.\n\nThere are many more extensions to Petri nets, however, it is important to keep in mind, that as the complexity of the net increases in terms of extended properties, the harder it is to use standard tools to evaluate certain properties of the net. For this reason, it is a good idea to use the most simple net type possible for a given modelling task.\n\n== Restrictions ==\n[[Image:petri net types.svg|thumb|Petri net types graphically]]\n\nInstead of extending the Petri net formalism, we can also look at restricting it, and look at particular types of Petri nets, obtained by restricting the syntax in a particular way.  Ordinary Petri nets are the nets where all arc weights are 1.  Restricting further, the following types of ordinary Petri nets are commonly used and studied:\n\n# In a [[state machine]] (SM), every transition has one incoming arc, and one outgoing arc, and all markings have exactly one token. As a consequence, there can ''not'' be ''concurrency'', but there can be ''conflict'' (i.e. [[Indeterminacy in concurrent computation|nondeterminism]]). Mathematically: <math>\\forall t\\in T: |t^\\bullet|=|{}^\\bullet t|=1</math>\n# In a [[marked graph]] (MG), every place has one incoming arc, and one outgoing arc. This means, that there can ''not'' be ''conflict'', but there can be ''concurrency''. Mathematically: <math>\\forall s\\in S: |s^\\bullet|=|{}^\\bullet s|=1</math>\n# In a ''free choice'' net (FC), every arc from a place to a transition is either the only arc from that place or the only arc to that transition, i.e. there can be ''both concurrency and conflict, but not at the same time''. Mathematically: <math>\\forall s\\in S: (|s^\\bullet|\\leq 1) \\vee ({}^\\bullet (s^\\bullet)=\\{s\\})</math>\n# Extended free choice (EFC) \u2013 a Petri net that can be ''transformed into an FC''.\n# In an ''asymmetric choice'' net (AC), concurrency and conflict (in sum, ''confusion'') may occur, but ''not symmetrically''. Mathematically: <math>\\forall s_1,s_2\\in S: (s_1{}^\\bullet \\cap s_2{}^\\bullet\\neq \\emptyset) \\to [(s_1{}^\\bullet\\subseteq s_2{}^\\bullet) \\vee (s_2{}^\\bullet\\subseteq s_1{}^\\bullet)]</math>\n<!-- the next definition needs to be cleaned up by someone who understands what is meant here\n# In a ''multiple asymmetric choice'' net (MAC), multiple concurrency and conflict (in sum, ''multiple confusion'') may occur, but no ''confusion''. Mathematically: ''for a set |P|=k,'' <math>\\forall t\\in T </math> exist a subset <math> {}^\\bullet t,</math> and  <math> {}^\\bullet T </math> contains all subsets and is the powerset 2<sup>''k''</sup> without the empty subset\n-->\n\n==Work flow nets==\n[[Workflow net]]s (WF-nets) are a subclass of Petri nets intending to model the [[workflow]] of process activities.<ref name=\"Aalst,1998\">{{cite journal | last = van der Aalst | first = W. M. P. | date = 1998 | url = http://wwwis.win.tue.nl/~wvdaalst/publications/p53.pdf | title = The application of Petri nets to workflow management | journal = Journal of Circuits, Systems and Computers | volume = 8 | issue = 1 | pages = 21\u201366 | doi=10.1142/s0218126698000043| citeseerx = 10.1.1.30.3125 }}</ref> \nThe WF-net transitions are assigned to tasks or activities, and places are assigned to the pre/post conditions.\nThe WF-nets have additional structural and operational requirements, mainly the addition of a single input (source) place with no previous transitions, and output place (sink) with no following transitions. Accordingly, start and termination markings can be defined that represent the process status.\n\nWF-nets have the '''soundness''' property,<ref name=\"Aalst,1998\" /> indicating that a process with a start marking of ''k'' tokens in its source place, can reach the termination state marking with ''k'' tokens in its sink place (defined as ''k''-sound WF-net). Additionally, all the transitions in the process could fire (i.e., for each transition there is a reachable state in which the transition is enabled). \nA general sound (G-sound) WF-net is defined as being ''k''-sound for every ''k'' > 0.<ref name=\"Hee et al., 2003\">{{cite book | last1 = van Hee | first1 = K. | last2 = Sidorova | first2 = N. | last3 = Voorhoeve | first3 = M. | date = 2003 | chapter-url = http://www.win.tue.nl/~sidorova/03/van_Hee_Sidorova_Voorhoeve.pdf | chapter = Soundness and separability of workflow nets in the stepwise refinement approach | editor1-last = van der Aalst | editor1-first = W. M. P. | editor2-last = Best | editor2-first =E. | title = Application and Theory of Petri Nets 2003 | series = Lect Notes in Comput Sci | volume = 2678 | pages = 337\u2013356 | publisher = Springer }}</ref>\n\nA directed '''[[Path (graph theory)|path]]''' in the Petri net is defined as the sequence of nodes (places and transitions) linked by the directed arcs. An '''elementary path''' includes every node in the sequence only once.\n\nA '''well-handled''' Petri net is a net in which there are no fully distinct elementary paths between a place and a transition (or transition and a place), i.e., if there are two paths between the pair of nodes then these paths share a node.\nAn acyclic well-handled WF-net is sound (G-sound).<ref name=\"Ping et al., 2004\">{{cite conference | last1 = Ping | first1 = L. | last2 = Hao | first2 = H. | last3 = Jian | first3 =L. | date = 2004 | title = On 1-soundness and soundness of workflow nets | editor-first = Daniel | editor-last = Moldt | conference = Proc of the 3rd Workshop on Modelling of Objects, Components, and Agents | location = Aarhus, Denmark | publisher = DAIMI PB | volume = 571 | pages = 21\u201336 }}</ref>\n\nExtended WF-net is a Petri net that is composed of a WF-net with additional transition t (feedback transition). The sink place is connected as the input place of transition t and the source place as its output place. Firing of the transition causes iteration of the process (Note: the extended WF-net is not a WF-net).<ref name=\"Aalst,1998\" /> \n \nWRI (Well-handled with Regular Iteration) WF-net, is an extended acyclic well-handled WF-net.  \nWRI-WF-net can be built as composition of nets, i.e., replacing a transition within a WRI-WF-net with a subnet which is a WRI-WF-net. The result is also WRI-WF-net. WRI-WF-nets are G-sound,<ref name=\"Ping et al., 2004\" /> therefore by using only WRI-WF-net building blocks, one can get WF-nets that are G-sound by construction.\n\nThe [[Design structure matrix]] (DSM) can model process relations, and be utilized for process planning. The '''DSM-nets''' are realization of DSM-based plans into workflow processes by Petri nets, and are equivalent to WRI-WF-nets. The DSM-net construction process ensures the soundness property of the resulting net.\n\n==Other models of concurrency==\n\nOther ways of modelling concurrent computation have been proposed, including [[process algebra]], the [[actor model]], and [[trace theory]].<ref>{{cite book | first = Antoni | last = Mazurkiewicz | chapter = Introduction to Trace Theory | title = The Book of Traces | editor1-first = V. | editor1-last = Diekert | editor2-first = G. | editor2-last = Rozenberg | publisher = World Scientific | location = Singapore | date = 1995 | pages = 3\u201367 }}</ref> Different models provide tradeoffs of concepts such as [[compositionality]], [[Modularity (programming)|modularity]], and locality.\n\nAn approach to relating some of these models of concurrency is proposed in the chapter by Winskel and Nielsen.<ref>{{cite book | first1 = G. | last1 = Winskel | first2 = M. | last2 = Nielsen | chapter-url = https://web.archive.org/web/20200504155703/https://www.cl.cam.ac.uk/~gw104/winskel-nielsen-models-for-concurrency.pdf | chapter = Models for Concurrency | title = Handbook of Logic and the Foundations of Computer Science | volume = 4 | pages = 1\u2013148 | publisher = OUP }}</ref>\n\n== Application areas ==\n* [[Business Process Modeling]]\n* [[Concurrent programming]]\n* [[Data analysis]]\n* [[Diagnosis (Artificial intelligence)]]\n* [[Boolean differential calculus]]\n* [[Sequential function chart|Discrete process control]]\n* [[Kahn process networks]]\n* [[Process modeling]]\n* [[Reliability engineering]]\n* [[Simulation]]\n* [[Software design]]\n* [[Workflow management system]]s\n* [[Game theory]]\n\n== See also ==\n* [[Communicating finite-state machine]]\n* [[Finite-state machine]]\n* [[Kahn process networks]]\n* [[Petri Net Markup Language]]\n* [[Petriscript]]\n* [[Process architecture]]\n* [[Vector addition system]]\n\n== References ==\n{{reflist|30em}}\n\n== Further reading ==\n*{{cite book\n  | last = Cardoso\n  | first = Janette\n  | first2 = Heloisa | last2 = Camargo\n  | date =1999\n  | title = Fuzziness in Petri Nets\n  | publisher = Physica-Verlag\n  | isbn = 978-3-7908-1158-2}}\n*{{cite journal\n  | last = Grobelna\n  | first = Iwona\n  | title= Formal verification of embedded logic controller specification with computer deduction in temporal logic\n  | journal= Przeglad Elektrotechniczny\n  | date = 2011\n  | volume = 87\n  | issue = 12a\n  | pages=47\u201350}}\n*{{cite book\n  | last = Jensen\n  | first = Kurt\n  | date =1997\n  | title = Coloured Petri Nets\n  | url = https://archive.org/details/springer_10.1007-978-3-642-60794-3\n  | publisher = Springer Verlag\n  | isbn = 978-3-540-62867-5}}\n*{{cite book\n  | last = \u041a\u043e\u0442\u043e\u0432\n  | first = \u0412\u0430\u0434\u0438\u043c\n  | date = 1984\n  | title = \u0421\u0435\u0442\u0438 \u041f\u0435\u0442\u0440\u0438 (Petri Nets, in Russian)\n  | publisher = \u041d\u0430\u0443\u043a\u0430, \u041c\u043e\u0441\u043a\u0432\u0430\n  }}\n*{{cite book\n  | last = Pataricza\n  | first = Andr\u00e1s\n  | date = 2004\n  | title = Form\u00e1lis m\u00f3dszerek az informatik\u00e1ban (Formal methods in informatics)\n  | publisher = TYPOTEX Kiad\u00f3\n  | isbn = 978-963-9548-08-4}}\n*{{cite journal\n  | last =Peterson\n  | first = James L.\n  | title=Petri Nets\n  | journal=ACM Computing Surveys\n  | date = 1977\n  | volume=9\n  | issue=3\n  | pages=223\u2013252\n  | doi =10.1145/356698.356702| hdl = 10338.dmlcz/135597\n | hdl-access=free\n  }}\n*{{Cite book\n  | last = Peterson\n  | first = James Lyle\n  | date = 1981\n  | title = Petri Net Theory and the Modeling of Systems\n  | publisher = Prentice Hall\n  | ref = harv\n  | isbn = 978-0-13-661983-3}}\n*{{Cite thesis\n  | last = Petri | first = Carl A.\n  | title=Kommunikation mit Automaten\n  | publisher=University of Bonn\n  | date = 1962\n  | degree = Ph. D.\n  }}\n*{{cite journal\n  | last = Petri\n  | first = Carl Adam\n  | last2 = Reisig\n  | first2 = Wolfgang\n  | title = Petri net\n  | journal = Scholarpedia |volume = 3 | issue = 4 | page = 6477\n  | doi=10.4249/scholarpedia.6477| year = 2008\n  | doi-access = free\n  }}\n*{{cite book\n  | last = Reisig\n  | first = Wolfgang\n  | date =1992\n  | title = A Primer in Petri Net Design\n  | publisher = Springer-Verlag\n  | isbn = 978-3-540-52044-3}}\n*{{cite book\n  | last = Riemann\n  | first = Robert-Christoph\n  | date =1999\n  | title = Modelling of Concurrent Systems: Structural and Semantical Methods in the High Level Petri Net Calculus\n  | publisher = Herbert Utz Verlag\n  | isbn = 978-3-89675-629-9}}\n*{{cite book\n  | last = St\u00f6rrle\n  | first = Harald\n  | date =2000\n  | title = Models of Software Architecture \u2013 Design and Analysis with UML and Petri-Nets\n  | publisher = Books on Demand\n  | isbn = 978-3-8311-1330-9}}\n*{{cite book\n  | last = Zhou\n  | first = Mengchu |authorlink1=Mengchu Zhou\n  | first2=Frank | last2 = Dicesare\n  | date =1993\n  | title = Petri Net Synthesis for Discrete Event Control of Manufacturing Systems\n  | publisher = Kluwer Academic Publishers\n  | isbn = 978-0-7923-9289-7}}\n*{{cite book\n  | last = Zhou\n  | first = Mengchu |authorlink1=Mengchu Zhou\n  | first2 = Kurapati | last2 = Venkatesh\n  | date =1998\n  | title = Modeling, Simulation, & Control of Flexible Manufacturing Systems: A Petri Net Approach\n  | publisher = World Scientific Publishing\n  | isbn = 978-981-02-3029-6}}\n*{{cite book\n  | last = Zaitsev\n  | first = Dmitry\n  | date = 2013\n  | title = Clans of Petri Nets: Verification of protocols and performance evaluation of networks\n  | publisher = LAP LAMBERT Academic Publishing\n  | isbn = 978-3-659-42228-7\n  | url = https://www.morebooks.de/store/gb/book/clans-of-petri-nets/isbn/978-3-659-42228-7}}\n\n== External links ==\n{{commons category|Petri nets}}\n* [http://www.informatik.uni-hamburg.de/TGI/PetriNets/ Petri Nets World]\n* [http://www.pnml.org Petri Net Markup Language]\n* [http://code.google.com/p/jbpt/ Java implementation of Petri nets] in the jBPT library (see jbpt-petri module)\n* [http://www.informatik.uni-hamburg.de/TGI/PetriNets/tools/java/Braunl/ Java Petri net simulator]\n* [http://people.dsv.su.se/~petia/WorkflowTutorial/player.html Petia Wohed's Flash-based tutorial introduction to Workflow Technology with Petri Nets]\n* [http://www.informatik.uni-hamburg.de/TGI/PetriNets/tools/quick.html List of Petri net tools]\n\n{{DEFAULTSORT:Petri Net}}\n[[Category:Formal specification languages]]\n[[Category:Models of computation]]\n[[Category:Concurrency (computer science)]]\n[[Category:Diagrams]]\n[[Category:Petri nets| ]]\n[[Category:Software modeling language]]\n[[Category:Modeling languages]]\n", "text_old": "{{Use dmy dates|date=May 2019|cs1-dates=y}}\nA '''Petri net''', also known as a '''place/transition (PT) net''', is one of several [[mathematical]] [[modeling language]]s for the description of [[distributed systems]].  It is a class of [[discrete event dynamic system]]. A Petri net is a directed [[bipartite graph]], in which the nodes represent transitions (i.e. events that may occur, represented by bars) and places (i.e. conditions, represented by circles). The directed arcs describe which places are pre- and/or postconditions for which transitions (signified by arrows).  Some sources<ref>{{cite journal | first1 = Carl Adam | last1 = Petri | first2 = Wolfgang | last2 = Reisig | date = 2008 | title = Petri net | journal = [[Scholarpedia]] | volume = 3 | issue = 4 | page = 6477 | doi=10.4249/scholarpedia.6477| doi-access = free }}</ref> state that Petri nets were invented in August 1939 by [[Carl Adam Petri]]\u2014at the age of 13\u2014for the purpose of describing chemical processes.\n\nLike industry standards such as [[Unified Modeling Language|UML]] [[activity diagram]]s, [[Business Process Model and Notation]] and [[event-driven process chain]]s, Petri nets offer a [[diagram|graphical notation]] for stepwise processes that include choice, [[iteration]], and [[Concurrent computing|concurrent execution]]. Unlike these standards, Petri nets have an exact mathematical definition of their execution semantics, with a well-developed mathematical theory for process analysis.\n\n[[Image:Animated Petri net commons.gif|thumb|(a) Petri net trajectory example]]\n\n== Petri net basics ==\nA Petri net consists of ''places'', ''transitions'', and ''[[graph theory|arc]]s''.  Arcs run from a place to a transition or vice versa, never between places or between transitions.  The places from which an arc runs to a transition are called the ''input places'' of the transition; the places to which arcs run from a transition are called the ''output places'' of the transition.\n\nGraphically, places in a Petri net may contain a discrete number of marks called ''tokens''.  Any distribution of tokens over the places will represent a configuration of the net called a ''marking''.  In an abstract sense relating to a Petri net diagram, a transition of a Petri net may ''fire'' if it is ''enabled'', i.e. there are sufficient tokens in all of its input places; when the transition fires, it consumes the required input tokens, and creates tokens in its output places.  A firing is atomic, i.e. a single non-interruptible step.\n\nUnless an ''execution policy'' {{Example needed|date=September 2018}} is defined, the execution of Petri nets is [[Nondeterministic algorithm|nondeterministic]]: when multiple transitions are enabled at the same time, they will fire in any order.\n\nSince firing is nondeterministic, and multiple tokens may be present anywhere in the net (even in the same place),  Petri nets are well suited for modeling the [[Concurrency (computer science)|concurrent]] behavior of distributed systems.\n\n== Formal definition and basic terminology ==\nPetri nets are [[State transition system|state-transition systems]] that extend a class of nets called elementary nets.<ref>{{cite book | first1 = G. | last1 = Rozenburg | first2 = J. | last2 = Engelfriet | chapter = Elementary Net Systems | editor1-first = W. | editor1-last = Reisig | editor2-first = G. | editor2-last = Rozenberg | title = Lectures on Petri Nets I: Basic Models \u2013 Advances in Petri Nets | volume = 1491 | series = Lecture Notes in Computer Science | publisher = Springer | date = 1998 | pages = 12\u2013121 }}</ref>\n\n'''Definition 1.''' A ''net'' is a [[Tuple|triple]] <math>N = (P, T, F)</math> where:\n# <math>P</math> and <math>T</math> are ''disjoint'' finite sets of ''places'' and ''transitions'', respectively.\n# <math>F \\subseteq (P \\times T) \\cup (T \\times P)</math> is a set of ''arcs'' (or flow relations).\n\n'''Definition 2.''' Given a net ''N'' = (''P'', ''T'', ''F''), a ''configuration'' is a set ''C'' so that ''C'' <big>\u2286</big> ''P''.\n\n[[File:Petri Net A.jpg|thumb|A Petri net with an enabled transition.]][[File:Petri Net B.jpg|thumb|The Petri net that follows after the transition fires (Initial Petri net in the figure above).]]\n'''Definition 3.''' An ''elementary net'' is a net of the form ''EN'' = (''N'', ''C'') where:\n# ''N'' = (''P'', ''T'', ''F'') is a net.\n# ''C'' is such that ''C'' <big>\u2286</big> ''P'' is a ''configuration''.\n\n'''Definition 4.''' A ''Petri net'' is a net of the form ''PN'' = (''N'', ''M'', ''W''), which extends the elementary net so that:\n# ''N'' = (''P'', ''T'', ''F'') is a net.\n# ''M'' : ''P'' <big>\u2192</big> ''Z'' is a place [[multiset]], where ''Z'' is a [[countable set]]. ''M'' extends the concept of ''configuration'' and is commonly described with reference to Petri net diagrams as a ''marking''.\n# ''W'' : ''F'' <big>\u2192</big> ''Z'' is an arc [[multiset]], so that the count (or weight) for each arc is a measure of the arc ''multiplicity''.\n\nIf a Petri net is equivalent to an elementary net, then ''Z'' can be the countable set {0,1} and those elements in ''P'' that map to 1 under ''M'' form a configuration. Similarly, if a Petri net is not an elementary net, then the [[multiset]] ''M'' can be interpreted as representing a non-singleton set of configurations. In this respect, ''M'' extends the concept of configuration for elementary nets to Petri nets.\n\nIn the diagram of a Petri net (see top figure right), places are conventionally depicted with circles, transitions with long narrow rectangles and arcs as one-way arrows that show connections of places to transitions or transitions to places. If the diagram were of an elementary net, then those places in a configuration would be conventionally depicted as circles, where each circle encompasses a single dot called a ''token''. In the given diagram of a Petri net (see right), the place circles may encompass more than one token to show the number of times a place appears in a configuration. The configuration of tokens distributed over an entire Petri net diagram is called a ''marking''.\n\nIn the top figure (see right), the place ''p''<sub>1</sub> is an input place of transition ''t''; whereas, the place ''p''<sub>2</sub> is an output place to the same transition. Let ''PN''<sub>0</sub> (top figure) be a Petri net with a marking configured ''M''<sub>0</sub>, and ''PN''<sub>1</sub> (bottom figure) be a Petri net with a marking configured ''M''<sub>1</sub>. The configuration of ''PN''<sub>0</sub> ''enables'' transition ''t'' through the property that all input places have sufficient number of tokens (shown in the figures as dots) \"equal to or greater\" than the multiplicities on their respective arcs to ''t''. Once and only once a transition is enabled will the transition fire. In this example, the ''firing'' of transition ''t'' generates a map that has the marking configured ''M''<sub>1</sub> in the image of ''M''<sub>0</sub> and results in Petri net ''PN''<sub>1</sub>, seen in the bottom figure. In the diagram, the firing rule for a transition can be characterised by subtracting a number of tokens from its input places equal to the multiplicity of the respective input arcs and accumulating a new number of tokens at the output places equal to the multiplicity of the respective output arcs.\n\n'''Remark 1.''' The precise meaning of \"equal to or greater\" will depend on the precise algebraic properties of addition being applied on ''Z'' in the firing rule, where subtle variations on the algebraic properties can lead to other classes of Petri nets; for example, algebraic Petri nets.<ref>{{cite journal | last1 = Reisig | first1 = Wolfgang | date = 1991 | title = Petri Nets and Algebraic Specifications | url = | journal = Theoretical Computer Science | volume = 80 | issue = 1| pages = 1\u201334 | doi=10.1016/0304-3975(91)90203-e}}</ref>\n\nThe following formal definition is loosely based on {{harv|Peterson|1981}}.  Many alternative definitions exist.\n\n=== Syntax ===\n\nA '''Petri net graph''' (called ''Petri net'' by some, but see below) is a 3-[[tuple]] <math>(S,T,W)</math>, where\n* ''S'' is a [[finite set]] of ''places''\n* ''T'' is a finite set of ''transitions''\n* ''S'' and ''T'' are [[Disjoint sets|disjoint]], i.e. no object can be both a place and a transition\n* <math>W: (S \\times T) \\cup (T \\times S) \\to \\mathbb{N}</math> is a [[multiset]] of [[directed edge|arc]]s, i.e. it assigns to each arc a non-negative integer ''arc multiplicity'' (or weight); note that no arc may connect two places or two transitions.\n\nThe ''flow relation'' is the set of arcs: <math> F = \\{ (x,y) \\mid W(x,y) > 0 \\}</math>.  In many textbooks, arcs can only have multiplicity 1. These texts often define Petri nets using ''F'' instead of ''W''.  When using this convention, a Petri net graph is a [[bipartite graph|bipartite]] [[multigraph]] <math>(S \\cup T, F)</math> with node partitions ''S'' and ''T''.\n\nThe ''preset'' of a transition ''t'' is the set of its ''input places'': <math>{}^{\\bullet}t = \\{ s \\in S \\mid W(s,t) > 0 \\}</math>;\nits ''postset'' is the set of its ''output places'': <math>t^{\\bullet} = \\{ s \\in S \\mid W(t,s) > 0 \\}</math>. Definitions of pre- and postsets of places are analogous.\n\nA ''marking'' of a Petri net (graph) is a multiset of its places, i.e., a mapping <math>M: S \\to \\mathbb{N}</math>.  We say the marking assigns to each place a number of ''tokens''.\n\nA '''Petri net''' (called ''marked Petri net'' by some, see above) is a 4-tuple <math>(S,T,W,M_0)</math>, where\n* <math>(S,T,W)</math> is a Petri net graph;\n* <math>M_0</math> is the ''initial marking'', a marking of the Petri net graph.\n\n=== Execution semantics ===\n\nIn words:\n* firing a transition {{mvar|t}} in a marking {{mvar|M}} consumes <math>W(s,t)</math> tokens from each of its input places {{mvar|s}}, and produces <math>W(t,s)</math> tokens in each of its output places {{mvar|s}}\n* a transition is ''enabled'' (it may ''fire'') in {{mvar|M}} if there are enough tokens in its input places for the consumptions to be possible, i.e. if and only if <math>\\forall s: M(s) \\geq W(s,t)</math>.\n\nWe are generally interested in what may happen when transitions may continually fire in arbitrary order.\n\nWe say that a marking {{mvar|M'}} ''is reachable from'' a marking {{mvar|M}} ''in one step'' if <math>M \\underset{G}{\\longrightarrow} M'</math>; we say that it ''is reachable from {{mvar|M}}'' if <math>M \\overset{*}{\\underset{G}{\\longrightarrow}} M'</math>, where <math>\\overset{*}{\\underset{G}{\\longrightarrow}}</math> is the [[reflexive transitive closure]] of <math>\\underset{G}{\\longrightarrow}</math>; that is, if it is reachable in 0 or more steps.\n\nFor a (marked) Petri net <math>N=(S,T,W,M_0)</math>, we are interested in the firings that can be performed starting with the initial marking <math>M_0</math>.  Its set of ''reachable markings'' is the set\n<math>R(N) \\ \\stackrel{D}{=}\\ \\left\\{ M' \\Bigg| M_0 \\xrightarrow[(S,T,W)]{*} M' \\right\\} </math>\n\nThe ''reachability graph'' of {{mvar|N}} is the transition relation <math>\\underset{G}{\\longrightarrow}</math> restricted to its reachable markings <math>R(N)</math>.  It is the [[state space]] of the net.\n\nA ''firing sequence'' for a Petri net with graph {{mvar|G}} and initial marking <math>M_0</math> is a sequence of transitions <math>\\vec \\sigma = \\langle t_{1} \\cdots t_{n} \\rangle</math> such that <math>M_0 \\xrightarrow[G,t_{1}]{} M_1 \\wedge \\cdots \\wedge M_{n-1} \\xrightarrow[G,t_{n}]{} M_n</math>.  The set of firing sequences is denoted as <math>L(N)</math>.\n\n== Variations on the definition ==\n\nAs already remarked, a common variation is to disallow arc multiplicities and replace the [[multiset|bag]] of arcs ''W'' with a simple set, called the ''flow relation'', <math>F \\subseteq (S \\times T) \\cup (T \\times S)</math>.\nThis doesn't limit [[expressive power (computer science)|expressive power]] as both can represent each other.\n\nAnother common variation, e.g. in, Desel and Juh\u00e1s (2001),<ref>{{cite book | last1 = Desel | first1 = J\u00f6rg | last2 = Juh\u00e1s | first2 = Gabriel | chapter = What Is a Petri Net? Informal Answers for the Informed Reader | editor1-first = Hartmut | editor1-last = Ehrig | title = Unifying Petri Nets | series = LNCS | volume = 2128 | pages = 1\u201325 | date = 2001 |publisher=Springer | doi = 10.1007/3-540-45541-8_1 |display-editors=etal| isbn = 9783540430674 }}</ref> is to allow ''capacities'' to be defined on places.  This is discussed under ''extensions'' below.\n\n== Formulation in terms of vectors and matrices ==\n\nThe markings of a Petri net <math>(S,T,W,M_0)</math> can be regarded as [[Vector (mathematics)|vector]]s of nonnegative integers of length <math>|S|</math>.\n\nIts transition relation can be described as a pair of <math>|S|</math> by <math>|T|</math> [[matrix (mathematics)|matrices]]:\n* <math>W^-</math>, defined by <math>\\forall s,t: W^-[s,t] = W(s,t)</math>\n* <math>W^+</math>, defined by <math>\\forall s,t: W^+[s,t] = W(t,s).</math>\nThen their difference\n* <math> W^T = - W^- + W^+</math>\ncan be used to describe the reachable markings in terms of matrix multiplication, as follows.\nFor any sequence of transitions {{mvar|w}}, write <math>o(w)</math> for the vector that maps every transition to its number of occurrences in {{mvar|w}}.  Then, we have\n* <math>R(N) = \\{ M \\mid \\exists w:\\ w \\text{ is a firing sequence of } N\\ \\text{ and }\\ M = M_0 + W^T \\cdot o(w) \\}</math>.<!-- the \\!s make the \\{ and \\} the same size. -->\n\nNote that it must be required that {{mvar|w}} is a firing sequence; allowing arbitrary sequences of transitions will generally produce a larger set.\n\n[[Image:detailed petri net.png|frame|(b) Petri net Example]] \n<math display=\"block\">\nW^{-}=\\begin{bmatrix} * & t1 & t2 \\\\ p1 & 1  & 0 \\\\ p2 & 0 & 1 \\\\ p3 & 0 & 1 \\\\ p4 & 0 & 0 \\end{bmatrix}, \\ \nW^{+}=\\begin{bmatrix} * & t1 & t2 \\\\ p1 & 0  & 1 \\\\ p2 & 1 & 0 \\\\ p3 & 1& 0 \\\\ p4 & 0 & 1 \\end{bmatrix}, \\ \nW^T=\\begin{bmatrix} * & t1 & t2 \\\\ p1 & -1  & 1 \\\\ p2 & 1 & -1 \\\\ p3 & 1 & -1 \\\\ p4 & 0 & 1 \\end{bmatrix}\n</math>\n\n<math display=\"block\">\nM_{0}=\\begin{bmatrix} 1 & 0 & 2 & 1 \\end{bmatrix}\n</math>\n\n== Mathematical properties of Petri nets ==\n\nOne thing that makes Petri nets interesting is that they provide a balance between modeling power and analyzability: many things one would like to know about concurrent systems can be automatically determined for Petri nets, although some of those things are very expensive to determine in the general case.  Several subclasses of Petri nets have been studied that can still model interesting classes of concurrent systems, while these problems become easier.\n\nAn overview of such [[decision problem]]s, with decidability and complexity results for Petri nets and some subclasses, can be found in\nEsparza and Nielsen (1995).<ref>{{cite journal | url = http://citeseer.ist.psu.edu/226920.html | title = Decidability issues for Petri nets \u2013 a survey | first1 = Javier | last1 = Esparza | first2 = Mogens | last2 = Nielsen | journal = Bulletin of the EATCS | origyear = 1994 | edition = Revised | date = 1995 |accessdate=2014-05-14}}</ref>\n\n=== Reachability ===\nThe [[reachability problem]] for Petri nets is to decide, given a Petri net ''N'' and a marking ''M'', whether <math>M \\in  R(N)</math>.\n\nClearly, this is a matter of walking the reachability graph defined above, until either we reach the requested marking or we know it can no longer be found.  This is harder than it may seem at first: the reachability graph is generally infinite, and it is not easy to determine when it is safe to stop.\n\nIn fact, this problem was shown to be [[EXPSPACE]]-hard<ref>{{cite journal | last = Lipton | first = R. | url = http://citeseer.ist.psu.edu/contextsummary/115623/0 | title = The Reachability Problem Requires Exponential Space | journal = Technical Report 62 | date = 1976 }}</ref> years before it was shown to be decidable at all (Mayr, 1981).  Papers continue to be published on how to do it efficiently.<ref>{{cite conference | first = P. | last = K\u00fcngas | url = http://www.idi.ntnu.no/%7Epeep/papers/SARA2005Kung.ps | title = Petri Net Reachability Checking Is Polynomial with Optimal Abstraction Hierarchies | conference = Proceedings of the 6th International Symposium on Abstraction, Reformulation and Approximation\u2014SARA 2005 | location = Airth Castle, Scotland, UK | date = July 26\u201329, 2005 | access-date = 10 July 2008 | archive-url = https://web.archive.org/web/20120209084910/http://www.idi.ntnu.no/%7Epeep/papers/SARA2005Kung.ps | archive-date = 9 February 2012 | url-status = dead }}</ref> In 2018, Czerwinski et al. improved the lower bound and showed that the problem is not [[ELEMENTARY]].<ref>{{cite arxiv |eprint=1809.07115|last1=Czerwinski|first1=Wojciech|title=The Reachability Problem for Petri Nets is Not Elementary (Extended Abstract)|last2=Lasota|first2=Slawomir|last3=Lazic|first3=Ranko|last4=Leroux|first4=Jerome|last5=Mazowiecki|first5=Filip|class=cs.FL|year=2018}}</ref>\n\nWhile reachability seems to be a good tool to find erroneous states, for practical problems the constructed graph usually has far too many states to calculate. To alleviate this problem, [[linear temporal logic]] is usually used in conjunction with the [[Method of analytic tableaux|tableau method]] to prove that such states cannot be reached. Linear temporal logic uses the [[semi-decision procedure|semi-decision technique]] to find if indeed a state can be reached, by finding a set of necessary conditions for the state to be reached then proving that those conditions cannot be satisfied.\n\n=== Liveness ===\n\n[[Image:liveness-levels.gif|thumb|right|A Petri net in which transition <math>t_0</math> is dead, while for all <math>j>0,</math> <math>t_j</math> is <math>L_j</math>-live]]\n\nPetri nets can be described as having different degrees of liveness <math>L_1 - L_4</math>. A Petri net <math>(N, M_0)</math> is called <math>L_k</math>-live [[if and only if]] all of its transitions are <math>L_k</math>-live, where a transition is\n* ''dead'', if it can never fire, i.e. it is not in any firing sequence in <math>L(N,M_0)</math>\n* <math>L_1</math>-live (''potentially fireable''), if and only if it may fire, i.e. it is in some firing sequence in <math>L(N,M_0)</math>\n* <math>L_2</math>-live if it can fire arbitrarily often, i.e. if for every positive integer {{mvar|k}}, it occurs at least {{mvar|k}} times in some firing sequence in <math>L(N,M_0)</math>\n* <math>L_3</math>-live if it can fire infinitely often, i.e. if there is some fixed (necessarily infinite) firing sequence in which for every positive integer {{mvar|k}}, the transition <math>L_3</math> occurs at least {{mvar|k}} times,\n* <math>L_4</math>-live (''live'') if it may always fire, i.e. it is <math>L_1</math>-live in every reachable marking in <math>R(N,M_0)</math>\n\nNote that these are increasingly stringent requirements: <math>L_{j+1}</math>-liveness implies <math>L_j</math>-liveness, for <math display=\"inline\">\\textstyle{j \\in {1,2,3}}</math>.\n\nThese definitions are in accordance with Murata's overview,<ref>{{cite journal | url = http://www.cs.uic.edu/bin/view/Murata/Publications | title = Petri Nets: Properties, Analysis and Applications | first = Tadao | last = Murata | journal = Proceedings of the IEEE | volume = 77 | issue = 4 | pages = 541\u2013558 | date = April 1989 | accessdate = 2014-10-13 | doi=10.1109/5.24143}}</ref> which additionally uses <math>L_0</math>''-live'' as a term for ''dead''.\n\n=== Boundedness ===\n[[File:Reachability graph for petri net.png|right|frame|width=50px|The reachability graph of ''N2''.]]\n\nA place in a Petri net is called ''k-bounded'' if it does not contain more than ''k'' tokens in all reachable markings, including the initial marking; it is said to be ''safe'' if it is 1-bounded; it is ''[[bounded set|bounded]]'' if it is ''k-bounded'' for some ''k''.\n\nA (marked) Petri net is called ''k''-bounded, ''safe'', or ''bounded'' when all of its places are.\nA Petri net (graph) is called ''(structurally) bounded'' if it is bounded for every possible initial marking.\n\nNote that a Petri net is bounded if and only if its reachability graph is finite.\n\nBoundedness is decidable by looking at [[covering problem|covering]], by constructing the [[Richard Karp|Karp]]\u2013Miller Tree.\n\nIt can be useful to explicitly impose a bound on places in a given net.\nThis can be used to model limited system resources.\n\nSome definitions of Petri nets explicitly allow this as a syntactic feature.<ref>\n{{cite web\n  |url=http://www.techfak.uni-bielefeld.de/~mchen/BioPNML/Intro/pnfaq.html\n  |ref=harv\n  |title=Petri Nets\n  |website = www.techfak.uni-bielefeld.de\n}}\n</ref>\nFormally, ''Petri nets with place capacities'' can be defined as tuples <math>(S,T,W,C,M_0)</math>, where <math>(S,T,W,M_0)</math> is a Petri net, <math>C: P \\rightarrow\\!\\!\\!\\shortmid \\mathbb N</math> an assignment of capacities to (some or all) places, and the transition relation is the usual one restricted to the markings in which each place with a capacity has at most that many tokens.\n\n[[File:Two-boundedness-ub.png|right|frame|An unbounded Petri net, ''N''.]]\n\nFor example, if in the net ''N'', both places are assigned capacity 2, we obtain a Petri net with place capacities, say ''N2''; its reachability graph is displayed on the right.\n\n[[File:Two-boundedness-cb.png|right|frame|A two-bounded Petri net, obtained by extending ''N'' with \"counter-places\".]]\n\nAlternatively, places can be made bounded by extending the net.  To be exact,\na place can be made ''k''-bounded by adding a \"counter-place\" with flow opposite to that of the place, and adding tokens to make the total in both places ''k''.\n\n==Discrete, continuous, and hybrid Petri nets==\n\nAs well as for discrete events, there are Petri nets for continuous and hybrid discrete-continuous processes that are useful in discrete, continuous and hybrid [[control theory]],<ref>{{cite book | url = https://books.google.com/books?id=VsS0JkMcXGwC | title = Discrete, continuous, and hybrid Petri Nets | first1 = Ren\u00e9 | last1 = David | first2 = Hassane | last2 = Alla | publisher = Springer | date = 2005 | isbn = 978-3-540-22480-8 }}</ref> and related to discrete, continuous and hybrid [[automata theory|automata]].\n\n==Extensions==\nThere are many extensions to Petri nets. Some of them are completely backwards-compatible (e.g. [[coloured Petri nets]]) with the original Petri net, some add properties that cannot be modelled in the original Petri net formalism (e.g. timed Petri nets). Although backwards-compatible models do not extend the computational power of Petri nets, they may have more succinct representations and may be more convenient for modeling.<ref>{{cite book|last1=Jensen|first1=Kurt|authorlink= Kurt Jensen (computer scientist)|title=A brief introduction to colored Petri nets|volume=1217|pages=203\u2013208|chapter-url=https://link.springer.com/content/pdf/10.1007/BFb0035389.pdf|doi=10.1007/BFb0035389|chapter=A brief introduction to coloured Petri Nets|series=Lecture Notes in Computer Science|year=1997|isbn=978-3-540-62790-6}}</ref> Extensions that cannot be transformed into Petri nets are sometimes very powerful, but usually lack the full range of mathematical tools available to analyse ordinary Petri nets.\n\nThe term  [[high-level Petri net]] is used for many Petri net formalisms that extend the basic P/T net formalism; this includes coloured Petri nets, hierarchical Petri nets such as [[Nets within Nets]], and all other extensions sketched in this section.  The term is also used specifically for the type of coloured nets supported by [[CPN Tools]].\n\nA short list of possible extensions:\n\n*Additional types of arcs; two common types are:\n**a ''reset arc'' does not impose a precondition on firing, and empties the place when the transition fires; this makes reachability undecidable,<ref>{{cite journal | first1 = T. | last1 = Araki | first2 = T. | last2 = Kasami | title = Some Decision Problems Related to the Reachability Problem for Petri Nets | journal = Theoretical Computer Science | volume = 3 | issue = 1 | pages = 85\u2013104 | date = 1977 | doi=10.1016/0304-3975(76)90067-0}}</ref> while some other properties, such as termination, remain decidable;<ref>{{cite book | first1 = C. | last1 = Dufourd | first2 = A. | last2 = Finkel | first3 = Ph. | last3 =Schnoebelen | chapter = Reset Nets Between Decidability and Undecidability | title = Proceedings of the 25th International Colloquium on Automata, Languages and Programming | series = [[Lecture Notes in Computer Science|LNCS]] | volume = 1443 | pages = 103\u2013115 | date = 1998 }}</ref>\n**an ''inhibitor arc'' imposes the precondition that the transition may only fire when the place is empty; this allows arbitrary computations on numbers of tokens to be expressed, which makes the formalism [[Turing complete]] and implies existence of a universal net.<ref>{{cite journal | last = Zaitsev | first = D. A. | title = Toward the Minimal Universal Petri Net | journal = IEEE Transactions on Systems, Man, and Cybernetics: Systems | date = 2013 | pages = 47\u201358 | doi = 10.1109/TSMC.2012.2237549 | volume=44}}</ref>\n*In a standard Petri net, tokens are indistinguishable.  In a [[Coloured Petri net]], every token has a value.<ref>{{cite web | url = http://www.daimi.au.dk/CPnets/intro/verybrief.html | title = Very Brief Introduction to CP-nets | publisher = Department of Computer Science, University of Aarhus, Denmark }}</ref>  In popular tools for coloured Petri nets such as [[CPN Tools]], the values of tokens are typed, and can be tested (using ''guard'' expressions) and manipulated with a [[functional programming language]]. A subsidiary of coloured Petri nets are the [[well-formed Petri net]]s, where the arc and guard expressions are restricted to make it easier to analyse the net.\n*Another popular extension of Petri nets is hierarchy; this in the form of different views supporting levels of refinement and abstraction was studied by Fehling. Another form of hierarchy is found in so-called object Petri nets or object systems  where a Petri net can contain Petri nets as its tokens inducing a hierarchy of nested Petri nets that communicate by synchronisation of transitions on different levels. See<ref>{{cite web |url=http://llpn.com/OPNs.html |title=Archived copy |accessdate=2006-01-06 |url-status=dead |archiveurl=https://web.archive.org/web/20051103131745/http://www.llpn.com/OPNs.html |archivedate=2005-11-03 }}</ref> for an informal introduction to object Petri nets.\n*A [[Vector addition system|vector addition system with states (VASS)]] is an equivalent formalism to Petri nets.  However, it can be superficially viewed as a generalisation of Petri nets. Consider a [[finite state automaton]] where each transition is labelled by a transition from the Petri net. The Petri net is then synchronised with the finite state automaton, i.e., a transition in the automaton is taken at the same time as the corresponding transition in the Petri net. It is only possible to take a transition in the automaton if the corresponding transition in the Petri net is enabled, and it is only possible to fire a transition in the Petri net if there is a transition from the current state in the automaton labelled by it. (The definition of VASS is usually formulated slightly differently.)\n*[[Prioritised Petri net]]s add priorities to transitions, whereby a transition cannot fire, if a higher-priority transition is enabled (i.e. can fire). Thus, transitions are in priority groups, and e.g. priority group 3 can only fire if all transitions are disabled in groups 1 and 2. Within a priority group, firing is ''still'' non-deterministic.\n*The non-deterministic property has been a very valuable one, as it lets the user abstract a large number of properties (depending on what the net is used for). In certain cases, however, the need arises to also model the timing, not only the structure of a model. For these cases, [[timed Petri nets]] have evolved, where there are transitions that are timed, and possibly transitions which are not timed (if there are, transitions that are not timed have a higher priority than timed ones). A subsidiary of timed Petri nets are the [[stochastic Petri net]]s that add [[nondeterministic time]] through adjustable randomness of the transitions. The [[Exponential distribution|exponential random distribution]] is usually used to 'time' these nets. In this case, the nets' reachability graph can be used as a continuous time [[Markov chain]] (CTMC).\n*[[Dualistic Petri Nets]] (dP-Nets) is a Petri Net extension developed by E. Dawis, et al.<ref>{{cite conference | last1 = Dawis | first1 = E. P. | first2 = J. F. | last2 = Dawis | first3 = Wei-Pin | last3 = Koo | date = 2001 | title = Architecture of Computer-based Systems using Dualistic Petri Nets | conference = 2001 IEEE International Conference on Systems, Man, and Cybernetics | volume = 3 | pages = 1554\u20131558 }}</ref> to better represent real-world process.  dP-Nets balance the duality of change/no-change, action/passivity, (transformation) time/space, etc., between the bipartite Petri Net constructs of transformation and place resulting in the unique characteristic of ''transformation marking'', i.e., when the transformation is \"working\" it is marked.  This allows for the transformation to fire (or be marked) multiple times representing the real-world behavior of process throughput.  Marking of the transformation assumes that transformation time must be greater than zero.  A zero transformation time used in many typical Petri Nets may be mathematically appealing but impractical in representing real-world processes.  dP-Nets also exploit the power of Petri Nets' hierarchical abstraction to depict [[Process architecture]].  Complex process systems are modeled as a series of simpler nets interconnected through various levels of hierarchical abstraction.  The process architecture of a packet switch is demonstrated in,<ref>{{cite conference | last = Dawis | first = E. P. | date = 2001 | title = Architecture of an SS7 Protocol Stack on a Broadband Switch Platform using Dualistic Petri Nets | conference = 2001 IEEE Pacific Rim Conference on Communications, Computers and signal Processing | volume = 1 | pages = 323\u2013326 }}</ref> where development requirements are organized around the structure of the designed system.\n\nThere are many more extensions to Petri nets, however, it is important to keep in mind, that as the complexity of the net increases in terms of extended properties, the harder it is to use standard tools to evaluate certain properties of the net. For this reason, it is a good idea to use the most simple net type possible for a given modelling task.\n\n== Restrictions ==\n[[Image:petri net types.svg|thumb|Petri net types graphically]]\n\nInstead of extending the Petri net formalism, we can also look at restricting it, and look at particular types of Petri nets, obtained by restricting the syntax in a particular way.  Ordinary Petri nets are the nets where all arc weights are 1.  Restricting further, the following types of ordinary Petri nets are commonly used and studied:\n\n# In a [[state machine]] (SM), every transition has one incoming arc, and one outgoing arc, and all markings have exactly one token. As a consequence, there can ''not'' be ''concurrency'', but there can be ''conflict'' (i.e. [[Indeterminacy in concurrent computation|nondeterminism]]). Mathematically: <math>\\forall t\\in T: |t^\\bullet|=|{}^\\bullet t|=1</math>\n# In a [[marked graph]] (MG), every place has one incoming arc, and one outgoing arc. This means, that there can ''not'' be ''conflict'', but there can be ''concurrency''. Mathematically: <math>\\forall s\\in S: |s^\\bullet|=|{}^\\bullet s|=1</math>\n# In a ''free choice'' net (FC), every arc from a place to a transition is either the only arc from that place or the only arc to that transition, i.e. there can be ''both concurrency and conflict, but not at the same time''. Mathematically: <math>\\forall s\\in S: (|s^\\bullet|\\leq 1) \\vee ({}^\\bullet (s^\\bullet)=\\{s\\})</math>\n# Extended free choice (EFC) \u2013 a Petri net that can be ''transformed into an FC''.\n# In an ''asymmetric choice'' net (AC), concurrency and conflict (in sum, ''confusion'') may occur, but ''not symmetrically''. Mathematically: <math>\\forall s_1,s_2\\in S: (s_1{}^\\bullet \\cap s_2{}^\\bullet\\neq \\emptyset) \\to [(s_1{}^\\bullet\\subseteq s_2{}^\\bullet) \\vee (s_2{}^\\bullet\\subseteq s_1{}^\\bullet)]</math>\n<!-- the next definition needs to be cleaned up by someone who understands what is meant here\n# In a ''multiple asymmetric choice'' net (MAC), multiple concurrency and conflict (in sum, ''multiple confusion'') may occur, but no ''confusion''. Mathematically: ''for a set |P|=k,'' <math>\\forall t\\in T </math> exist a subset <math> {}^\\bullet t,</math> and  <math> {}^\\bullet T </math> contains all subsets and is the powerset 2<sup>''k''</sup> without the empty subset\n-->\n\n==Work flow nets==\n[[Workflow net]]s (WF-nets) are a subclass of Petri nets intending to model the [[workflow]] of process activities.<ref name=\"Aalst,1998\">{{cite journal | last = van der Aalst | first = W. M. P. | date = 1998 | url = http://wwwis.win.tue.nl/~wvdaalst/publications/p53.pdf | title = The application of Petri nets to workflow management | journal = Journal of Circuits, Systems and Computers | volume = 8 | issue = 1 | pages = 21\u201366 | doi=10.1142/s0218126698000043| citeseerx = 10.1.1.30.3125 }}</ref> \nThe WF-net transitions are assigned to tasks or activities, and places are assigned to the pre/post conditions.\nThe WF-nets have additional structural and operational requirements, mainly the addition of a single input (source) place with no previous transitions, and output place (sink) with no following transitions. Accordingly, start and termination markings can be defined that represent the process status.\n\nWF-nets have the '''soundness''' property,<ref name=\"Aalst,1998\" /> indicating that a process with a start marking of ''k'' tokens in its source place, can reach the termination state marking with ''k'' tokens in its sink place (defined as ''k''-sound WF-net). Additionally, all the transitions in the process could fire (i.e., for each transition there is a reachable state in which the transition is enabled). \nA general sound (G-sound) WF-net is defined as being ''k''-sound for every ''k'' > 0.<ref name=\"Hee et al., 2003\">{{cite book | last1 = van Hee | first1 = K. | last2 = Sidorova | first2 = N. | last3 = Voorhoeve | first3 = M. | date = 2003 | chapter-url = http://www.win.tue.nl/~sidorova/03/van_Hee_Sidorova_Voorhoeve.pdf | chapter = Soundness and separability of workflow nets in the stepwise refinement approach | editor1-last = van der Aalst | editor1-first = W. M. P. | editor2-last = Best | editor2-first =E. | title = Application and Theory of Petri Nets 2003 | series = Lect Notes in Comput Sci | volume = 2678 | pages = 337\u2013356 | publisher = Springer }}</ref>\n\nA directed '''[[Path (graph theory)|path]]''' in the Petri net is defined as the sequence of nodes (places and transitions) linked by the directed arcs. An '''elementary path''' includes every node in the sequence only once.\n\nA '''well-handled''' Petri net is a net in which there are no fully distinct elementary paths between a place and a transition (or transition and a place), i.e., if there are two paths between the pair of nodes then these paths share a node.\nAn acyclic well-handled WF-net is sound (G-sound).<ref name=\"Ping et al., 2004\">{{cite conference | last1 = Ping | first1 = L. | last2 = Hao | first2 = H. | last3 = Jian | first3 =L. | date = 2004 | title = On 1-soundness and soundness of workflow nets | editor-first = Daniel | editor-last = Moldt | conference = Proc of the 3rd Workshop on Modelling of Objects, Components, and Agents | location = Aarhus, Denmark | publisher = DAIMI PB | volume = 571 | pages = 21\u201336 }}</ref>\n\nExtended WF-net is a Petri net that is composed of a WF-net with additional transition t (feedback transition). The sink place is connected as the input place of transition t and the source place as its output place. Firing of the transition causes iteration of the process (Note: the extended WF-net is not a WF-net).<ref name=\"Aalst,1998\" /> \n \nWRI (Well-handled with Regular Iteration) WF-net, is an extended acyclic well-handled WF-net.  \nWRI-WF-net can be built as composition of nets, i.e., replacing a transition within a WRI-WF-net with a subnet which is a WRI-WF-net. The result is also WRI-WF-net. WRI-WF-nets are G-sound,<ref name=\"Ping et al., 2004\" /> therefore by using only WRI-WF-net building blocks, one can get WF-nets that are G-sound by construction.\n\nThe [[Design structure matrix]] (DSM) can model process relations, and be utilized for process planning. The '''DSM-nets''' are realization of DSM-based plans into workflow processes by Petri nets, and are equivalent to WRI-WF-nets. The DSM-net construction process ensures the soundness property of the resulting net.\n\n==Other models of concurrency==\n\nOther ways of modelling concurrent computation have been proposed, including [[process algebra]], the [[actor model]], and [[trace theory]].<ref>{{cite book | first = Antoni | last = Mazurkiewicz | chapter = Introduction to Trace Theory | title = The Book of Traces | editor1-first = V. | editor1-last = Diekert | editor2-first = G. | editor2-last = Rozenberg | publisher = World Scientific | location = Singapore | date = 1995 | pages = 3\u201367 }}</ref> Different models provide tradeoffs of concepts such as [[compositionality]], [[Modularity (programming)|modularity]], and locality.\n\nAn approach to relating some of these models of concurrency is proposed in the chapter by Winskel and Nielsen.<ref>{{cite book | first1 = G. | last1 = Winskel | first2 = M. | last2 = Nielsen | chapter-url = http://www.daimi.au.dk/PB/463/PB-463.pdf | chapter = Models for Concurrency | title = Handbook of Logic and the Foundations of Computer Science | volume = 4 | pages = 1\u2013148 | publisher = OUP }}</ref>\n\n== Application areas ==\n* [[Business Process Modeling]]\n* [[Concurrent programming]]\n* [[Data analysis]]\n* [[Diagnosis (Artificial intelligence)]]\n* [[Boolean differential calculus]]\n* [[Sequential function chart|Discrete process control]]\n* [[Kahn process networks]]\n* [[Process modeling]]\n* [[Reliability engineering]]\n* [[Simulation]]\n* [[Software design]]\n* [[Workflow management system]]s\n* [[Game theory]]\n\n== See also ==\n* [[Communicating finite-state machine]]\n* [[Finite-state machine]]\n* [[Kahn process networks]]\n* [[Petri Net Markup Language]]\n* [[Petriscript]]\n* [[Process architecture]]\n* [[Vector addition system]]\n\n== References ==\n{{reflist|30em}}\n\n== Further reading ==\n*{{cite book\n  | last = Cardoso\n  | first = Janette\n  | first2 = Heloisa | last2 = Camargo\n  | date =1999\n  | title = Fuzziness in Petri Nets\n  | publisher = Physica-Verlag\n  | isbn = 978-3-7908-1158-2}}\n*{{cite journal\n  | last = Grobelna\n  | first = Iwona\n  | title= Formal verification of embedded logic controller specification with computer deduction in temporal logic\n  | journal= Przeglad Elektrotechniczny\n  | date = 2011\n  | volume = 87\n  | issue = 12a\n  | pages=47\u201350}}\n*{{cite book\n  | last = Jensen\n  | first = Kurt\n  | date =1997\n  | title = Coloured Petri Nets\n  | url = https://archive.org/details/springer_10.1007-978-3-642-60794-3\n  | publisher = Springer Verlag\n  | isbn = 978-3-540-62867-5}}\n*{{cite book\n  | last = \u041a\u043e\u0442\u043e\u0432\n  | first = \u0412\u0430\u0434\u0438\u043c\n  | date = 1984\n  | title = \u0421\u0435\u0442\u0438 \u041f\u0435\u0442\u0440\u0438 (Petri Nets, in Russian)\n  | publisher = \u041d\u0430\u0443\u043a\u0430, \u041c\u043e\u0441\u043a\u0432\u0430\n  }}\n*{{cite book\n  | last = Pataricza\n  | first = Andr\u00e1s\n  | date = 2004\n  | title = Form\u00e1lis m\u00f3dszerek az informatik\u00e1ban (Formal methods in informatics)\n  | publisher = TYPOTEX Kiad\u00f3\n  | isbn = 978-963-9548-08-4}}\n*{{cite journal\n  | last =Peterson\n  | first = James L.\n  | title=Petri Nets\n  | journal=ACM Computing Surveys\n  | date = 1977\n  | volume=9\n  | issue=3\n  | pages=223\u2013252\n  | doi =10.1145/356698.356702| hdl = 10338.dmlcz/135597\n | hdl-access=free\n  }}\n*{{Cite book\n  | last = Peterson\n  | first = James Lyle\n  | date = 1981\n  | title = Petri Net Theory and the Modeling of Systems\n  | publisher = Prentice Hall\n  | ref = harv\n  | isbn = 978-0-13-661983-3}}\n*{{Cite thesis\n  | last = Petri | first = Carl A.\n  | title=Kommunikation mit Automaten\n  | publisher=University of Bonn\n  | date = 1962\n  | degree = Ph. D.\n  }}\n*{{cite journal\n  | last = Petri\n  | first = Carl Adam\n  | last2 = Reisig\n  | first2 = Wolfgang\n  | title = Petri net\n  | journal = Scholarpedia |volume = 3 | issue = 4 | page = 6477\n  | doi=10.4249/scholarpedia.6477| year = 2008\n  | doi-access = free\n  }}\n*{{cite book\n  | last = Reisig\n  | first = Wolfgang\n  | date =1992\n  | title = A Primer in Petri Net Design\n  | publisher = Springer-Verlag\n  | isbn = 978-3-540-52044-3}}\n*{{cite book\n  | last = Riemann\n  | first = Robert-Christoph\n  | date =1999\n  | title = Modelling of Concurrent Systems: Structural and Semantical Methods in the High Level Petri Net Calculus\n  | publisher = Herbert Utz Verlag\n  | isbn = 978-3-89675-629-9}}\n*{{cite book\n  | last = St\u00f6rrle\n  | first = Harald\n  | date =2000\n  | title = Models of Software Architecture \u2013 Design and Analysis with UML and Petri-Nets\n  | publisher = Books on Demand\n  | isbn = 978-3-8311-1330-9}}\n*{{cite book\n  | last = Zhou\n  | first = Mengchu |authorlink1=Mengchu Zhou\n  | first2=Frank | last2 = Dicesare\n  | date =1993\n  | title = Petri Net Synthesis for Discrete Event Control of Manufacturing Systems\n  | publisher = Kluwer Academic Publishers\n  | isbn = 978-0-7923-9289-7}}\n*{{cite book\n  | last = Zhou\n  | first = Mengchu |authorlink1=Mengchu Zhou\n  | first2 = Kurapati | last2 = Venkatesh\n  | date =1998\n  | title = Modeling, Simulation, & Control of Flexible Manufacturing Systems: A Petri Net Approach\n  | publisher = World Scientific Publishing\n  | isbn = 978-981-02-3029-6}}\n*{{cite book\n  | last = Zaitsev\n  | first = Dmitry\n  | date = 2013\n  | title = Clans of Petri Nets: Verification of protocols and performance evaluation of networks\n  | publisher = LAP LAMBERT Academic Publishing\n  | isbn = 978-3-659-42228-7\n  | url = https://www.morebooks.de/store/gb/book/clans-of-petri-nets/isbn/978-3-659-42228-7}}\n\n== External links ==\n{{commons category|Petri nets}}\n* [http://www.informatik.uni-hamburg.de/TGI/PetriNets/ Petri Nets World]\n* [http://www.pnml.org Petri Net Markup Language]\n* [http://code.google.com/p/jbpt/ Java implementation of Petri nets] in the jBPT library (see jbpt-petri module)\n* [http://www.informatik.uni-hamburg.de/TGI/PetriNets/tools/java/Braunl/ Java Petri net simulator]\n* [http://people.dsv.su.se/~petia/WorkflowTutorial/player.html Petia Wohed's Flash-based tutorial introduction to Workflow Technology with Petri Nets]\n* [http://www.informatik.uni-hamburg.de/TGI/PetriNets/tools/quick.html List of Petri net tools]\n\n{{DEFAULTSORT:Petri Net}}\n[[Category:Formal specification languages]]\n[[Category:Models of computation]]\n[[Category:Concurrency (computer science)]]\n[[Category:Diagrams]]\n[[Category:Petri nets| ]]\n[[Category:Software modeling language]]\n[[Category:Modeling languages]]\n", "name_user": "Lifun", "label": "safe", "comment": "Fix dead link", "url_page": "//en.wikipedia.org/wiki/Petri_net"}
